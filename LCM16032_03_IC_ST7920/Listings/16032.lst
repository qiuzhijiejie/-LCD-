C51 COMPILER V9.60.7.0   16032                                                             11/18/2024 16:58:39 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE 16032
OBJECT MODULE PLACED IN .\Objects\16032.obj
COMPILER INVOKED BY: D:\KEIL_STM32\C51\BIN\C51.EXE 16032.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\
                    -16032.lst) OBJECT(.\Objects\16032.obj)

line level    source

   1          #include <REGX52.H>
   2          #include "16032.h"
   3          #include "picture.h"
   4          #include <intrins.h>
   5          
   6          sbit RS   = P3^0;                    // RS对应单片机引脚
   7          sbit RW   = P3^1;                    // RW对应单片机引脚
   8          sbit E    = P3^2;                    // E对应单片机引脚
   9          sbit KEY=P2^0;                  //按键
  10          
  11          unsigned char Column; //列方向地址指针(用于setLCDCursor子程序)
  12          unsigned char row;    //行方向地址指针(用于setLCDCursor子程序)
  13          
  14          void lcdwaitidle(void)       //控制器忙检测子程序
  15          {   unsigned char i;
  16   1          P1=0xff;
  17   1          RS=0;
  18   1          RW=1;
  19   1          E=1;
  20   1          for(i=0;i<20;i++)//这个循环最多检查20次  
  21   1              {                
  22   2              if( (P1&0x80)!= 0x80 )
  23   2                      {
  24   3                              break;  //D7=0 空闲退出
  25   3                      }
  26   2              }
  27   1          E=0;
  28   1      }
  29          
  30          
  31          unsigned char lcdrd(void)  //从液晶显示控制器读数据
  32          {   unsigned char d;
  33   1          lcdwaitidle();                  
  34   1          RS=1;                        
  35   1          RW=1;                                  //RW 1: read
  36   1          E=1;
  37   1          _nop_();
  38   1          d=P1;
  39   1          E=0;
  40   1          return d;
  41   1      }
  42          
  43          void lcdwd(unsigned char d) //向液晶显示控制器写数据
  44          {   lcdwaitidle();            
  45   1          P1=d;
  46   1          RS=1;                   //RS 1:select data write, read       
  47   1          RW=0;                                       //RW 0: write
  48   1          E=1;
  49   1          _nop_();
  50   1          E=0;
  51   1      }
  52          
  53          void lcdwc(unsigned char c)  //向液晶显示控制器送指令
  54          {   lcdwaitidle();           
C51 COMPILER V9.60.7.0   16032                                                             11/18/2024 16:58:39 PAGE 2   

  55   1          P1=c;
  56   1          RS=0;                        //RS 0:select instruction write,        
  57   1          RW=0;
  58   1          E=1;
  59   1          _nop_();
  60   1          E=0;
  61   1      }
  62          
  63          
  64          void setLCDCursor(void)           //写入绘图区域内部RAM指针子程序
  65          {   
  66   1              lcdwc(0x36);             //扩展指令集
  67   1          lcdwc((row&0x1f)|0x80);  //先送Y地址,范围是0~31
  68   1          lcdwc((Column/16)|0x80); //再送X地址
  69   1          lcdwc(0x30);             //恢复为基本指令集
  70   1      }
  71          
  72          void lcdon(void)    //LCD显示开启子程序
  73          {   
  74   1              lcdwc(0x30);    //设置为基本指令集
  75   1          lcdwc(0x0c);
  76   1      }
  77          
  78          void lcdoff(void)   //LCD显示关闭子程序
  79          {   lcdwc(0x30);    //设置为基本指令集
  80   1          lcdwc(0x08);
  81   1      }
  82          
  83          void lcdgraphon(void) //绘图区域显示开启子程序
  84          {   lcdwc(0x36);
  85   1          lcdwc(0x30);      //恢复为基本指令集
  86   1      }
  87          
  88          void lcdgraphoff(void) //绘图区域显示关闭子程序
  89          {   lcdwc(0x34);
  90   1          lcdwc(0x30);       //恢复为基本指令集
  91   1      }
  92          
  93          void lcdreset(void)                     //液晶显示控制器初始化子程序
  94          {   lcdwc(0x33);                        //接口模式设置
  95   1          delay3ms();                         //延时3MS
  96   1          lcdwc(0x30);                        //基本指令集
  97   1          delay3ms();                         //延时3MS
  98   1          lcdwc(0x01);                        //清屏控制字
  99   1          delay3ms();                         //延时3MS
 100   1          lcdwc(0x06);                        //显示光标移动设置
 101   1          lcdon();                            //开显示
 102   1      }
 103          
 104          void delay3ms(void)                     //延时3MS子程序
 105          { unsigned char i,j,k;
 106   1        for(i=0;i<3;i++)
 107   1          for(j=0;j<64;j++)
 108   1            for(k=0;k<51;k++);
 109   1      }
 110          
 111          
 112          
 113          void fillLCD_OddColumn(unsigned char oddData, unsigned char evenData)  
 114          {
 115   1          unsigned char i; 
 116   1          while (row < 32)   
C51 COMPILER V9.60.7.0   16032                                                             11/18/2024 16:58:39 PAGE 3   

 117   1          {
 118   2              setLCDCursor();   
 119   2              if (row % 2 == 0)   
 120   2              {
 121   3                  for (i = 0; i < 20; i++)
 122   3                      lcdwd(evenData);   
 123   3              }
 124   2              else   
 125   2              {
 126   3                  for (i = 0; i < 20; i++)
 127   3                      lcdwd(oddData);   
 128   3              }
 129   2              row++;   
 130   2          }
 131   1          row = 0;   
 132   1      }
 133          
 134          void fillLCD(unsigned char d) //整屏显示d代表的字数据子程序
 135          {   
 136   1              unsigned char i;
 137   1          while(row<32)
 138   1          {   
 139   2                      setLCDCursor();
 140   2              for(i=0;i<20;i++)
 141   2                      {
 142   3                  lcdwd(d);
 143   3                      }
 144   2              row++;
 145   2          }
 146   1          row=0;
 147   1      }
 148          
 149          
 150          
 151          void exdelay(void)                      //演示延时子程序
 152          { unsigned char i,j,k;                  //延时约300mS
 153   1        for(i=0;i<30;i++)
 154   1          for(j=0;j<64;j++)
 155   1            for(k=0;k<51;k++);
 156   1      }
 157          
 158          
 159          void charlcdfill(unsigned int c)//整屏显示ST7920内部的CGROMA程序
 160          {   for(Column=row=0;1;)
 161   1          {   putchar(c);                
 162   2                      c+=1;
 163   2              if((Column==0) && (row==0)) break;
 164   2          }
 165   1      }
 166          
 167          void Clean(unsigned int c)        
 168          {  
 169   1              for(;;)
 170   1          {   putchar(c);            
 171   2              if((Column==0) && (row==0)) break;
 172   2          }
 173   1      }
 174          
 175          void putchar(unsigned int c) //定位写字符子程序
 176          {   unsigned char d;
 177   1          if(c>128)                 //字符码大于128表示为汉字
 178   1          {   if( (Column&0x1)==1 ) //写汉字时,Column字符位置在奇数位置,则
C51 COMPILER V9.60.7.0   16032                                                             11/18/2024 16:58:39 PAGE 4   

 179   2              {   lcdwd(' ');       //自动补添一个空格对齐后再显示汉字
 180   3                  charcursornext(); //置字符位置为下一个有效位置
 181   3              }
 182   2              charlcdpos();
 183   2              if((c&0xff00)==0xff00)//若高位字节为0FFH则表示为自定义字符
 184   2                  c=0xffff-c;       //则转换为ST7920的字符码
 185   2              lcdwd(c/256);         //写高位字符
 186   2              charcursornext();
 187   2              lcdwd(c&0xff);        //写低位字符
 188   2              charcursornext();
 189   2          }
 190   1          else                      //字符码小于128表示为ASCII字符
 191   1          {   charlcdpos();
 192   2              if( (Column&0x1)==1 ) //写ASCII字符时,Column字符位置在奇数位置,则
 193   2              {   d=lcdrd();        //读高位字符
 194   3                  charlcdpos();
 195   3                  lcdwd(d);         //重新写高位字符
 196   3                  lcdwd(c);
 197   3              }
 198   2              else
 199   2              {   lcdwd(c);         //写ASCII字符时,Column字符位置在偶数位置,则
 200   3                  lcdwd(' ');       //直接写入,同时自动补显一个空格.
 201   3              }
 202   2              charcursornext();     //置字符位置为下一个有效位置
 203   2          }
 204   1      }
 205          
 206          void putstr(unsigned char code *s)      //显示字符串子程序,字符码为0时退出
 207          {   unsigned int c;
 208   1          while(1)
 209   1          {   c=*s;
 210   2              s++;
 211   2              if(c==0) break;
 212   2              if(c<128)
 213   2                  putchar(c);
 214   2              else
 215   2              {   putchar(c*256+*s);
 216   3                  s++;
 217   3              }
 218   2          }
 219   1      }
 220          
 221          void putstrxy(unsigned char cx,unsigned char cy,unsigned char code *s)
 222          {                                       //在(cx,cy)字符位置写字符串子程序
 223   1          Column=cx;                           //置当前X位置为cx
 224   1          row=cy;                           //置当前Y位置为cy
 225   1          putstr(s);
 226   1      }
 227          
 228          void setcharcgram(unsigned char cindex,unsigned char code *s)
 229          {   unsigned char i;
 230   1          lcdwc(0x34);                        //扩充指令集,图形模式关闭
 231   1          lcdwc(0x02);                        //SR=0 激活CGRAM
 232   1          lcdwc(0x30);                        //恢复为基本指令集
 233   1          lcdwc( ((cindex&0x3)<<4) | 0x40);   //设置CGRAM地址
 234   1          for(i=0;i<32;i++,s++)               //写点阵数据
 235   1          lcdwd(*s);
 236   1      }
 237          
 238          
 239          void putsizeimage(unsigned char XSIZE,unsigned char YSIZE,unsigned char code *s)
 240          {  unsigned char lx,ly,x;
C51 COMPILER V9.60.7.0   16032                                                             11/18/2024 16:58:39 PAGE 5   

 241   1         x=Column;
 242   1         for(ly=0;ly<YSIZE;ly++,row++)
 243   1         {  for(Column=x,lx=0;lx<XSIZE;)
 244   2            {  if((Column&0x08)==0) setLCDCursor();
 245   3               lcdwd(*s);
 246   3               s++;
 247   3               lx+=8;
 248   3               Column+=8;
 249   3            }
 250   2         }
 251   1         Column=x;
 252   1      }
 253          
 254          void putimage(unsigned char code *s)    //显示图形子程序
 255          {   unsigned char XSIZE,YSIZE;
 256   1          XSIZE=*s;
 257   1          s++;
 258   1          YSIZE=*s;
 259   1          s++;
 260   1          putsizeimage(XSIZE,YSIZE,s);
 261   1      }
 262          
 263          void charlcdpos(void)       //设置坐标点(Column,row)内部RAM地址的子程序
 264          {   unsigned char ddaddr;
 265   1          if(Column>19) Column=0; //字符位置Column的有效范围为(0到19)
 266   1          row&=0X1;               //字符位置row的有效范围为(0到1)
 267   1          ddaddr=Column/2;
 268   1          if(row==0)              //(第一行)X: 第0----19个字符
 269   1              lcdwc(ddaddr|0x80); // DDRAM:  80----89H
 270   1          else                    //(第二行)X: 第0----19个字符
 271   1              lcdwc(ddaddr|0x90); //    DDRAM:  90----99H
 272   1      }
 273          
 274          void charcursornext(void)    //置字符位置为下一个有效位置子程序
 275          {
 276   1          Column++;                //字符位置加1
 277   1          if(Column>19) Column=0;  //字符位置Column的有效范围为(0到19)
 278   1          if(Column==0)            //字符位置Column=0表示要换行
 279   1          {   row++;               //行位置加1
 280   2              row&=0X1;            //字符位置row的有效范围为(0到1)
 281   2          }
 282   1      }
 283          
 284          unsigned char ReadKey() //按键函数
 285          {
 286   1          if (KEY == 1) 
 287   1                      {  // 按键被按下
 288   2                              exdelay();  // 简单的去抖动处理
 289   2                              if (KEY == 1) 
 290   2                                      {
 291   3                                              while (KEY == 1);  // 等待按键释放
 292   3                                              return 1;  // 返回按键被按下
 293   3                                      }
 294   2          }
 295   1          return 0;  // 返回按键没有被按下
 296   1      }
 297          
 298          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    754    ----
C51 COMPILER V9.60.7.0   16032                                                             11/18/2024 16:58:39 PAGE 6   

   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2      13
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

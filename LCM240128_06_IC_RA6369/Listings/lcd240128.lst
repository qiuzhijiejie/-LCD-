C51 COMPILER V9.60.7.0   LCD240128                                                         12/10/2024 16:13:25 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE LCD240128
OBJECT MODULE PLACED IN .\Objects\lcd240128.obj
COMPILER INVOKED BY: D:\KEIL_STM32\C51\BIN\C51.EXE lcd240128.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listi
                    -ngs\lcd240128.lst) OBJECT(.\Objects\lcd240128.obj)

line level    source

   1          #include <REG52.H>   
   2          #include <INTRINS.H>      
   3          #include "lcd240128.h"
   4          #include "picture.h"
   5          uchar  group,i,j;
   6          int mode = 0;           // 当前模式
   7          
   8          void Delay(uint MS)   
   9          {   
  10   1       unsigned char us,usn;   
  11   1       while(MS!=0)   
  12   1       {   
  13   2        usn = 2; //for 12M    
  14   2        while(usn!=0)   
  15   2        {   
  16   3         us=0xf6;   
  17   3         while (us!=0){us--;};   
  18   3         usn--;   
  19   3        }   
  20   2        MS--;   
  21   2       }  
  22   1      }
  23          uint ReadKey1() 
  24          {
  25   1          if (LCD_KEY == 0)  // 检测按键是否按下
  26   1          {  
  27   2              Delay(10);  // 去抖动延时，10ms
  28   2              if (LCD_KEY == 0)  // 再次确认按键状态
  29   2              { 
  30   3                  while (LCD_KEY == 0);  // 等待按键释放
  31   3                  return 1;  // 返回按键按下事件
  32   3              }
  33   2          }
  34   1          return 0;  // 按键未按下
  35   1      }
  36          
  37          //忙信号判断
  38          void CheckBusy()
  39          {uchar b;
  40   1               do     
  41   1              {
  42   2                      DataBus=0xff;
  43   2                       LCD_CD=1;
  44   2                       LCD_RD=0;
  45   2                       b=DataBus;
  46   2                       LCD_RD=1;      
  47   2               }
  48   1               while(b&0x03!=0x03);//Table 6-4 Note1/2
  49   1                      
  50   1       }
  51          
  52          //自动读忙碌判断 
  53          void AUTOREAD_CheckBusy()
  54          {
C51 COMPILER V9.60.7.0   LCD240128                                                         12/10/2024 16:13:25 PAGE 2   

  55   1       uchar b;
  56   1       do     
  57   1       {
  58   2               DataBus=0xff;
  59   2               LCD_CD=1;
  60   2               LCD_RD=0;
  61   2               b=DataBus;
  62   2               LCD_RD=1;      
  63   2       }
  64   1               while(b&0x03==0);//Table 6-4 Note3
  65   1      }
  66          //自动写忙碌判断 
  67          void AUTOWRITE_CheckBus()
  68          {
  69   1              uchar b;
  70   1               do     
  71   1              {
  72   2                       DataBus=0xff;
  73   2                       LCD_CD=1;
  74   2                       LCD_RD=0;
  75   2                       b=DataBus;
  76   2                       LCD_RD=1;      
  77   2               }
  78   1               while(b&0x08!=0x08);
  79   1      } 
  80          
  81          //写数据
  82          void WriteData( uchar Data_Byte )   //Table 5-1 
  83          {    
  84   1               LCD_CD = 0;   
  85   1               DataBus = Data_Byte;   
  86   1               LCD_WR = 0;  
  87   1               _nop_();    
  88   1               LCD_WR  = 1;   
  89   1      }   
  90          
  91          /*
  92          写命令
  93          dat1: 第一个要写入的数据字节。
  94          dat2: 如果有第二个要写入的数据字节。
  95          command: 要发送的命令字节。
  96          parameters_num: 参数数量，指定要发送的数据字节数（1或2）。
  97          */
  98          void WriteCommand( uchar dat1,uchar dat2,uchar command,uchar parameters_num )   
  99          {   
 100   1        if((parameters_num==1)|(parameters_num==2))
 101   1              {
 102   2                      CheckBusy();    
 103   2                  WriteData(dat1);
 104   2              }
 105   1              
 106   1        if(parameters_num==2)
 107   1              {
 108   2                      CheckBusy();    
 109   2                  WriteData(dat2);
 110   2              }
 111   1      
 112   1              AUTOWRITE_CheckBus();//写检测忙信号
 113   1              
 114   1              LCD_CD = 1;   
 115   1              DataBus = command; 
 116   1              LCD_WR = 0; 
C51 COMPILER V9.60.7.0   LCD240128                                                         12/10/2024 16:13:25 PAGE 3   

 117   1              _nop_();     
 118   1              LCD_WR  = 1;      
 119   1      }
 120          
 121          //清屏
 122          void LcmClear( void )   
 123          {   uint a;
 124   1              Locatexy(0,0,Character);
 125   1              WriteCommand(0,0,0xb0,0 ); //0xb0:Set Data Auto Write
 126   1              for(a=0;a<8192;a++)
 127   1              {
 128   2                      WriteData( 0 ); 
 129   2              }   
 130   1              WriteCommand(0,0,0xb2,0 );//0xb2:Auto Reset 
 131   1      }   
 132          
 133          /*
 134          光标位置，支持图形模式和字符模式
 135          x：光标的横坐标（列数）。
 136          y：光标的纵坐标（行数）。
 137          mode：操作模式，决定是图形模式还是字符模式：
 138          mode = 1：图形模式。
 139          mode = 0：字符模式。
 140          */
 141          void Locatexy(uchar x,uchar y,uchar mode)   
 142          {  uint a=0;
 143   1              if(mode)                                //Graphic mode   x=0-29  y=0-127    START ADDRESS ：0800
 144   1              {
 145   2                      a=y*30+x;                              
 146   2                      WriteCommand((uchar)a,(uchar)(a>>8)+0x08,0x24,2);//a 是一个 16 位的整数，
 147   2      //                                                                 包含了高位和低位
 148   2              }
 149   1      
 150   1              else                                    //Character mode   x=0-29  y=0-15    START ADDRESS ：0000
 151   1              {
 152   2                      a=y*30+x;                             //0x24-Set Address Pointer-Table 6-6 
 153   2                      WriteCommand((uchar)(a),(uchar)(a>>8),0x24,2);
 154   2              }
 155   1      }
 156          
 157          
 158          /*
 159          屏幕上的指定位置显示一个ASCII字符串
 160          x：表示字符串在LCD上的起始横坐标。
 161          y：表示字符串在LCD上的起始纵坐标。
 162          ascll：一个指向ASCII字符数组（字符串）的指针，即要显示的字符串内容。
 163          */
 164          void Display_Str(uchar x,uchar y,uchar *ascll)
 165          {
 166   1              Locatexy(x,y,Character);
 167   1              while(*ascll>0)//=!\0
 168   1              {
 169   2                      WriteCommand(*ascll-0x20,0,0xc0,1 );//Table 6-19-Data Write and Increment ADP  
 170   2                      ascll++;//*ascll - 0x20 将其转换为LCD可以识别的字符编码
 171   2              } 
 172   1              
 173   1      }
 174          //内部字库
 175          void Display_FullCGROM()
 176          {
 177   1          uchar x = 0, y = 0;       // 起始位置 (0, 0)
 178   1          uchar charCode = 0x01;    // 从 CGROM 的 0x01 开始
C51 COMPILER V9.60.7.0   LCD240128                                                         12/10/2024 16:13:25 PAGE 4   

 179   1      
 180   1          // 遍历整个 LCD240128 屏幕 (30 列 x 16 行)
 181   1          while (y < 16)
 182   1          {
 183   2              Locatexy(x, y, Character);  // 设置光标位置
 184   2      
 185   2              // 显示当前的 CGROM 字符
 186   2              WriteCommand(charCode, 0, 0xc0, 1);  // 发送当前字符的代码到 LCD
 187   2      
 188   2              // 更新位置和字符
 189   2              x++;             // 移动到下一列
 190   2              charCode++;      // 显示下一个字符
 191   2      
 192   2      
 193   2              if (x >= 30)
 194   2              {
 195   3                  x = 0;       // 列回到 0
 196   3                  y++;         // 行数增加，换行
 197   3              }
 198   2      
 199   2      
 200   2              if (charCode > 0xFF)
 201   2              {
 202   3                  charCode = 0x01;
 203   3                              break;
 204   3              }
 205   2                      
 206   2          }
 207   1              Display_Str(0,8,"ABCDEFGopkrst435"); 
 208   1              Display_FullCGROM_SpecifiedPositions();
 209   1              Display_FullCGROM_SpecifiedPositions2();
 210   1      }
 211          
 212          
 213          
 214          void Display_FullCGROM_SpecifiedPositions()
 215          {
 216   1          uchar charCode = 0x01;  
 217   1      
 218   1          uchar positions[][2] = 
 219   1              {
 220   1          {7, 4}, {0, 5}, {0, 6}, {0, 7},
 221   1              };
 222   1      
 223   1          uchar num_positions = sizeof(positions) / sizeof(positions[0]); 
 224   1      
 225   1          for ( i = 0; i < num_positions; i++)
 226   1          {
 227   2              uchar x = positions[i][0];
 228   2              uchar y = positions[i][1];
 229   2      
 230   2              Locatexy(x, y,Character); 
 231   2              for ( j = 0; j < 30; j++) // 遍历每个位置显示内容
 232   2              {       
 233   3                  WriteCommand(charCode, 0, 0xc0, 1);
 234   3                  charCode++;
 235   3                  if (charCode > 0xFF)
 236   3                  {
 237   4                      charCode = 0x01; 
 238   4                  }
 239   3              }
 240   2          }
C51 COMPILER V9.60.7.0   LCD240128                                                         12/10/2024 16:13:25 PAGE 5   

 241   1      }
 242          void Display_FullCGROM_SpecifiedPositions2()
 243          {
 244   1          uchar charCode = 0x01;  
 245   1      
 246   1          uchar positions[][2] = 
 247   1              {
 248   1      
 249   1              {23, 12},{0, 13}, {0, 14}, {0, 15}
 250   1              };
 251   1      
 252   1          uchar num_positions = sizeof(positions) / sizeof(positions[0]); 
 253   1      
 254   1          for ( i = 0; i < num_positions; i++)
 255   1          {
 256   2              uchar x = positions[i][0];
 257   2              uchar y = positions[i][1];
 258   2      
 259   2              Locatexy(x, y,Character); 
 260   2              for ( j = 0; j < 30; j++) // 遍历每个位置显示内容
 261   2              {
 262   3               
 263   3                  WriteCommand(charCode, 0, 0xc0, 1);
 264   3      
 265   3              
 266   3                  charCode++;
 267   3                  if (charCode > 0xFF)
 268   3                  {
 269   4                      charCode = 0x01; 
 270   4                  }
 271   3              }
 272   2          }
 273   1      }
 274          
 275          /*
 276          显示16x16点阵的汉字字符
 277          
 278          x：字符在LCD上的起始横坐标
 279          
 280          y：字符在LCD上的起始纵坐标
 281          
 282          Chinese_character：指向字库中的汉字数据（点阵数据）的指针
 283          
 284          character_code：表示汉字的索引或编码，用来确定要显示的汉字在字库中的位置
 285          */
 286          void Display_16_16(uchar x,uchar y,uchar  code *Chinese_character,uchar character_code)
 287          {       
 288   1              //uchar i,j;    
 289   1              //uint num=0;
 290   1              //num=character_code*0x20;
 291   1              //Locatexy(x,y,Graphic);
 292   1              //for(j = 0; j < 16; j++)  // 循环显示16行
 293   1              //{
 294   1              //      for(i = 0; i < 2; i++)  // 每行2个字节，共16列
 295   1              //      {
 296   1              //              WriteCommand(*(Chinese_character + num), 0, 0xc0, 1);
 297   1              //              num++;
 298   1              //      }
 299   1              //      y += 1;  // 移动到下一行
 300   1              //      Locatexy(x, y, Graphic);  // 更新光标位置
 301   1              //}
 302   1              
C51 COMPILER V9.60.7.0   LCD240128                                                         12/10/2024 16:13:25 PAGE 6   

 303   1              
 304   1              
 305   1              uchar j;    // 行循环控制变量
 306   1          uint num = 0;  // 偏移量初始为0
 307   1          num = character_code * 0x10;  // 每个字符占用16字节（8×16）
 308   1          
 309   1          Locatexy(x, y, Graphic);  // 定位到显示的起始位置
 310   1      
 311   1          for(j = 0; j < 16; j++)  // 控制16行的循环
 312   1          {
 313   2              WriteCommand(*(Chinese_character + num), 0, 0xc0, 1);  // 写入1个字节的点阵数据
 314   2              num++;  // 移动到字库中的下一个字节
 315   2              y += 1;  // 移动到下一行
 316   2              Locatexy(x, y, Graphic);  // 更新光标位置
 317   2          }
 318   1      
 319   1      }
 320          /*
 321          显示8x16点阵的英文字符
 322          
 323          x：字符在LCD上的起始横坐标
 324          
 325          y：字符在LCD上的起始纵坐标
 326          
 327          Chinese_character：指向字库中的英文数据（点阵数据）的指针
 328          
 329          character_code：表示英文的索引或编码，用来确定要显示的英文在字库中的位置
 330          */
 331          void Display_8_16(uchar x, uchar y, uchar code *English_character, uchar character_code)
 332          {
 333   1          uchar j;    // 行循环控制变量
 334   1          uint num = 0;  // 偏移量初始为0
 335   1          num = character_code * 0x10;  // 每个字符占用16字节（8×16）
 336   1          
 337   1          Locatexy(x, y, Graphic);  // 定位到显示的起始位置
 338   1      
 339   1          for(j = 0; j < 16; j++)  // 控制16行的循环
 340   1          {
 341   2              WriteCommand(*(English_character + num), 0, 0xc0, 1);  // 写入1个字节的点阵数据
 342   2              num++;  // 移动到字库中的下一个字节
 343   2              y += 1;  // 移动到下一行
 344   2              Locatexy(x, y, Graphic);  // 更新光标位置
 345   2          }
 346   1      }
 347          
 348          
 349          /* 
 350          函数用于在LCD屏幕上以图形模式填充一组点阵模式
 351          
 352          DotByte：要显示的第一个字节数据(点阵模式),用于填充每行的前30个字节
 353          
 354          DotByte1：要显示的第二个字节数据(点阵模式),用于填充每行的后30个字节
 355          */
 356          void DisplayDots( uchar DotByte,uchar DotByte1 )   
 357          {       uchar i,j;  
 358   1              Locatexy(0,0,Graphic);  
 359   1              WriteCommand(0,0,0xb0,0 );//Set Data Auto Write  
 360   1              for(j = 0; j < 64; j++)  // 循环64行
 361   1              {
 362   2                      for(i = 0; i < 30; i++)  // 每行的前30个字节写入DotByte
 363   2                      {
 364   3                              WriteData(DotByte);
C51 COMPILER V9.60.7.0   LCD240128                                                         12/10/2024 16:13:25 PAGE 7   

 365   3                      }
 366   2      
 367   2                      for(i = 0; i < 30; i++)  // 每行的后30个字节写入DotByte1
 368   2                      {
 369   3                              WriteData(DotByte1);
 370   3                      }
 371   2              } 
 372   1              WriteCommand(0,0,0xb2,0 ); //Auto Reset
 373   1      }  
 374          /* 
 375          函数用于在LCD屏幕的指定位置绘制位图图像
 376          x:图像在LCD屏幕上的起始横坐标
 377          y:图像在LCD屏幕上的起始纵坐标
 378          W:图像的宽度（以像素为单位）
 379          H:图像的高度（以像素为单位）
 380          puts：指向位图图像数据的指针,数据以位为单位
 381          */
 382          void DisplayBMP(uchar x,uchar y,uchar W,uchar H,  uchar code *puts )   
 383          {       uchar k,j;
 384   1              Locatexy(x,y,Graphic); 
 385   1                      for(j = 0; j < H; j++)  // 遍历每一行
 386   1              {
 387   2                      WriteCommand(0, 0, 0xb0, 0);  // 进入数据自动写入模式
 388   2                      for(k = 0; k < W/8; k++)  // 每行遍历W/8个字节（8个像素为1字节）
 389   2                      {
 390   3                              WriteData(*puts++);  // 逐字节写入图像数据
 391   3                      }
 392   2                      WriteCommand(0, 0, 0xb2, 0);  // 退出数据自动写入模式
 393   2                      y += 1;  // 移动到下一行
 394   2                      Locatexy(x, y, Graphic);  // 更新光标位置
 395   2              }
 396   1        
 397   1      } 
 398          //图片取反
 399          void ReverseDisplayBMP(uchar x,uchar y,uchar W,uchar H,  uchar code *puts )   
 400          {       uchar i,j;
 401   1              Locatexy(x,y,Graphic); 
 402   1            
 403   1              for(j=0;j<H;j++)
 404   1                      {       WriteCommand(0,0,0xb0,0 ); 
 405   2                              for(i=0;i<W/8;i++)
 406   2                              {
 407   3                                      WriteData(~(*puts));//取反
 408   3                                      puts++;
 409   3                              } 
 410   2                      WriteCommand(0,0,0xb2,0 ); 
 411   2                              y+=1;
 412   2                              Locatexy(x,y,Graphic);
 413   2                      }  
 414   1      } 
 415          
 416          
 417          //初始化
 418          void LcmInit( void )   
 419          {  
 420   1              LCD_Reset=0;
 421   1              Delay(50);
 422   1              LCD_Reset=1;
 423   1              Delay(50);
 424   1              //Set Control Word
 425   1              WriteCommand(0,0,0x40,2 );   //Set Text Home Address
 426   1              WriteCommand(30,0,0x41,2 );  //Set Text Area   
C51 COMPILER V9.60.7.0   LCD240128                                                         12/10/2024 16:13:25 PAGE 8   

 427   1              WriteCommand(0,0x08,0x42,2 );//Set Graphic Home Address    
 428   1              WriteCommand(30,0,0x43,2 );  //Set Graphic Area 
 429   1              
 430   1              WriteCommand(0,0,0xa7,0);//8-line cursor - Table 6-17
 431   1              WriteCommand(0,0,0x80,0);//OR Mode - Table 6-14
 432   1              
 433   1      //      WriteCommand(0,0,0x81,0);//EXOR Mode - Table 6-14
 434   1      //      WriteCommand(0,0,0x83,0);//AND Mode - Table 6-14
 435   1      //      WriteCommand(0,0,0x84,0);//Text Attribute Mode - Table 6-14
 436   1      //      WriteCommand(0,0,0x80,0);//Internal Character Generator Mode - Table 6-14
 437   1      //      WriteCommand(0,0,0x90,0);//External Character Generator Mode  - Table 6-14
 438   1              
 439   1              WriteCommand(0,0,0x9c,0);//Text on, Graphic on - Table 6-16 
 440   1              
 441   1      //      WriteCommand(0,0,0x90,0);//Display off
 442   1      //      WriteCommand(0,0,0x92,0);//Cursor on, Blink off
 443   1      //      WriteCommand(0,0,0x93,0);//Cursor on, Blink on 
 444   1      }
 445          uchar start_x[] = {42, 41, 43};  // 每组显示的起始X坐标
 446          uchar start_y[] = {20, 50, 80};  // 每组显示的起始Y坐标
 447          uchar start_code[] = {0, 16, 33};  // 每组显示的起始字符编码
 448          uchar count[] = {16, 17, 12};  // 每组显示的字符数量
 449          void picture(void)
 450          {   
 451   1              unsigned char i;
 452   1              DisplayBMP(0,0,240,128,BMP0);                      
 453   1          Delay(100);         
 454   1      for ( group = 0; group < 3; group++)  // 共三个不同的显示区域
 455   1      {
 456   2          for ( i = 0; i < count[group]; i++)
 457   2          {
 458   3              Display_8_16(start_x[group] + i, start_y[group], Chinese_character, start_code[group] + i);
 459   3          }
 460   2      }
 461   1      }
 462          
 463          // 图案循环函数
 464          void DisplayPatterns() 
 465          {
 466   1          static int step = 0; // 当前显示图案步骤
 467   1      
 468   1          switch (step) 
 469   1          {
 470   2              case 0: DisplayDots(0x55, 0xaa); Delay(1000); break;
 471   2              case 1: DisplayDots(0xaa, 0x55); Delay(1000); break;
 472   2              case 2: DisplayDots(0x55, 0x55); Delay(1000); break;
 473   2              case 3: DisplayDots(0xaa, 0xaa); Delay(1000); break;
 474   2              case 4: DisplayDots(0xff, 0x00); Delay(1000); break;
 475   2              case 5: DisplayDots(0x00, 0xff); Delay(1000); break;
 476   2              case 6: DisplayDots(0xff, 0xff); Delay(1000); break;
 477   2              case 7: LcmClear(); DisplayBMP(0, 0, 240, 128, BMP1); Delay(1000); break;
 478   2              case 8: ReverseDisplayBMP(0, 0, 240, 128, BMP1); Delay(1000); break;
 479   2              case 9: LcmClear(); Display_FullCGROM(); Delay(1000); break;
 480   2              case 10: LcmClear(); picture(); Delay(1000); break;
 481   2          }
 482   1      
 483   1          // 更新到下一步
 484   1          step++;
 485   1          if (step > 10) step = 0; // 循环
 486   1      }
 487          
 488          
C51 COMPILER V9.60.7.0   LCD240128                                                         12/10/2024 16:13:25 PAGE 9   

 489          
 490          void HandleKey() 
 491          {
 492   1          mode++;           
 493   1          mode %= 10;    
 494   1          LcmClear();       
 495   1          switch (mode) 
 496   1          {   
 497   2              case 0: DisplayDots(0xff, 0x00); Delay(2000); break;
 498   2              case 1: DisplayDots(0x55, 0xaa); Delay(2000); break;
 499   2              case 2: DisplayDots(0x55, 0x55); Delay(2000); break;
 500   2              case 3: DisplayDots(0x00, 0xff); Delay(2000); break;
 501   2              case 4: DisplayDots(0xaa, 0xaa); Delay(2000); break;
 502   2              case 5: picture(); Delay(2000); break;
 503   2              case 6: Display_FullCGROM(); Delay(2000); break;
 504   2              case 7: DisplayBMP(0, 0, 240, 128, BMP1); Delay(2000); break;
 505   2              case 8: ReverseDisplayBMP(0, 0, 240, 128, BMP1); Delay(2000); break;
 506   2              case 9: ReverseDisplayBMP(0, 0, 240, 128, BMP0); Delay(2000); break;
 507   2          }
 508   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1516    ----
   CONSTANT SIZE    =     33    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     19      72
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

C51 COMPILER V9.60.7.0   LCD1602H                                                          12/11/2024 16:00:28 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE LCD1602H
OBJECT MODULE PLACED IN .\Objects\lcd1602H.obj
COMPILER INVOKED BY: D:\KEIL_STM32\C51\BIN\C51.EXE lcd1602H.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listin
                    -gs\lcd1602H.lst) OBJECT(.\Objects\lcd1602H.obj)

line level    source

   1          #include "LCD1602H.h"
   2          #include <REGX52.H>
   3          
   4          sbit LCD_RS = P3^0; 
   5          sbit LCD_RW = P3^1;
   6          sbit LCD_EN = P3^2;
   7          sbit   KEY1  =P2^0;     
   8          unsigned char mode;     
   9          
  10          unsigned int ReadKey1() // 按键检测函数
  11          {
  12   1          if (KEY1 == 0) 
  13   1              {  // 按键被按下
  14   2              Delay(1);  // 简单的去抖动处理
  15   2              if (KEY1 == 0) 
  16   2                      {  // 检查按键是否仍然按下
  17   3                  while (KEY1 == 0);  // 等待按键释放
  18   3                  return 1;  // 返回按键被按下
  19   3              }
  20   2          }
  21   1          return 0;  // 按键没有被按下
  22   1      }
  23          
  24          
  25          
  26          
  27          
  28          void  Delay(xms)        //@12.000MHz
  29          {
  30   1      while(xms--){
  31   2              unsigned char data i, j;
  32   2      
  33   2              i = 12;
  34   2              j = 169;
  35   2              do
  36   2              {
  37   3                      while (--j);
  38   3              } while (--i);
  39   2      }
  40   1              }
  41          
  42          
  43          //判断忙不忙
  44          void Busy()
  45          {
  46   1              unsigned char temp;
  47   1              LCD_DataPort=0xff;
  48   1              LCD_RS=0;//RW=1,RS=0读状态
  49   1              LCD_RW=1;
  50   1              do{
  51   2                      LCD_EN=1;
  52   2                      temp=LCD_DataPort;
  53   2                      LCD_EN=0;
  54   2              }while(temp&0x80);}/*对控制器每次进行读写操作之前， 
C51 COMPILER V9.60.7.0   LCD1602H                                                          12/11/2024 16:00:28 PAGE 2   

  55                                                    都必须进行读写检测，确保STA7为0*/
  56          
  57          
  58          
  59          /**
  60            * @brief  LCD1602H写命令
  61            * @param  Command 要写入的命令
  62            * @retval 无
  63            */
  64          void LCD_WriteCommand(unsigned char Command) 
  65          {
  66   1              Busy();
  67   1          LCD_RS = 0; // 选择为指令，1为数据，0为指令
  68   1          LCD_RW = 0; // 选择为写， 1为读，0为写
  69   1          LCD_DataPort = Command; // 写入指令的内容
  70   1          LCD_EN = 1;   // 使能脚E先上升沿写入
  71   1          Delay(0.1);
  72   1          LCD_EN = 0;   // 使能脚E后负跳变完成写入
  73   1      }
  74          
  75          
  76          
  77          /**
  78            * @brief  LCD1602H写数据
  79            * @param  Data 要写入的数据,搭配LCD_SetCursor()光标使用。
  80            * @retval 无
  81            */
  82          void LCD_WriteData(unsigned char Data) 
  83          {
  84   1              Busy();
  85   1          LCD_RS = 1; // 选择为数据，1为数据，0为指令
  86   1          LCD_RW = 0; // 选择为写， 1为读，0为写
  87   1          LCD_DataPort = Data; // 写入指数据的内容
  88   1          LCD_EN = 1;   // 使能脚E先上升沿写入
  89   1          Delay(0.1);
  90   1          LCD_EN = 0;   // 使能脚E后负跳变完成写入
  91   1        
  92   1      }
  93          
  94          
  95          /**
  96            * @brief  LCD1602H读数据
  97            * @param  Data 要写入的数据,搭配LCD_SetCursor()光标使用。
  98            * @retval 无
  99            */
 100          void LCD_ReadData(unsigned char Data) 
 101          {
 102   1              Busy();
 103   1          LCD_RS = 1; // 选择为数据，1为数据，0为指令
 104   1          LCD_RW = 1; // 选择为写， 1为读，0为写
 105   1              LCD_EN = 1;   // 使能脚E先上升沿写入
 106   1              Delay(0.1);
 107   1          LCD_DataPort = Data; // 写入指数据的内容
 108   1          LCD_EN = 0;   // 使能脚E后负跳变完成写入
 109   1      }
 110          
 111          
 112          
 113          /**
 114            * @brief  LCD1602H初始化函数
 115            * @param  无
 116            * @retval 无
C51 COMPILER V9.60.7.0   LCD1602H                                                          12/11/2024 16:00:28 PAGE 3   

 117            */
 118          void LCD_Init() 
 119          {
 120   1          LCD_WriteCommand(0x38); // 设置20×4显示,5X7点阵,8位数据接口 
 121   1          LCD_WriteCommand(0x0c); // 显示开,光标关,闪烁关
 122   1      //      LCD_WriteCommand(0x0f);//显示开,光标开.闪烁开
 123   1          LCD_WriteCommand(0x06); // 当读或写一个字符后地址指针加一,不移动
 124   1          LCD_WriteCommand(0x01); // 光标复位，清屏
 125   1              Delay(0.1); 
 126   1              
 127   1      
 128   1      
 129   1      
 130   1      }
 131          
 132          /**
 133            * @brief  LCD1602H清屏
 134            * @param  无
 135            * @retval 无
 136            */
 137          void LCD_Clear() 
 138          {
 139   1          Busy();
 140   1          LCD_WriteCommand(0x01);
 141   1              Delay(0.1);           // 等待清屏完成
 142   1      }
 143          
 144          
 145          /**
 146            * @brief  LCD1602H设置光标位置
 147            * @param  Line 行位置，范围：1~2
 148            * @param  Column 列位置，范围：1~20
 149            * @retval 无
 150            */
 151          void LCD_SetCursor(unsigned int Line, unsigned int Column) 
 152          {
 153   1          // 确保列值在0-19之间
 154   1          if (Column >= 20) Column = 0;
 155   1          // 确保行值在0-2之间
 156   1          Line &= 0x01;  // 限制 Y 位置在 0 到 3 之间         
 157   1          if (Line == 0) 
 158   1          {
 159   2              LCD_WriteCommand(0x80 | Column);  // 第一行
 160   2          } 
 161   1          else  
 162   1          {
 163   2              LCD_WriteCommand(0xC0 | Column);  // 第二行
 164   2          } 
 165   1      
 166   1      }
 167                  
 168           
 169          
 170          
 171          unsigned char LCD_Readdata(void)               //读数据子程序
 172          {   unsigned char d;
 173   1          Busy();                       //HD44780液晶显示控制器忙检测
 174   1          LCD_DataPort=0xff;
 175   1          LCD_RS=1;                             //RS=1 RW=1 E=高电平
 176   1          LCD_RW=1;
 177   1          LCD_EN=1;
 178   1          Delay(0.005);
C51 COMPILER V9.60.7.0   LCD1602H                                                          12/11/2024 16:00:28 PAGE 4   

 179   1          d=LCD_DataPort;
 180   1          LCD_EN=0;
 181   1          return d;
 182   1      }
 183          
 184          
 185          
 186          // 
 187          /**
 188           * @brief  显示字符函数
 189           * @param  Line0-3行 Column 0-19列 i字符
 190           * @retval
 191           */
 192          void LCD_USER_ShowString(unsigned char Line, unsigned char Column, unsigned char  i) 
 193          {                       
 194   1              LCD_SetCursor(Line, Column); // 光标
 195   1              LCD_WriteData(i);
 196   1      }
 197          
 198          
 199          
 200          /**
 201           * @brief LCD1602H显示字符串
 202           * @param Line 0-2行 Column 0-19列 *String 输入字符""
 203           * @retval 无
 204           */
 205          void LCD_ShowString(unsigned char Line, unsigned char Column, char *String) 
 206          {       unsigned char i;                
 207   1              LCD_SetCursor(Line, Column);
 208   1          for (i = 0; String[i] != '\0'; i++) 
 209   1              {
 210   2            LCD_WriteData(String[i]);
 211   2          }
 212   1      }
 213          
 214          
 215          //每次写入的字符 a 是递增的
 216          void write_CGROM(unsigned char a)
 217          {
 218   1          unsigned char j;
 219   1          LCD_WriteCommand(0x02);  // 光标归位命令 (光标位置回到初始位置，通常是DDRAM的起始地址)
 220   1          Delay(1);                // 延时一段时间，确保命令有效
 221   1          LCD_WriteCommand(0x80);  // 设置光标到第1行的起始地址 (0x80对应DDRAM的第1行起始地址)
 222   1          
 223   1          // 向第1行写入40个字符数据
 224   1          for (j = 0; j < 40; j++) 
 225   1          {
 226   2              LCD_WriteData(a);    // 向LCD写入数据 'a'
 227   2              a += 1;              // 自增'a'，以便下一个字符是'a'的下一个值
 228   2          }
 229   1      
 230   1          LCD_WriteCommand(0xC0);  // 设置光标到第2行的起始地址 (0xC0对应DDRAM的第2行起始地址)
 231   1          
 232   1          // 向第2行写入40个字符数据
 233   1          for (j = 0; j < 40; j++) 
 234   1          {
 235   2              LCD_WriteData(a);    // 向LCD写入数据 'a'
 236   2              a += 1;              // 自增'a'，同样依次写入下一个字符
 237   2          }
 238   1          
 239   1          Delay(1);                // 再次延时，确保数据全部写入
 240   1      }
C51 COMPILER V9.60.7.0   LCD1602H                                                          12/11/2024 16:00:28 PAGE 5   

 241          
 242          
 243          
 244          /**
 245           * @brief  全屏显示HD44780 内置字符
 246           * @param  Line 0-3  Column 0-19  输入16进制0X...
 247           * @retval 无
 248           */
 249          void Write_DDRAM(unsigned char a)
 250          {
 251   1          unsigned char j;
 252   1          
 253   1          LCD_WriteCommand(0x02);  // 光标归位命令 (光标位置回到初始位置，通常是DDRAM的起始地址)
 254   1          Delay(1);               // 延时10个单位 (比之前的延时长)
 255   1      
 256   1          LCD_WriteCommand(0x80);  // 设置光标到第1行的起始地址 (0x80对应DDRAM的第1行起始地址)
 257   1          
 258   1          // 向第1行写入20个相同的字符   
 259   1          for (j = 0; j < 20; j++) 
 260   1          {
 261   2              LCD_WriteData(a);    // 将字符 'a' 写入 LCD 显示数据存储器
 262   2          }
 263   1      
 264   1          LCD_WriteCommand(0xC0);  // 设置光标到第2行的起始地址 (0xC0对应DDRAM的第2行起始地址)
 265   1          
 266   1          // 向第2行写入20个相同的字符
 267   1          for (j = 0; j < 20; j++) 
 268   1          {
 269   2              LCD_WriteData(a);    // 将字符 'a' 写入 LCD 显示数据存储器
 270   2          }  
 271   1          Delay(1);                // 延时，确保数据完全写入
 272   1      }
 273          
 274          
 275          
 276          // 向 LCD 的 CGRAM 写入自定义字符数据
 277          void Write_CGRAM(unsigned char a[])
 278          {
 279   1          unsigned char k;
 280   1          
 281   1          // 发送命令 0x40，选择 CGRAM 地址
 282   1          LCD_WriteCommand(0x40); 
 283   1          
 284   1          // 将自定义字符数据写入 CGRAM
 285   1          for(k = 0; k < 64; k++)
 286   1          {
 287   2              LCD_WriteData(a[k]);  // 写入字符数据
 288   2          }
 289   1      }
 290          
 291             
 292          
 293          void displayCustomCharacter1(const unsigned char pattern[8]) 
 294          {
 295   1          unsigned char row, col;
 296   1      
 297   1          // 将自定义字符数组写入CGRAM
 298   1          Write_CGRAM(pattern);
 299   1      
 300   1          // 遍历LCD的每一行和每一列，显示自定义字符
 301   1          for (row = 0; row < 2; row++) 
 302   1          {
C51 COMPILER V9.60.7.0   LCD1602H                                                          12/11/2024 16:00:28 PAGE 6   

 303   2              for (col = 0; col < 20; col++) 
 304   2              {
 305   3                  // 针对LCD1602H的行起始地址做出修正
 306   3                  unsigned char position;
 307   3                  if (row == 0) 
 308   3                                      {
 309   4                      position = 0x80 + col;   // 第1行地址 0x80 起始
 310   4                                      } else //if (row == 1) {
 311   3                      position = 0xC0 + col;   // 第2行地址 0xC0 起始
 312   3      
 313   3                  // 设置光标位置并显示自定义字符
 314   3                  LCD_WriteCommand(position);
 315   3                  LCD_WriteData(0x00);  // 显示存储在CGRAM中的第一个自定义字符
 316   3              }
 317   2          }
 318   1      }
 319          
 320          unsigned char data pattern1[8] = {0x15, 0x0A, 0x15, 0x0A, 0x15, 0x0A, 0x15}; 
 321          unsigned char data pattern2[8] = {0x0A, 0x15, 0x0A, 0x15, 0x0A, 0x15, 0x0A};    
 322          unsigned char data pattern3[8] = {0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15};
 323          unsigned char data pattern4[8] = {0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A}; 
 324          unsigned char data pattern5[8] = {0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00};
 325          unsigned char data pattern6[8] = {0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F};      
 326          unsigned char data pattern7[8] = {0x00, 0x15, 0x00, 0x15, 0x00, 0x15, 0x00, 0x15}; 
 327          void HandleKey() 
 328          {
 329   1              if (ReadKey1()) 
 330   1               {
 331   2                                
 332   2                      LCD_Clear();
 333   2                      mode++;
 334   2                      mode %= 8;                      
 335   2                      switch (mode) 
 336   2               {
 337   3              case 0:            
 338   3                              displayCustomCharacter1(pattern1);//Delay(1000);
 339   3                  break;
 340   3              case 1:
 341   3                  displayCustomCharacter1(pattern2);//Delay(1000); 
 342   3                  break;
 343   3              case 2:
 344   3                  displayCustomCharacter1(pattern3);//Delay(1000); 
 345   3                  break;
 346   3              case 3:
 347   3                  displayCustomCharacter1(pattern4);//Delay(1000);  
 348   3                  break;
 349   3              case 4:
 350   3                  displayCustomCharacter1(pattern5);//Delay(1000);  
 351   3                  break;
 352   3              case 5:
 353   3                  displayCustomCharacter1(pattern6);//Delay(1000); 
 354   3                  break;
 355   3                      case 6:
 356   3                              displayCustomCharacter1(pattern7);//Delay(1000);
 357   3                              break;
 358   3                      case 7:
 359   3                              write_CGROM(0x21);//Delay(1000);     
 360   3                      }
 361   2              }
 362   1      }
 363          
 364          void DisplayPatterns() 
C51 COMPILER V9.60.7.0   LCD1602H                                                          12/11/2024 16:00:28 PAGE 7   

 365          {
 366   1          static int step = 0; 
 367   1          switch (step) 
 368   1          {
 369   2              case 0: displayCustomCharacter1(pattern1);  Delay(80); break;
 370   2              case 1: displayCustomCharacter1(pattern2);  Delay(80); break;
 371   2              case 2: displayCustomCharacter1(pattern3);  Delay(80); break;
 372   2              case 3: displayCustomCharacter1(pattern4);  Delay(80); break;
 373   2              case 4: displayCustomCharacter1(pattern5);  Delay(80); break;
 374   2              case 5: displayCustomCharacter1(pattern6);  Delay(80); break;
 375   2              case 6: displayCustomCharacter1(pattern7);  Delay(80); break;
 376   2              case 7: write_CGROM(0x21); Delay(80); break;
 377   2              case 8: Write_DDRAM(0xA1); Delay(80); break;
 378   2              case 9: LCD_Clear();LCD_ShowString(1,4,"LCM1602H");LCD_ShowString(0,0,"YeHuiDisplay.com");Delay(80
             -); break;
 379   2          }
 380   1          step++;
 381   1          if (step > 9) step = 0; 
 382   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    750    ----
   CONSTANT SIZE    =     26    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     59       9
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

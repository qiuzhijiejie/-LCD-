C51 COMPILER V9.60.7.0   LCD2004B                                                          12/11/2024 16:16:18 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE LCD2004B
OBJECT MODULE PLACED IN .\Objects\lcd2004B.obj
COMPILER INVOKED BY: D:\KEIL_STM32\C51\BIN\C51.EXE lcd2004B.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listin
                    -gs\lcd2004B.lst) OBJECT(.\Objects\lcd2004B.obj)

line level    source

   1          #include "LCD2004B.h"
   2          #include <REGX52.H>
   3          
   4          
   5          sbit LCD_RS = P3^0; 
   6          sbit LCD_RW = P3^1;
   7          sbit LCD_EN = P3^2;
   8          sbit   KEY1  =P2^0;     
   9          
  10          unsigned int ReadKey1() // 按键检测函数
  11          {
  12   1          if (KEY1 == 0) 
  13   1              {  // 按键被按下
  14   2              Delay(1);  // 简单的去抖动处理
  15   2              if (KEY1 == 0) 
  16   2                      {  // 检查按键是否仍然按下
  17   3                  while (KEY1 == 0);  // 等待按键释放
  18   3                  return 1;  // 返回按键被按下
  19   3              }
  20   2          }
  21   1          return 0;  // 按键没有被按下
  22   1      }
  23          
  24          void  Delay(xms)        //@12.000MHz
  25          {
  26   1              while(xms--){
  27   2              unsigned char data i, j;
  28   2      
  29   2              i = 12;
  30   2              j = 169;
  31   2              do
  32   2              {
  33   3                      while (--j);
  34   3              } while (--i);
  35   2      }
  36   1              }
  37          
  38          
  39          
  40          void Busy()
  41          {
  42   1              unsigned char temp;
  43   1              LCD_DataPort=0xff;
  44   1              LCD_RS=0;//RW=1,RS=0读状态
  45   1              LCD_RW=1;
  46   1              do{
  47   2                      LCD_EN=1;
  48   2                      temp=LCD_DataPort;
  49   2                      LCD_EN=0;
  50   2              }while(temp&0x80);}/*对控制器每次进行读写操作之前， 
  51                                                    都必须进行读写检测，确保STA7为0*/
  52          
  53          
  54          /**
C51 COMPILER V9.60.7.0   LCD2004B                                                          12/11/2024 16:16:18 PAGE 2   

  55            * @brief  LCD2004写命令
  56            * @param  Command 要写入的命令
  57            * @retval 无
  58            */
  59          void LCD_WriteCommand(unsigned char Command) 
  60          {
  61   1              Busy();
  62   1          LCD_RS = 0; // 选择为指令，1为数据，0为指令
  63   1          LCD_RW = 0; // 选择为写， 1为读，0为写
  64   1          LCD_DataPort = Command; // 写入指令的内容
  65   1          LCD_EN = 1;   // 使能脚E先上升沿写入
  66   1          Delay(0.1);
  67   1          LCD_EN = 0;   // 使能脚E后负跳变完成写入
  68   1      }
  69          
  70          /**
  71            * @brief  LCD2004写数据
  72            * @param  Data 要写入的数据,搭配LCD_SetCursor()光标使用。
  73            * @retval 无
  74            */
  75          void LCD_WriteData(unsigned char Data) 
  76          {
  77   1              Busy();
  78   1          LCD_RS = 1; // 选择为数据，1为数据，0为指令
  79   1          LCD_RW = 0; // 选择为写， 1为读，0为写
  80   1          LCD_DataPort = Data; // 写入指数据的内容
  81   1          LCD_EN = 1;   // 使能脚E先上升沿写入
  82   1          Delay(0.1);
  83   1          LCD_EN = 0;   // 使能脚E后负跳变完成写入
  84   1        
  85   1      }
  86          
  87          /**
  88            * @brief  LCD2004读数据
  89            * @param  Data 要写入的数据,搭配LCD_SetCursor()光标使用。
  90            * @retval 无
  91            */
  92          void LCD_ReadData(unsigned char Data) 
  93          {
  94   1              Busy();
  95   1          LCD_RS = 1; // 选择为数据，1为数据，0为指令
  96   1          LCD_RW = 1; // 选择为写， 1为读，0为写
  97   1              LCD_EN = 1;   // 使能脚E先上升沿写入
  98   1              Delay(0.1);
  99   1          LCD_DataPort = Data; // 写入指数据的内容
 100   1          LCD_EN = 0;   // 使能脚E后负跳变完成写入
 101   1      }
 102          
 103          /**
 104            * @brief  LCD2004初始化函数
 105            * @param  无
 106            * @retval 无
 107            */
 108          void LCD_Init() 
 109          {
 110   1          LCD_WriteCommand(0x38); // 设置20×4显示,5X7点阵,8位数据接口 
 111   1          LCD_WriteCommand(0x0c); // 显示开,光标关,闪烁关
 112   1              //LCD_WriteCommand(0x0f);//显示开,光标开.闪烁开
 113   1          LCD_WriteCommand(0x06); // 当读或写一个字符后地址指针加一,不移动
 114   1          LCD_WriteCommand(0x01); // 光标复位，清屏
 115   1              Delay(0.1); 
 116   1      
C51 COMPILER V9.60.7.0   LCD2004B                                                          12/11/2024 16:16:18 PAGE 3   

 117   1      }
 118          
 119          /**
 120            * @brief  LCD2004清屏
 121            * @param  无
 122            * @retval 无
 123            */
 124          void LCD_Clear() 
 125          {
 126   1          Busy();
 127   1          LCD_WriteCommand(0x01);
 128   1              Delay(0.1);           // 等待清屏完成
 129   1      }
 130          
 131          
 132          /**
 133            * @brief  LCD2004设置光标位置
 134            * @param  Line 行位置，范围：1~4
 135            * @param  Column 列位置，范围：1~20
 136            * @retval 无
 137            */
 138          void LCD_SetCursor(unsigned int Line, unsigned int Column) 
 139          {
 140   1          // 确保列值在0-19之间
 141   1          if (Column >= 20) Column = 0;
 142   1          // 确保行值在0-3之间
 143   1          Line &= 0x03;  // 限制 Y 位置在 0 到 3 之间
 144   1              
 145   1              
 146   1          if (Line == 0) 
 147   1          {
 148   2              LCD_WriteCommand(0x80 | Column);  // 第一行
 149   2          } 
 150   1          else if (Line == 1) 
 151   1          {
 152   2              LCD_WriteCommand(0xC0 | Column);  // 第二行
 153   2          } 
 154   1          else if (Line == 2) 
 155   1          {
 156   2              LCD_WriteCommand(0x80 | (Column + 20));  // 第三行
 157   2          } 
 158   1          else 
 159   1          {
 160   2              LCD_WriteCommand(0xC0 | (Column + 20));  // 第四行
 161   2          }
 162   1      }
 163                  
 164          unsigned char LCD_Readdata(void)               //读数据子程序
 165          {   unsigned char d;
 166   1          Busy();                       //HD44780液晶显示控制器忙检测
 167   1          LCD_DataPort=0xff;
 168   1          LCD_RS=1;                             //RS=1 RW=1 E=高电平
 169   1          LCD_RW=1;
 170   1          LCD_EN=1;
 171   1          Delay(0.005);
 172   1          d=LCD_DataPort;
 173   1          LCD_EN=0;
 174   1          return d;
 175   1      }
 176          
 177          
 178          /**
C51 COMPILER V9.60.7.0   LCD2004B                                                          12/11/2024 16:16:18 PAGE 4   

 179           * @brief  显示字符函数
 180           * @param  Line0-3行 Column 0-19列 i字符
 181           * @retval
 182           */
 183          void LCD_USER_ShowString(unsigned char Line, unsigned char Column, unsigned char  i) 
 184          {                       
 185   1              LCD_SetCursor(Line, Column); // 光标
 186   1              LCD_WriteData(i);
 187   1      }
 188          
 189          
 190          
 191          /**
 192           * @brief LCD2004显示字符串
 193           * @param Line 0-4行 Column 0-19列 *String 输入字符""
 194           * @retval 无
 195           */
 196          void LCD_ShowString(unsigned char Line, unsigned char Column, char *String) 
 197          {       unsigned char i;                
 198   1              LCD_SetCursor(Line, Column);
 199   1          for (i = 0; String[i] != '\0'; i++) 
 200   1              {
 201   2            LCD_WriteData(String[i]);
 202   2          }
 203   1      }
 204          
 205          
 206          
 207          //每次写入的字符 a 是递增的
 208          void write_CGROM(unsigned char a)
 209          {
 210   1          unsigned char j;
 211   1          LCD_WriteCommand(0x02);  // 光标归位命令 (光标位置回到初始位置，通常是DDRAM的起始地址)
 212   1          Delay(1);                // 延时一段时间，确保命令有效
 213   1          LCD_WriteCommand(0x80);  // 设置光标到第1行的起始地址 (0x80对应DDRAM的第1行起始地址)
 214   1          
 215   1          // 向第1行写入40个字符数据
 216   1          for (j = 0; j < 40; j++) 
 217   1          {
 218   2              LCD_WriteData(a);    // 向LCD写入数据 'a'
 219   2              a += 1;              // 自增'a'，以便下一个字符是'a'的下一个值
 220   2          }
 221   1      
 222   1          LCD_WriteCommand(0xC0);  // 设置光标到第2行的起始地址 (0xC0对应DDRAM的第2行起始地址)
 223   1          
 224   1          // 向第2行写入40个字符数据
 225   1          for (j = 0; j < 40; j++) 
 226   1          {
 227   2              LCD_WriteData(a);    // 向LCD写入数据 'a'
 228   2              a += 1;              // 自增'a'，同样依次写入下一个字符
 229   2          }
 230   1          
 231   1          Delay(1);                // 再次延时，确保数据全部写入
 232   1      }
 233          
 234          
 235          /**
 236           * @brief  全屏显示HD44780 内置字符
 237           * @param  Line 0-3  Column 0-19  输入16进制0X...
 238           * @retval 无
 239           */
 240          void Write_DDRAM(unsigned char a)
C51 COMPILER V9.60.7.0   LCD2004B                                                          12/11/2024 16:16:18 PAGE 5   

 241          {
 242   1          unsigned char j;
 243   1          
 244   1          LCD_WriteCommand(0x02);  // 光标归位命令 (光标位置回到初始位置，通常是DDRAM的起始地址)
 245   1          Delay(1);               // 延时10个单位 (比之前的延时长)
 246   1      
 247   1          LCD_WriteCommand(0x80);  // 设置光标到第1行的起始地址 (0x80对应DDRAM的第1行起始地址)
 248   1          
 249   1          // 向第1行写入40个相同的字符
 250   1          for (j = 0; j < 40; j++) 
 251   1          {
 252   2              LCD_WriteData(a);    // 将字符 'a' 写入 LCD 显示数据存储器
 253   2          }
 254   1      
 255   1          LCD_WriteCommand(0xC0);  // 设置光标到第2行的起始地址 (0xC0对应DDRAM的第2行起始地址)
 256   1          
 257   1          // 向第2行写入40个相同的字符
 258   1          for (j = 0; j < 40; j++) 
 259   1          {
 260   2              LCD_WriteData(a);    // 将字符 'a' 写入 LCD 显示数据存储器
 261   2          }
 262   1          
 263   1          Delay(1);                // 延时，确保数据完全写入
 264   1      }
 265          
 266          
 267          
 268          
 269          // 向 LCD 的 CGRAM 写入自定义字符数据
 270          void Write_CGRAM(unsigned char a[])
 271          {
 272   1          unsigned char k;
 273   1          
 274   1          // 发送命令 0x40，选择 CGRAM 地址
 275   1          LCD_WriteCommand(0x40); 
 276   1          
 277   1          // 将自定义字符数据写入 CGRAM
 278   1          for(k = 0; k < 10; k++)
 279   1          {
 280   2              LCD_WriteData(a[k]);  // 写入字符数据
 281   2          }
 282   1      }
 283          
 284             
 285          
 286          void displayCustomCharacter1(const unsigned char pattern[8]) 
 287          {
 288   1          unsigned char row, col;
 289   1      
 290   1          // 将自定义字符数组写入CGRAM
 291   1          Write_CGRAM(pattern);
 292   1      
 293   1          // 遍历LCD的每一行和每一列，显示自定义字符
 294   1          for (row = 0; row < 4; row++) 
 295   1          {
 296   2              for (col = 0; col < 20; col++) 
 297   2              {
 298   3                  // 针对LCD2004的行起始地址做出修正
 299   3                  unsigned char position;
 300   3                  if (row == 0) 
 301   3                  {
 302   4                      position = 0x80 + col;   // 第1行地址 0x80 起始
C51 COMPILER V9.60.7.0   LCD2004B                                                          12/11/2024 16:16:18 PAGE 6   

 303   4                  } 
 304   3                  else if (row == 1)
 305   3                  {
 306   4                      position = 0xC0 + col;   // 第2行地址 0xC0 起始
 307   4                  } 
 308   3                  else if (row == 2) 
 309   3                  {
 310   4                      position = 0x94 + col;   // 第3行地址 0x94 起始
 311   4                  } 
 312   3                  else 
 313   3                  {
 314   4                      position = 0xD4 + col;   // 第4行地址 0xD4 起始
 315   4                  }
 316   3      
 317   3                  // 设置光标位置并显示自定义字符
 318   3                  LCD_WriteCommand(position);
 319   3                  LCD_WriteData(0x00);  // 显示存储在CGRAM中的第一个自定义字符
 320   3              }
 321   2          }
 322   1      }
 323          
 324          
 325          unsigned char data pattern1[8] = {0x15, 0x0A, 0x15, 0x0A, 0x15, 0x0A, 0x15}; 
 326          unsigned char data pattern2[8] = {0x0A, 0x15, 0x0A, 0x15, 0x0A, 0x15, 0x0A};    
 327          unsigned char data pattern3[8] = {0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15}; 
 328          unsigned char data pattern4[8] = {0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A}; 
 329          unsigned char data pattern5[8] = {0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00}; 
 330          unsigned char data pattern6[8] = {0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F};      
 331          unsigned char data pattern7[8] = {0x00, 0x15, 0x00, 0x15, 0x00, 0x15, 0x00, 0x15}; 
 332          void HandleKey() 
 333          {
 334   1              unsigned char mode;
 335   1              
 336   1                      if (ReadKey1()) 
 337   1                {  
 338   2                      LCD_Clear();
 339   2                      mode++;
 340   2                      mode %= 8;                      
 341   2                      switch (mode) 
 342   2                {
 343   3              case 0:            
 344   3                              displayCustomCharacter1(pattern1); 
 345   3                  break;
 346   3              case 1:
 347   3                  displayCustomCharacter1(pattern2);  
 348   3                  break;
 349   3              case 2:
 350   3                  displayCustomCharacter1(pattern3); 
 351   3                  break;
 352   3              case 3:
 353   3                 displayCustomCharacter1(pattern4);  
 354   3                  break;
 355   3              case 4:
 356   3                  displayCustomCharacter1(pattern5);  
 357   3                  break;
 358   3              case 5:
 359   3                  displayCustomCharacter1(pattern6);  
 360   3                  break;
 361   3                      case 6:
 362   3                              displayCustomCharacter1(pattern7);
 363   3                              break;
 364   3                      case 7:
C51 COMPILER V9.60.7.0   LCD2004B                                                          12/11/2024 16:16:18 PAGE 7   

 365   3                              write_CGROM(0x10); 
 366   3                         break;
 367   3                      }
 368   2              }
 369   1      }
 370          
 371          void DisplayPatterns() 
 372          {
 373   1          static int step = 0; // 当前显示图案步骤
 374   1          switch (step) 
 375   1          {
 376   2              case 0: displayCustomCharacter1(pattern1);  Delay(80); break;
 377   2              case 1: displayCustomCharacter1(pattern2);  Delay(80); break;
 378   2              case 2: displayCustomCharacter1(pattern3);  Delay(80); break;
 379   2              case 3: displayCustomCharacter1(pattern4);  Delay(80); break;
 380   2              case 4: displayCustomCharacter1(pattern5);  Delay(80); break;
 381   2              case 5: displayCustomCharacter1(pattern6);  Delay(80); break;
 382   2              case 6: displayCustomCharacter1(pattern7);  Delay(80); break;
 383   2              case 7: write_CGROM(0x10); Delay(80); break;
 384   2              case 8: Write_DDRAM(0x60); Delay(80); break;
 385   2              case 9: LCD_Clear();LCD_ShowString(2,6,"LCM2004B");LCD_ShowString(1,2,"YeHuiDisplay.com");Delay(80
             -); break;
 386   2          }
 387   1          step++;
 388   1          if (step > 9) step = 0; // 循环
 389   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    800    ----
   CONSTANT SIZE    =     26    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     58      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

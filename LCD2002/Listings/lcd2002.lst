C51 COMPILER V9.60.7.0   LCD2002                                                           09/24/2024 20:49:36 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE LCD2002
OBJECT MODULE PLACED IN .\Objects\lcd2002.obj
COMPILER INVOKED BY: D:\KEIL_STM32\C51\BIN\C51.EXE lcd2002.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listing
                    -s\lcd2002.lst) OBJECT(.\Objects\lcd2002.obj)

line level    source

   1          #include "LCD2002.h"
   2          #include <REGX52.H>
   3          
   4          
   5          
   6          sbit LCD_RS = P3^0; 
   7          sbit LCD_RW = P3^1;
   8          sbit LCD_EN = P3^2;
   9          sbit   KEY1  =P2^0;     
  10          
  11          
  12          extern unsigned int i,j,maxSteps,Line,Column,row, col;
  13          
  14          
  15          unsigned int ReadKey1() // 按键检测函数
  16          {
  17   1          if (KEY1 == 0) 
  18   1              {  // 按键被按下
  19   2              Delay(1);  // 简单的去抖动处理
  20   2              if (KEY1 == 0) 
  21   2                      {  // 检查按键是否仍然按下
  22   3                  while (KEY1 == 0);  // 等待按键释放
  23   3                  return 1;  // 返回按键被按下
  24   3              }
  25   2          }
  26   1          return 0;  // 按键没有被按下
  27   1      }
  28          
  29          
  30          
  31          
  32          
  33          void  Delay(xms)        //@12.000MHz
  34          {
  35   1      while(xms--){
  36   2              unsigned char data i, j;
  37   2      
  38   2              i = 12;
  39   2              j = 169;
  40   2              do
  41   2              {
  42   3                      while (--j);
  43   3              } while (--i);
  44   2      }
  45   1              }
  46          
  47          
  48          //判断忙不忙
  49          void Busy()
  50          {
  51   1              unsigned char temp;
  52   1              LCD_DataPort=0xff;
  53   1              LCD_RS=0;//RW=1,RS=0读状态
  54   1              LCD_RW=1;
C51 COMPILER V9.60.7.0   LCD2002                                                           09/24/2024 20:49:36 PAGE 2   

  55   1              do{
  56   2                      LCD_EN=1;
  57   2                      temp=LCD_DataPort;
  58   2                      LCD_EN=0;
  59   2              }while(temp&0x80);}/*对控制器每次进行读写操作之前， 
  60                                                    都必须进行读写检测，确保STA7为0*/
  61          
  62          
  63          
  64          /**
  65            * @brief  LCD2002写命令
  66            * @param  Command 要写入的命令
  67            * @retval 无
  68            */
  69          void LCD_WriteCommand(unsigned char Command) 
  70          {
  71   1              Busy();
  72   1          LCD_RS = 0; // 选择为指令，1为数据，0为指令
  73   1          LCD_RW = 0; // 选择为写， 1为读，0为写
  74   1          LCD_DataPort = Command; // 写入指令的内容
  75   1          LCD_EN = 1;   // 使能脚E先上升沿写入
  76   1          Delay(0.1);
  77   1          LCD_EN = 0;   // 使能脚E后负跳变完成写入
  78   1      }
  79          
  80          
  81          
  82          /**
  83            * @brief  LCD2002写数据
  84            * @param  Data 要写入的数据,搭配LCD_SetCursor()光标使用。
  85            * @retval 无
  86            */
  87          void LCD_WriteData(unsigned char Data) 
  88          {
  89   1              Busy();
  90   1          LCD_RS = 1; // 选择为数据，1为数据，0为指令
  91   1          LCD_RW = 0; // 选择为写， 1为读，0为写
  92   1          LCD_DataPort = Data; // 写入指数据的内容
  93   1          LCD_EN = 1;   // 使能脚E先上升沿写入
  94   1          Delay(0.1);
  95   1          LCD_EN = 0;   // 使能脚E后负跳变完成写入
  96   1        
  97   1      }
  98          
  99          
 100          /**
 101            * @brief  LCD2002读数据
 102            * @param  Data 要写入的数据,搭配LCD_SetCursor()光标使用。
 103            * @retval 无
 104            */
 105          void LCD_ReadData(unsigned char Data) 
 106          {
 107   1              Busy();
 108   1          LCD_RS = 1; // 选择为数据，1为数据，0为指令
 109   1          LCD_RW = 1; // 选择为写， 1为读，0为写
 110   1              LCD_EN = 1;   // 使能脚E先上升沿写入
 111   1              Delay(0.1);
 112   1          LCD_DataPort = Data; // 写入指数据的内容
 113   1          LCD_EN = 0;   // 使能脚E后负跳变完成写入
 114   1      }
 115          
 116          
C51 COMPILER V9.60.7.0   LCD2002                                                           09/24/2024 20:49:36 PAGE 3   

 117          
 118          /**
 119            * @brief  LCD2002初始化函数
 120            * @param  无
 121            * @retval 无
 122            */
 123          void LCD_Init() 
 124          {
 125   1          LCD_WriteCommand(0x38); // 设置20×4显示,5X7点阵,8位数据接口 
 126   1          LCD_WriteCommand(0x0c); // 显示开,光标关,闪烁关
 127   1      //      LCD_WriteCommand(0x0f);//显示开,光标开.闪烁开
 128   1          LCD_WriteCommand(0x06); // 当读或写一个字符后地址指针加一,不移动
 129   1          LCD_WriteCommand(0x01); // 光标复位，清屏
 130   1              Delay(0.1); 
 131   1              
 132   1      
 133   1      
 134   1      
 135   1      }
 136          
 137          /**
 138            * @brief  LCD2002清屏
 139            * @param  无
 140            * @retval 无
 141            */
 142          void LCD_Clear() 
 143          {
 144   1          Busy();
 145   1          LCD_WriteCommand(0x01);
 146   1              Delay(0.1);           // 等待清屏完成
 147   1      }
 148          
 149          
 150          /**
 151            * @brief  LCD2002设置光标位置
 152            * @param  Line 行位置，范围：1~2
 153            * @param  Column 列位置，范围：1~20
 154            * @retval 无
 155            */
 156          void LCD_SetCursor(unsigned int Line, unsigned int Column) 
 157          {
 158   1          // 确保列值在0-19之间
 159   1          if (Column >= 20) Column = 0;
 160   1          // 确保行值在0-2之间
 161   1          Line &= 0x02;  // 限制 Y 位置在 0 到 3 之间
 162   1                      
 163   1          if (Line == 0) 
 164   1          {
 165   2              LCD_WriteCommand(0x80 | Column);  // 第一行
 166   2          } 
 167   1          else if (Line == 1) 
 168   1          {
 169   2              LCD_WriteCommand(0xC0 | Column);  // 第二行
 170   2          } 
 171   1      //    else if (Line == 2) 
 172   1      //    {
 173   1      //        LCD_WriteCommand(0x80 | (Column + 20));  // 第三行
 174   1      //    } 
 175   1      //    else 
 176   1      //    {
 177   1      //        LCD_WriteCommand(0xC0 | (Column + 20));  // 第四行
 178   1      //    }
C51 COMPILER V9.60.7.0   LCD2002                                                           09/24/2024 20:49:36 PAGE 4   

 179   1      }
 180                  
 181           
 182          
 183          
 184          unsigned char LCD_Readdata(void)               //读数据子程序
 185          {   unsigned char d;
 186   1          Busy();                       //HD44780液晶显示控制器忙检测
 187   1          LCD_DataPort=0xff;
 188   1          LCD_RS=1;                             //RS=1 RW=1 E=高电平
 189   1          LCD_RW=1;
 190   1          LCD_EN=1;
 191   1          Delay(0.005);
 192   1          d=LCD_DataPort;
 193   1          LCD_EN=0;
 194   1          return d;
 195   1      }
 196          
 197          
 198          
 199          // 
 200          /**
 201           * @brief  显示字符函数
 202           * @param  Line0-3行 Column 0-19列 i字符
 203           * @retval
 204           */
 205          void LCD_USER_ShowString(unsigned char Line, unsigned char Column, unsigned char  i) 
 206          {                       
 207   1              LCD_SetCursor(Line, Column); // 光标
 208   1              LCD_WriteData(i);
 209   1      }
 210          
 211          
 212          
 213          /**
 214           * @brief LCD2002显示字符串
 215           * @param Line 0-4行 Column 0-19列 *String 输入字符""
 216           * @retval 无
 217           */
 218          void LCD_ShowString(unsigned char Line, unsigned char Column, char *String) 
 219          {       unsigned char i;                
 220   1              LCD_SetCursor(Line, Column);
 221   1          for (i = 0; String[i] != '\0'; i++) 
 222   1              {
 223   2            LCD_WriteData(String[i]);
 224   2          }
 225   1      }
 226          
 227          
 228          
 229          
 230          
 231          
 232          
 233          //每次写入的字符 a 是递增的
 234          void write_CGROM(unsigned char a)
 235          {
 236   1          unsigned char j;
 237   1          LCD_WriteCommand(0x02);  // 光标归位命令 (光标位置回到初始位置，通常是DDRAM的起始地址)
 238   1          Delay(1);                // 延时一段时间，确保命令有效
 239   1          LCD_WriteCommand(0x80);  // 设置光标到第1行的起始地址 (0x80对应DDRAM的第1行起始地址)
 240   1          
C51 COMPILER V9.60.7.0   LCD2002                                                           09/24/2024 20:49:36 PAGE 5   

 241   1          // 向第1行写入40个字符数据
 242   1          for (j = 0; j < 40; j++) 
 243   1          {
 244   2              LCD_WriteData(a);    // 向LCD写入数据 'a'
 245   2              a += 1;              // 自增'a'，以便下一个字符是'a'的下一个值
 246   2          }
 247   1      
 248   1          LCD_WriteCommand(0xC0);  // 设置光标到第2行的起始地址 (0xC0对应DDRAM的第2行起始地址)
 249   1          
 250   1          // 向第2行写入40个字符数据
 251   1          for (j = 0; j < 40; j++) 
 252   1          {
 253   2              LCD_WriteData(a);    // 向LCD写入数据 'a'
 254   2              a += 1;              // 自增'a'，同样依次写入下一个字符
 255   2          }
 256   1          
 257   1          Delay(1);                // 再次延时，确保数据全部写入
 258   1      }
 259          
 260          
 261          
 262          
 263          /**
 264           * @brief  全屏显示HD44780 内置字符
 265           * @param  Line 0-3  Column 0-19  输入16进制0X...
 266           * @retval 无
 267           */
 268          void Write_DDRAM(unsigned char a)
 269          {
 270   1          unsigned char j;
 271   1          
 272   1          LCD_WriteCommand(0x02);  // 光标归位命令 (光标位置回到初始位置，通常是DDRAM的起始地址)
 273   1          Delay(1);               // 延时10个单位 (比之前的延时长)
 274   1      
 275   1          LCD_WriteCommand(0x80);  // 设置光标到第1行的起始地址 (0x80对应DDRAM的第1行起始地址)
 276   1          
 277   1          // 向第1行写入20个相同的字符   
 278   1          for (j = 0; j < 20; j++) 
 279   1          {
 280   2              LCD_WriteData(a);    // 将字符 'a' 写入 LCD 显示数据存储器
 281   2          }
 282   1      
 283   1          LCD_WriteCommand(0xC0);  // 设置光标到第2行的起始地址 (0xC0对应DDRAM的第2行起始地址)
 284   1          
 285   1          // 向第2行写入20个相同的字符
 286   1          for (j = 0; j < 20; j++) 
 287   1          {
 288   2              LCD_WriteData(a);    // 将字符 'a' 写入 LCD 显示数据存储器
 289   2          }  
 290   1          Delay(1);                // 延时，确保数据完全写入
 291   1      }
 292          
 293          
 294          
 295          
 296          // 向 LCD 的 CGRAM 写入自定义字符数据
 297          void Write_CGRAM(unsigned char a[])
 298          {
 299   1          unsigned char k;
 300   1          
 301   1          // 发送命令 0x40，选择 CGRAM 地址
 302   1          LCD_WriteCommand(0x40); 
C51 COMPILER V9.60.7.0   LCD2002                                                           09/24/2024 20:49:36 PAGE 6   

 303   1          
 304   1          // 将自定义字符数据写入 CGRAM
 305   1          for(k = 0; k < 64; k++)
 306   1          {
 307   2              LCD_WriteData(a[k]);  // 写入字符数据
 308   2          }
 309   1      }
 310          
 311             
 312          
 313          void displayCustomCharacter1() 
 314          {
 315   1          unsigned char row, col;
 316   1              unsigned char pattern1[8] = {0x15, 0x0A, 0x15, 0x0A, 0x15, 0x0A, 0x15}; // 棋盘格样式
 317   1              unsigned char pattern2[8] = {0x0A, 0x15, 0x0A, 0x15, 0x0A, 0x15, 0x0A};
 318   1              unsigned char pattern3[8] = {0x1C, 0x1C, 0x1C, 0x1C, 0x00, 0x00, 0x00, 0x00}; // 代表齿轮的形状
 319   1              unsigned char pattern4[8] = {0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x00}; // 模拟波浪形状
 320   1              unsigned char pattern5[8] = {0x1E, 0x11, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00}; // 蜡烛的形状
 321   1              unsigned char pattern6[8] = {0x04, 0x0A, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00}; // 心电图波形
 322   1              unsigned char pattern7[8] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}; 
 323   1          // 将自定义字符数组写入CGRAM
 324   1          Write_CGRAM(pattern7);
 325   1      
 326   1          // 遍历LCD的每一行和每一列，显示自定义字符
 327   1          for (row = 0; row < 2; row++) 
 328   1          {
 329   2              for (col = 0; col < 20; col++) 
 330   2              {
 331   3                  // 针对LCD2002的行起始地址做出修正
 332   3                  unsigned char position;
 333   3                  if (row == 0) 
 334   3                                      {
 335   4                      position = 0x80 + col;   // 第1行地址 0x80 起始
 336   4                                      } else //if (row == 1) {
 337   3                      position = 0xC0 + col;   // 第2行地址 0xC0 起始
 338   3      //            } else if (row == 2) {
 339   3      //                position = 0x94 + col;   // 第3行地址 0x94 起始
 340   3      //            } else {
 341   3      //                position = 0xD4 + col;   // 第4行地址 0xD4 起始
 342   3      //            }
 343   3                  // 设置光标位置并显示自定义字符
 344   3                  LCD_WriteCommand(position);
 345   3                  LCD_WriteData(0x00);  // 显示存储在CGRAM中的第一个自定义字符
 346   3              }
 347   2          }
 348   1      }
 349          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    596    ----
   CONSTANT SIZE    =     56    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      65
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

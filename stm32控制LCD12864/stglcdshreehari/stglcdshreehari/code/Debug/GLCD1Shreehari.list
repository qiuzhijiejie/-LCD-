
GLCD1Shreehari.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003410  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080034d0  080034d0  000044d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003558  08003558  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003558  08003558  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003558  08003558  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003558  08003558  00004558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800355c  0800355c  0000455c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003560  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  2000000c  0800356c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  0800356c  00005158  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ab9c  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b9f  00000000  00000000  0000fbd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000820  00000000  00000000  00011770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000064b  00000000  00000000  00011f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012fcb  00000000  00000000  000125db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000af32  00000000  00000000  000255a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00075aa6  00000000  00000000  000304d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a5f7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c04  00000000  00000000  000a5fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  000a7bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080034b8 	.word	0x080034b8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080034b8 	.word	0x080034b8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <ReadDataFromPins>:
0x0000, 0x0000, 0x0000, 0x7400, 0x4C00, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  // ~
};


uint8_t ReadDataFromPins(void)
	  {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
	      uint8_t RDFP_temp = 0;
 80003fa:	1dfb      	adds	r3, r7, #7
 80003fc:	2200      	movs	r2, #0
 80003fe:	701a      	strb	r2, [r3, #0]
	        // Set each pin high individually

	      	HAL_GPIO_WritePin(GPIOA, DB0_Pin, GPIO_PIN_SET);
 8000400:	23a0      	movs	r3, #160	@ 0xa0
 8000402:	05db      	lsls	r3, r3, #23
 8000404:	2201      	movs	r2, #1
 8000406:	2110      	movs	r1, #16
 8000408:	0018      	movs	r0, r3
 800040a:	f001 facc 	bl	80019a6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOA, DB1_Pin, GPIO_PIN_SET);
 800040e:	23a0      	movs	r3, #160	@ 0xa0
 8000410:	05db      	lsls	r3, r3, #23
 8000412:	2201      	movs	r2, #1
 8000414:	2120      	movs	r1, #32
 8000416:	0018      	movs	r0, r3
 8000418:	f001 fac5 	bl	80019a6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOA, DB2_Pin, GPIO_PIN_SET);
 800041c:	23a0      	movs	r3, #160	@ 0xa0
 800041e:	05db      	lsls	r3, r3, #23
 8000420:	2201      	movs	r2, #1
 8000422:	2140      	movs	r1, #64	@ 0x40
 8000424:	0018      	movs	r0, r3
 8000426:	f001 fabe 	bl	80019a6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOA, DB3_Pin, GPIO_PIN_SET);
 800042a:	23a0      	movs	r3, #160	@ 0xa0
 800042c:	05db      	lsls	r3, r3, #23
 800042e:	2201      	movs	r2, #1
 8000430:	2180      	movs	r1, #128	@ 0x80
 8000432:	0018      	movs	r0, r3
 8000434:	f001 fab7 	bl	80019a6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOA, DB4_Pin, GPIO_PIN_SET);
 8000438:	2380      	movs	r3, #128	@ 0x80
 800043a:	0059      	lsls	r1, r3, #1
 800043c:	23a0      	movs	r3, #160	@ 0xa0
 800043e:	05db      	lsls	r3, r3, #23
 8000440:	2201      	movs	r2, #1
 8000442:	0018      	movs	r0, r3
 8000444:	f001 faaf 	bl	80019a6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOA, DB5_Pin, GPIO_PIN_SET);
 8000448:	2380      	movs	r3, #128	@ 0x80
 800044a:	0099      	lsls	r1, r3, #2
 800044c:	23a0      	movs	r3, #160	@ 0xa0
 800044e:	05db      	lsls	r3, r3, #23
 8000450:	2201      	movs	r2, #1
 8000452:	0018      	movs	r0, r3
 8000454:	f001 faa7 	bl	80019a6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOA, DB6_Pin, GPIO_PIN_SET);
 8000458:	2380      	movs	r3, #128	@ 0x80
 800045a:	00d9      	lsls	r1, r3, #3
 800045c:	23a0      	movs	r3, #160	@ 0xa0
 800045e:	05db      	lsls	r3, r3, #23
 8000460:	2201      	movs	r2, #1
 8000462:	0018      	movs	r0, r3
 8000464:	f001 fa9f 	bl	80019a6 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOA, DB7_Pin, GPIO_PIN_SET);
 8000468:	2380      	movs	r3, #128	@ 0x80
 800046a:	0119      	lsls	r1, r3, #4
 800046c:	23a0      	movs	r3, #160	@ 0xa0
 800046e:	05db      	lsls	r3, r3, #23
 8000470:	2201      	movs	r2, #1
 8000472:	0018      	movs	r0, r3
 8000474:	f001 fa97 	bl	80019a6 <HAL_GPIO_WritePin>


	      // Read each pin and combine the result
	      RDFP_temp |= (HAL_GPIO_ReadPin(GPIOA, DB0_Pin) == GPIO_PIN_SET) ? (1 << 0) : 0;
 8000478:	23a0      	movs	r3, #160	@ 0xa0
 800047a:	05db      	lsls	r3, r3, #23
 800047c:	2110      	movs	r1, #16
 800047e:	0018      	movs	r0, r3
 8000480:	f001 fa74 	bl	800196c <HAL_GPIO_ReadPin>
 8000484:	0003      	movs	r3, r0
 8000486:	3b01      	subs	r3, #1
 8000488:	425a      	negs	r2, r3
 800048a:	4153      	adcs	r3, r2
 800048c:	b2db      	uxtb	r3, r3
 800048e:	b25a      	sxtb	r2, r3
 8000490:	1dfb      	adds	r3, r7, #7
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	b25b      	sxtb	r3, r3
 8000496:	4313      	orrs	r3, r2
 8000498:	b25a      	sxtb	r2, r3
 800049a:	1dfb      	adds	r3, r7, #7
 800049c:	701a      	strb	r2, [r3, #0]
	      RDFP_temp |= (HAL_GPIO_ReadPin(GPIOA, DB1_Pin) == GPIO_PIN_SET) ? (1 << 1) : 0;
 800049e:	23a0      	movs	r3, #160	@ 0xa0
 80004a0:	05db      	lsls	r3, r3, #23
 80004a2:	2120      	movs	r1, #32
 80004a4:	0018      	movs	r0, r3
 80004a6:	f001 fa61 	bl	800196c <HAL_GPIO_ReadPin>
 80004aa:	0003      	movs	r3, r0
 80004ac:	2b01      	cmp	r3, #1
 80004ae:	d101      	bne.n	80004b4 <ReadDataFromPins+0xc0>
 80004b0:	2302      	movs	r3, #2
 80004b2:	e000      	b.n	80004b6 <ReadDataFromPins+0xc2>
 80004b4:	2300      	movs	r3, #0
 80004b6:	b25a      	sxtb	r2, r3
 80004b8:	1dfb      	adds	r3, r7, #7
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	b25b      	sxtb	r3, r3
 80004be:	4313      	orrs	r3, r2
 80004c0:	b25a      	sxtb	r2, r3
 80004c2:	1dfb      	adds	r3, r7, #7
 80004c4:	701a      	strb	r2, [r3, #0]
	      RDFP_temp |= (HAL_GPIO_ReadPin(GPIOA, DB2_Pin) == GPIO_PIN_SET) ? (1 << 2) : 0;
 80004c6:	23a0      	movs	r3, #160	@ 0xa0
 80004c8:	05db      	lsls	r3, r3, #23
 80004ca:	2140      	movs	r1, #64	@ 0x40
 80004cc:	0018      	movs	r0, r3
 80004ce:	f001 fa4d 	bl	800196c <HAL_GPIO_ReadPin>
 80004d2:	0003      	movs	r3, r0
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d101      	bne.n	80004dc <ReadDataFromPins+0xe8>
 80004d8:	2304      	movs	r3, #4
 80004da:	e000      	b.n	80004de <ReadDataFromPins+0xea>
 80004dc:	2300      	movs	r3, #0
 80004de:	b25a      	sxtb	r2, r3
 80004e0:	1dfb      	adds	r3, r7, #7
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	b25b      	sxtb	r3, r3
 80004e6:	4313      	orrs	r3, r2
 80004e8:	b25a      	sxtb	r2, r3
 80004ea:	1dfb      	adds	r3, r7, #7
 80004ec:	701a      	strb	r2, [r3, #0]
	      RDFP_temp |= (HAL_GPIO_ReadPin(GPIOA, DB3_Pin) == GPIO_PIN_SET) ? (1 << 3) : 0;
 80004ee:	23a0      	movs	r3, #160	@ 0xa0
 80004f0:	05db      	lsls	r3, r3, #23
 80004f2:	2180      	movs	r1, #128	@ 0x80
 80004f4:	0018      	movs	r0, r3
 80004f6:	f001 fa39 	bl	800196c <HAL_GPIO_ReadPin>
 80004fa:	0003      	movs	r3, r0
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	d101      	bne.n	8000504 <ReadDataFromPins+0x110>
 8000500:	2308      	movs	r3, #8
 8000502:	e000      	b.n	8000506 <ReadDataFromPins+0x112>
 8000504:	2300      	movs	r3, #0
 8000506:	b25a      	sxtb	r2, r3
 8000508:	1dfb      	adds	r3, r7, #7
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	b25b      	sxtb	r3, r3
 800050e:	4313      	orrs	r3, r2
 8000510:	b25a      	sxtb	r2, r3
 8000512:	1dfb      	adds	r3, r7, #7
 8000514:	701a      	strb	r2, [r3, #0]
	      RDFP_temp |= (HAL_GPIO_ReadPin(GPIOA, DB4_Pin) == GPIO_PIN_SET) ? (1 << 4) : 0;
 8000516:	2380      	movs	r3, #128	@ 0x80
 8000518:	005a      	lsls	r2, r3, #1
 800051a:	23a0      	movs	r3, #160	@ 0xa0
 800051c:	05db      	lsls	r3, r3, #23
 800051e:	0011      	movs	r1, r2
 8000520:	0018      	movs	r0, r3
 8000522:	f001 fa23 	bl	800196c <HAL_GPIO_ReadPin>
 8000526:	0003      	movs	r3, r0
 8000528:	2b01      	cmp	r3, #1
 800052a:	d101      	bne.n	8000530 <ReadDataFromPins+0x13c>
 800052c:	2310      	movs	r3, #16
 800052e:	e000      	b.n	8000532 <ReadDataFromPins+0x13e>
 8000530:	2300      	movs	r3, #0
 8000532:	b25a      	sxtb	r2, r3
 8000534:	1dfb      	adds	r3, r7, #7
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	b25b      	sxtb	r3, r3
 800053a:	4313      	orrs	r3, r2
 800053c:	b25a      	sxtb	r2, r3
 800053e:	1dfb      	adds	r3, r7, #7
 8000540:	701a      	strb	r2, [r3, #0]
	      RDFP_temp |= (HAL_GPIO_ReadPin(GPIOA, DB5_Pin) == GPIO_PIN_SET) ? (1 << 5) : 0;
 8000542:	2380      	movs	r3, #128	@ 0x80
 8000544:	009a      	lsls	r2, r3, #2
 8000546:	23a0      	movs	r3, #160	@ 0xa0
 8000548:	05db      	lsls	r3, r3, #23
 800054a:	0011      	movs	r1, r2
 800054c:	0018      	movs	r0, r3
 800054e:	f001 fa0d 	bl	800196c <HAL_GPIO_ReadPin>
 8000552:	0003      	movs	r3, r0
 8000554:	2b01      	cmp	r3, #1
 8000556:	d101      	bne.n	800055c <ReadDataFromPins+0x168>
 8000558:	2320      	movs	r3, #32
 800055a:	e000      	b.n	800055e <ReadDataFromPins+0x16a>
 800055c:	2300      	movs	r3, #0
 800055e:	b25a      	sxtb	r2, r3
 8000560:	1dfb      	adds	r3, r7, #7
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	b25b      	sxtb	r3, r3
 8000566:	4313      	orrs	r3, r2
 8000568:	b25a      	sxtb	r2, r3
 800056a:	1dfb      	adds	r3, r7, #7
 800056c:	701a      	strb	r2, [r3, #0]
	      RDFP_temp |= (HAL_GPIO_ReadPin(GPIOA, DB6_Pin) == GPIO_PIN_SET) ? (1 << 6) : 0;
 800056e:	2380      	movs	r3, #128	@ 0x80
 8000570:	00da      	lsls	r2, r3, #3
 8000572:	23a0      	movs	r3, #160	@ 0xa0
 8000574:	05db      	lsls	r3, r3, #23
 8000576:	0011      	movs	r1, r2
 8000578:	0018      	movs	r0, r3
 800057a:	f001 f9f7 	bl	800196c <HAL_GPIO_ReadPin>
 800057e:	0003      	movs	r3, r0
 8000580:	2b01      	cmp	r3, #1
 8000582:	d101      	bne.n	8000588 <ReadDataFromPins+0x194>
 8000584:	2340      	movs	r3, #64	@ 0x40
 8000586:	e000      	b.n	800058a <ReadDataFromPins+0x196>
 8000588:	2300      	movs	r3, #0
 800058a:	b25a      	sxtb	r2, r3
 800058c:	1dfb      	adds	r3, r7, #7
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	b25b      	sxtb	r3, r3
 8000592:	4313      	orrs	r3, r2
 8000594:	b25a      	sxtb	r2, r3
 8000596:	1dfb      	adds	r3, r7, #7
 8000598:	701a      	strb	r2, [r3, #0]
	      RDFP_temp |= (HAL_GPIO_ReadPin(GPIOA, DB7_Pin) == GPIO_PIN_SET) ? (1 << 7) : 0;
 800059a:	2380      	movs	r3, #128	@ 0x80
 800059c:	011a      	lsls	r2, r3, #4
 800059e:	23a0      	movs	r3, #160	@ 0xa0
 80005a0:	05db      	lsls	r3, r3, #23
 80005a2:	0011      	movs	r1, r2
 80005a4:	0018      	movs	r0, r3
 80005a6:	f001 f9e1 	bl	800196c <HAL_GPIO_ReadPin>
 80005aa:	0003      	movs	r3, r0
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d101      	bne.n	80005b4 <ReadDataFromPins+0x1c0>
 80005b0:	2380      	movs	r3, #128	@ 0x80
 80005b2:	e000      	b.n	80005b6 <ReadDataFromPins+0x1c2>
 80005b4:	2300      	movs	r3, #0
 80005b6:	b25a      	sxtb	r2, r3
 80005b8:	1dfb      	adds	r3, r7, #7
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	b25b      	sxtb	r3, r3
 80005be:	4313      	orrs	r3, r2
 80005c0:	b25a      	sxtb	r2, r3
 80005c2:	1dfb      	adds	r3, r7, #7
 80005c4:	701a      	strb	r2, [r3, #0]

	      return RDFP_temp;
 80005c6:	1dfb      	adds	r3, r7, #7
 80005c8:	781b      	ldrb	r3, [r3, #0]
	  }
 80005ca:	0018      	movs	r0, r3
 80005cc:	46bd      	mov	sp, r7
 80005ce:	b002      	add	sp, #8
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <Printdata>:

////////////////////////////////////////////////////////////////////////////////////////////
void Printdata(unsigned char data)
{
 80005d2:	b580      	push	{r7, lr}
 80005d4:	b082      	sub	sp, #8
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	0002      	movs	r2, r0
 80005da:	1dfb      	adds	r3, r7, #7
 80005dc:	701a      	strb	r2, [r3, #0]

	if((data&0x01)==0x01)
 80005de:	1dfb      	adds	r3, r7, #7
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2201      	movs	r2, #1
 80005e4:	4013      	ands	r3, r2
 80005e6:	d007      	beq.n	80005f8 <Printdata+0x26>
	{
		HAL_GPIO_WritePin(GPIOA, DB0_Pin, GPIO_PIN_SET);
 80005e8:	23a0      	movs	r3, #160	@ 0xa0
 80005ea:	05db      	lsls	r3, r3, #23
 80005ec:	2201      	movs	r2, #1
 80005ee:	2110      	movs	r1, #16
 80005f0:	0018      	movs	r0, r3
 80005f2:	f001 f9d8 	bl	80019a6 <HAL_GPIO_WritePin>
 80005f6:	e006      	b.n	8000606 <Printdata+0x34>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, DB0_Pin, GPIO_PIN_RESET);
 80005f8:	23a0      	movs	r3, #160	@ 0xa0
 80005fa:	05db      	lsls	r3, r3, #23
 80005fc:	2200      	movs	r2, #0
 80005fe:	2110      	movs	r1, #16
 8000600:	0018      	movs	r0, r3
 8000602:	f001 f9d0 	bl	80019a6 <HAL_GPIO_WritePin>
	}

	if((data&0x02)==0x02)
 8000606:	1dfb      	adds	r3, r7, #7
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2202      	movs	r2, #2
 800060c:	4013      	ands	r3, r2
 800060e:	d007      	beq.n	8000620 <Printdata+0x4e>
	{
		HAL_GPIO_WritePin(GPIOA, DB1_Pin, GPIO_PIN_SET);
 8000610:	23a0      	movs	r3, #160	@ 0xa0
 8000612:	05db      	lsls	r3, r3, #23
 8000614:	2201      	movs	r2, #1
 8000616:	2120      	movs	r1, #32
 8000618:	0018      	movs	r0, r3
 800061a:	f001 f9c4 	bl	80019a6 <HAL_GPIO_WritePin>
 800061e:	e006      	b.n	800062e <Printdata+0x5c>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, DB1_Pin, GPIO_PIN_RESET);
 8000620:	23a0      	movs	r3, #160	@ 0xa0
 8000622:	05db      	lsls	r3, r3, #23
 8000624:	2200      	movs	r2, #0
 8000626:	2120      	movs	r1, #32
 8000628:	0018      	movs	r0, r3
 800062a:	f001 f9bc 	bl	80019a6 <HAL_GPIO_WritePin>
	}

	if((data&0x04)==0x04)
 800062e:	1dfb      	adds	r3, r7, #7
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2204      	movs	r2, #4
 8000634:	4013      	ands	r3, r2
 8000636:	d007      	beq.n	8000648 <Printdata+0x76>
	{
		HAL_GPIO_WritePin(GPIOA, DB2_Pin, GPIO_PIN_SET);
 8000638:	23a0      	movs	r3, #160	@ 0xa0
 800063a:	05db      	lsls	r3, r3, #23
 800063c:	2201      	movs	r2, #1
 800063e:	2140      	movs	r1, #64	@ 0x40
 8000640:	0018      	movs	r0, r3
 8000642:	f001 f9b0 	bl	80019a6 <HAL_GPIO_WritePin>
 8000646:	e006      	b.n	8000656 <Printdata+0x84>
	}
	else{HAL_GPIO_WritePin(GPIOA, DB2_Pin, GPIO_PIN_RESET);}
 8000648:	23a0      	movs	r3, #160	@ 0xa0
 800064a:	05db      	lsls	r3, r3, #23
 800064c:	2200      	movs	r2, #0
 800064e:	2140      	movs	r1, #64	@ 0x40
 8000650:	0018      	movs	r0, r3
 8000652:	f001 f9a8 	bl	80019a6 <HAL_GPIO_WritePin>

	if((data&0x08)==0x08)
 8000656:	1dfb      	adds	r3, r7, #7
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2208      	movs	r2, #8
 800065c:	4013      	ands	r3, r2
 800065e:	d007      	beq.n	8000670 <Printdata+0x9e>
	{
		HAL_GPIO_WritePin(GPIOA, DB3_Pin, GPIO_PIN_SET);
 8000660:	23a0      	movs	r3, #160	@ 0xa0
 8000662:	05db      	lsls	r3, r3, #23
 8000664:	2201      	movs	r2, #1
 8000666:	2180      	movs	r1, #128	@ 0x80
 8000668:	0018      	movs	r0, r3
 800066a:	f001 f99c 	bl	80019a6 <HAL_GPIO_WritePin>
 800066e:	e006      	b.n	800067e <Printdata+0xac>
	}
	else{HAL_GPIO_WritePin(GPIOA, DB3_Pin, GPIO_PIN_RESET);}
 8000670:	23a0      	movs	r3, #160	@ 0xa0
 8000672:	05db      	lsls	r3, r3, #23
 8000674:	2200      	movs	r2, #0
 8000676:	2180      	movs	r1, #128	@ 0x80
 8000678:	0018      	movs	r0, r3
 800067a:	f001 f994 	bl	80019a6 <HAL_GPIO_WritePin>

	if((data&0x10)==0x10)
 800067e:	1dfb      	adds	r3, r7, #7
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2210      	movs	r2, #16
 8000684:	4013      	ands	r3, r2
 8000686:	d008      	beq.n	800069a <Printdata+0xc8>
	{
		HAL_GPIO_WritePin(GPIOA, DB4_Pin, GPIO_PIN_SET);
 8000688:	2380      	movs	r3, #128	@ 0x80
 800068a:	0059      	lsls	r1, r3, #1
 800068c:	23a0      	movs	r3, #160	@ 0xa0
 800068e:	05db      	lsls	r3, r3, #23
 8000690:	2201      	movs	r2, #1
 8000692:	0018      	movs	r0, r3
 8000694:	f001 f987 	bl	80019a6 <HAL_GPIO_WritePin>
 8000698:	e007      	b.n	80006aa <Printdata+0xd8>
	}
	else{HAL_GPIO_WritePin(GPIOA, DB4_Pin, GPIO_PIN_RESET);}
 800069a:	2380      	movs	r3, #128	@ 0x80
 800069c:	0059      	lsls	r1, r3, #1
 800069e:	23a0      	movs	r3, #160	@ 0xa0
 80006a0:	05db      	lsls	r3, r3, #23
 80006a2:	2200      	movs	r2, #0
 80006a4:	0018      	movs	r0, r3
 80006a6:	f001 f97e 	bl	80019a6 <HAL_GPIO_WritePin>

	if((data&0x20)==0x20)
 80006aa:	1dfb      	adds	r3, r7, #7
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	2220      	movs	r2, #32
 80006b0:	4013      	ands	r3, r2
 80006b2:	d008      	beq.n	80006c6 <Printdata+0xf4>
	{
		HAL_GPIO_WritePin(GPIOA, DB5_Pin, GPIO_PIN_SET);
 80006b4:	2380      	movs	r3, #128	@ 0x80
 80006b6:	0099      	lsls	r1, r3, #2
 80006b8:	23a0      	movs	r3, #160	@ 0xa0
 80006ba:	05db      	lsls	r3, r3, #23
 80006bc:	2201      	movs	r2, #1
 80006be:	0018      	movs	r0, r3
 80006c0:	f001 f971 	bl	80019a6 <HAL_GPIO_WritePin>
 80006c4:	e007      	b.n	80006d6 <Printdata+0x104>
	}
	else{HAL_GPIO_WritePin(GPIOA, DB5_Pin, GPIO_PIN_RESET);}
 80006c6:	2380      	movs	r3, #128	@ 0x80
 80006c8:	0099      	lsls	r1, r3, #2
 80006ca:	23a0      	movs	r3, #160	@ 0xa0
 80006cc:	05db      	lsls	r3, r3, #23
 80006ce:	2200      	movs	r2, #0
 80006d0:	0018      	movs	r0, r3
 80006d2:	f001 f968 	bl	80019a6 <HAL_GPIO_WritePin>

	if((data&0x40)==0x40)
 80006d6:	1dfb      	adds	r3, r7, #7
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2240      	movs	r2, #64	@ 0x40
 80006dc:	4013      	ands	r3, r2
 80006de:	d008      	beq.n	80006f2 <Printdata+0x120>
	{
		HAL_GPIO_WritePin(GPIOA, DB6_Pin, GPIO_PIN_SET);
 80006e0:	2380      	movs	r3, #128	@ 0x80
 80006e2:	00d9      	lsls	r1, r3, #3
 80006e4:	23a0      	movs	r3, #160	@ 0xa0
 80006e6:	05db      	lsls	r3, r3, #23
 80006e8:	2201      	movs	r2, #1
 80006ea:	0018      	movs	r0, r3
 80006ec:	f001 f95b 	bl	80019a6 <HAL_GPIO_WritePin>
 80006f0:	e007      	b.n	8000702 <Printdata+0x130>
	}
	else{HAL_GPIO_WritePin(GPIOA, DB6_Pin, GPIO_PIN_RESET);}
 80006f2:	2380      	movs	r3, #128	@ 0x80
 80006f4:	00d9      	lsls	r1, r3, #3
 80006f6:	23a0      	movs	r3, #160	@ 0xa0
 80006f8:	05db      	lsls	r3, r3, #23
 80006fa:	2200      	movs	r2, #0
 80006fc:	0018      	movs	r0, r3
 80006fe:	f001 f952 	bl	80019a6 <HAL_GPIO_WritePin>

	if((data&0x80)==0x80)
 8000702:	1dfb      	adds	r3, r7, #7
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	b25b      	sxtb	r3, r3
 8000708:	2b00      	cmp	r3, #0
 800070a:	da08      	bge.n	800071e <Printdata+0x14c>
	{
		HAL_GPIO_WritePin(GPIOA, DB7_Pin, GPIO_PIN_SET);
 800070c:	2380      	movs	r3, #128	@ 0x80
 800070e:	0119      	lsls	r1, r3, #4
 8000710:	23a0      	movs	r3, #160	@ 0xa0
 8000712:	05db      	lsls	r3, r3, #23
 8000714:	2201      	movs	r2, #1
 8000716:	0018      	movs	r0, r3
 8000718:	f001 f945 	bl	80019a6 <HAL_GPIO_WritePin>
	}
	else{HAL_GPIO_WritePin(GPIOA, DB7_Pin, GPIO_PIN_RESET);}


}
 800071c:	e007      	b.n	800072e <Printdata+0x15c>
	else{HAL_GPIO_WritePin(GPIOA, DB7_Pin, GPIO_PIN_RESET);}
 800071e:	2380      	movs	r3, #128	@ 0x80
 8000720:	0119      	lsls	r1, r3, #4
 8000722:	23a0      	movs	r3, #160	@ 0xa0
 8000724:	05db      	lsls	r3, r3, #23
 8000726:	2200      	movs	r2, #0
 8000728:	0018      	movs	r0, r3
 800072a:	f001 f93c 	bl	80019a6 <HAL_GPIO_WritePin>
}
 800072e:	46c0      	nop			@ (mov r8, r8)
 8000730:	46bd      	mov	sp, r7
 8000732:	b002      	add	sp, #8
 8000734:	bd80      	pop	{r7, pc}
	...

08000738 <BusyL>:
//////////////////////////////////////////////////////////////////////////////////////////////////
void BusyL(void)
{
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
	//unsigned char flag=0xff;
unsigned char flag = ReadDataFromPins();
 800073e:	1dfc      	adds	r4, r7, #7
 8000740:	f7ff fe58 	bl	80003f4 <ReadDataFromPins>
 8000744:	0003      	movs	r3, r0
 8000746:	7023      	strb	r3, [r4, #0]
// CS1= 1;       //active "H"
 HAL_GPIO_WritePin(GPIOC, LCD_CS1_Pin, GPIO_PIN_SET);
 8000748:	4b1e      	ldr	r3, [pc, #120]	@ (80007c4 <BusyL+0x8c>)
 800074a:	2201      	movs	r2, #1
 800074c:	2140      	movs	r1, #64	@ 0x40
 800074e:	0018      	movs	r0, r3
 8000750:	f001 f929 	bl	80019a6 <HAL_GPIO_WritePin>

 //CS2= 0;
 HAL_GPIO_WritePin(GPIOB, LCD_CS2_Pin, GPIO_PIN_RESET);
 8000754:	4b1c      	ldr	r3, [pc, #112]	@ (80007c8 <BusyL+0x90>)
 8000756:	2200      	movs	r2, #0
 8000758:	2104      	movs	r1, #4
 800075a:	0018      	movs	r0, r3
 800075c:	f001 f923 	bl	80019a6 <HAL_GPIO_WritePin>
 //RS = 0;
 HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin, GPIO_PIN_RESET);
 8000760:	2380      	movs	r3, #128	@ 0x80
 8000762:	021b      	lsls	r3, r3, #8
 8000764:	4817      	ldr	r0, [pc, #92]	@ (80007c4 <BusyL+0x8c>)
 8000766:	2200      	movs	r2, #0
 8000768:	0019      	movs	r1, r3
 800076a:	f001 f91c 	bl	80019a6 <HAL_GPIO_WritePin>
// RW = 1;
 HAL_GPIO_WritePin(GPIOA, LCD_RW_Pin, GPIO_PIN_SET);//RW
 800076e:	23a0      	movs	r3, #160	@ 0xa0
 8000770:	05db      	lsls	r3, r3, #23
 8000772:	2201      	movs	r2, #1
 8000774:	2101      	movs	r1, #1
 8000776:	0018      	movs	r0, r3
 8000778:	f001 f915 	bl	80019a6 <HAL_GPIO_WritePin>
 //P1 = 0xFF;
 //Printdata(0xff);
 ReadDataFromPins();
 800077c:	f7ff fe3a 	bl	80003f4 <ReadDataFromPins>

while ((flag&0x80)==0x80)
 8000780:	e015      	b.n	80007ae <BusyL+0x76>
 {
// E=1;
	HAL_GPIO_WritePin(GPIOC,LCD_E_Pin , GPIO_PIN_SET);
 8000782:	2380      	movs	r3, #128	@ 0x80
 8000784:	01db      	lsls	r3, r3, #7
 8000786:	480f      	ldr	r0, [pc, #60]	@ (80007c4 <BusyL+0x8c>)
 8000788:	2201      	movs	r2, #1
 800078a:	0019      	movs	r1, r3
 800078c:	f001 f90b 	bl	80019a6 <HAL_GPIO_WritePin>
 //_nop_();
	HAL_Delay(10);
 8000790:	200a      	movs	r0, #10
 8000792:	f000 fd9b 	bl	80012cc <HAL_Delay>
// flag=P1;
	flag= ReadDataFromPins();
 8000796:	1dfc      	adds	r4, r7, #7
 8000798:	f7ff fe2c 	bl	80003f4 <ReadDataFromPins>
 800079c:	0003      	movs	r3, r0
 800079e:	7023      	strb	r3, [r4, #0]
 //E=0;
 HAL_GPIO_WritePin(GPIOC, LCD_E_Pin, GPIO_PIN_RESET);
 80007a0:	2380      	movs	r3, #128	@ 0x80
 80007a2:	01db      	lsls	r3, r3, #7
 80007a4:	4807      	ldr	r0, [pc, #28]	@ (80007c4 <BusyL+0x8c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	0019      	movs	r1, r3
 80007aa:	f001 f8fc 	bl	80019a6 <HAL_GPIO_WritePin>
while ((flag&0x80)==0x80)
 80007ae:	1dfb      	adds	r3, r7, #7
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	b25b      	sxtb	r3, r3
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	dbe4      	blt.n	8000782 <BusyL+0x4a>
 }
}
 80007b8:	46c0      	nop			@ (mov r8, r8)
 80007ba:	46c0      	nop			@ (mov r8, r8)
 80007bc:	46bd      	mov	sp, r7
 80007be:	b003      	add	sp, #12
 80007c0:	bd90      	pop	{r4, r7, pc}
 80007c2:	46c0      	nop			@ (mov r8, r8)
 80007c4:	50000800 	.word	0x50000800
 80007c8:	50000400 	.word	0x50000400

080007cc <BusyR>:
////////////////////////////////////////////////////////////////////////////////////////////////////////
void BusyR(void)
{
 80007cc:	b590      	push	{r4, r7, lr}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
	//unsigned char flag=0xff;
	unsigned char flag = ReadDataFromPins();
 80007d2:	1dfc      	adds	r4, r7, #7
 80007d4:	f7ff fe0e 	bl	80003f4 <ReadDataFromPins>
 80007d8:	0003      	movs	r3, r0
 80007da:	7023      	strb	r3, [r4, #0]
// CS1= 0;
 HAL_GPIO_WritePin(GPIOC, LCD_CS1_Pin, GPIO_PIN_RESET);
 80007dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000858 <BusyR+0x8c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	2140      	movs	r1, #64	@ 0x40
 80007e2:	0018      	movs	r0, r3
 80007e4:	f001 f8df 	bl	80019a6 <HAL_GPIO_WritePin>
// CS2= 1;        //active "H"
 HAL_GPIO_WritePin(GPIOB, LCD_CS2_Pin, GPIO_PIN_SET);
 80007e8:	4b1c      	ldr	r3, [pc, #112]	@ (800085c <BusyR+0x90>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	2104      	movs	r1, #4
 80007ee:	0018      	movs	r0, r3
 80007f0:	f001 f8d9 	bl	80019a6 <HAL_GPIO_WritePin>
 //RS = 0;
 HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin, GPIO_PIN_RESET);
 80007f4:	2380      	movs	r3, #128	@ 0x80
 80007f6:	021b      	lsls	r3, r3, #8
 80007f8:	4817      	ldr	r0, [pc, #92]	@ (8000858 <BusyR+0x8c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	0019      	movs	r1, r3
 80007fe:	f001 f8d2 	bl	80019a6 <HAL_GPIO_WritePin>
 //RW = 1;
 HAL_GPIO_WritePin(GPIOA, LCD_RW_Pin, GPIO_PIN_SET);//RW
 8000802:	23a0      	movs	r3, #160	@ 0xa0
 8000804:	05db      	lsls	r3, r3, #23
 8000806:	2201      	movs	r2, #1
 8000808:	2101      	movs	r1, #1
 800080a:	0018      	movs	r0, r3
 800080c:	f001 f8cb 	bl	80019a6 <HAL_GPIO_WritePin>
 //P1 = 0xFF;
 ReadDataFromPins();
 8000810:	f7ff fdf0 	bl	80003f4 <ReadDataFromPins>
while ((flag&0x80)==0x80)
 8000814:	e015      	b.n	8000842 <BusyR+0x76>
 {
// E=1;
HAL_GPIO_WritePin(GPIOC,LCD_E_Pin , GPIO_PIN_SET);
 8000816:	2380      	movs	r3, #128	@ 0x80
 8000818:	01db      	lsls	r3, r3, #7
 800081a:	480f      	ldr	r0, [pc, #60]	@ (8000858 <BusyR+0x8c>)
 800081c:	2201      	movs	r2, #1
 800081e:	0019      	movs	r1, r3
 8000820:	f001 f8c1 	bl	80019a6 <HAL_GPIO_WritePin>
 //_nop_();
HAL_Delay(10);
 8000824:	200a      	movs	r0, #10
 8000826:	f000 fd51 	bl	80012cc <HAL_Delay>
// flag=P1;
flag= ReadDataFromPins();
 800082a:	1dfc      	adds	r4, r7, #7
 800082c:	f7ff fde2 	bl	80003f4 <ReadDataFromPins>
 8000830:	0003      	movs	r3, r0
 8000832:	7023      	strb	r3, [r4, #0]
// E=0;
	 HAL_GPIO_WritePin(GPIOC, LCD_E_Pin, GPIO_PIN_RESET);
 8000834:	2380      	movs	r3, #128	@ 0x80
 8000836:	01db      	lsls	r3, r3, #7
 8000838:	4807      	ldr	r0, [pc, #28]	@ (8000858 <BusyR+0x8c>)
 800083a:	2200      	movs	r2, #0
 800083c:	0019      	movs	r1, r3
 800083e:	f001 f8b2 	bl	80019a6 <HAL_GPIO_WritePin>
while ((flag&0x80)==0x80)
 8000842:	1dfb      	adds	r3, r7, #7
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	b25b      	sxtb	r3, r3
 8000848:	2b00      	cmp	r3, #0
 800084a:	dbe4      	blt.n	8000816 <BusyR+0x4a>
 }
}
 800084c:	46c0      	nop			@ (mov r8, r8)
 800084e:	46c0      	nop			@ (mov r8, r8)
 8000850:	46bd      	mov	sp, r7
 8000852:	b003      	add	sp, #12
 8000854:	bd90      	pop	{r4, r7, pc}
 8000856:	46c0      	nop			@ (mov r8, r8)
 8000858:	50000800 	.word	0x50000800
 800085c:	50000400 	.word	0x50000400

08000860 <Locatexy>:
/////////////////////////////////////////////////////////////////////////////////////////////////
void Locatexy(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
// switch (Col&0xc0) /*  col.and.0xC0 */
// {
//  case 0: {BusyL();break;}
//  case 0x40: {BusyR();break;}
// }
 x = 0XB8;//((Col&0x3F)|0x40); /* col.and.0x3f.or.Set X Address*/
 8000866:	1cfb      	adds	r3, r7, #3
 8000868:	22b8      	movs	r2, #184	@ 0xb8
 800086a:	701a      	strb	r2, [r3, #0]
// y =0X40; //((Page&0x07)|0xB8); /* row.and.0x07.or.set Page */
 //Z=0XC0;
//
// RS = 0;
 HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin, GPIO_PIN_RESET);
 800086c:	2380      	movs	r3, #128	@ 0x80
 800086e:	021b      	lsls	r3, r3, #8
 8000870:	484d      	ldr	r0, [pc, #308]	@ (80009a8 <Locatexy+0x148>)
 8000872:	2200      	movs	r2, #0
 8000874:	0019      	movs	r1, r3
 8000876:	f001 f896 	bl	80019a6 <HAL_GPIO_WritePin>
// RW = 0;
 HAL_GPIO_WritePin(GPIOA, LCD_RW_Pin, GPIO_PIN_RESET);
 800087a:	23a0      	movs	r3, #160	@ 0xa0
 800087c:	05db      	lsls	r3, r3, #23
 800087e:	2200      	movs	r2, #0
 8000880:	2101      	movs	r1, #1
 8000882:	0018      	movs	r0, r3
 8000884:	f001 f88f 	bl	80019a6 <HAL_GPIO_WritePin>
// P1 = y;
 Printdata(x);
 8000888:	1cfb      	adds	r3, r7, #3
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	0018      	movs	r0, r3
 800088e:	f7ff fea0 	bl	80005d2 <Printdata>
// E  = 1;
 HAL_GPIO_WritePin(GPIOC,LCD_E_Pin , GPIO_PIN_SET);
 8000892:	2380      	movs	r3, #128	@ 0x80
 8000894:	01db      	lsls	r3, r3, #7
 8000896:	4844      	ldr	r0, [pc, #272]	@ (80009a8 <Locatexy+0x148>)
 8000898:	2201      	movs	r2, #1
 800089a:	0019      	movs	r1, r3
 800089c:	f001 f883 	bl	80019a6 <HAL_GPIO_WritePin>
 //_nop_();
 HAL_Delay(100);
 80008a0:	2064      	movs	r0, #100	@ 0x64
 80008a2:	f000 fd13 	bl	80012cc <HAL_Delay>
 //E  = 0;
for (unsigned char col1 = 0X40; col1 < 0X7F; col1++) {
 80008a6:	1d7b      	adds	r3, r7, #5
 80008a8:	2240      	movs	r2, #64	@ 0x40
 80008aa:	701a      	strb	r2, [r3, #0]
 80008ac:	e009      	b.n	80008c2 <Locatexy+0x62>
         y = 0x40 + col1;} // Set column address from 0x40 to 0x7F
 80008ae:	1dfb      	adds	r3, r7, #7
 80008b0:	1d7a      	adds	r2, r7, #5
 80008b2:	7812      	ldrb	r2, [r2, #0]
 80008b4:	3240      	adds	r2, #64	@ 0x40
 80008b6:	701a      	strb	r2, [r3, #0]
for (unsigned char col1 = 0X40; col1 < 0X7F; col1++) {
 80008b8:	1d7b      	adds	r3, r7, #5
 80008ba:	781a      	ldrb	r2, [r3, #0]
 80008bc:	1d7b      	adds	r3, r7, #5
 80008be:	3201      	adds	r2, #1
 80008c0:	701a      	strb	r2, [r3, #0]
 80008c2:	1d7b      	adds	r3, r7, #5
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2b7e      	cmp	r3, #126	@ 0x7e
 80008c8:	d9f1      	bls.n	80008ae <Locatexy+0x4e>

 HAL_GPIO_WritePin(GPIOC, LCD_E_Pin, GPIO_PIN_RESET);
 80008ca:	2380      	movs	r3, #128	@ 0x80
 80008cc:	01db      	lsls	r3, r3, #7
 80008ce:	4836      	ldr	r0, [pc, #216]	@ (80009a8 <Locatexy+0x148>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	0019      	movs	r1, r3
 80008d4:	f001 f867 	bl	80019a6 <HAL_GPIO_WritePin>
 //_nop_();
 HAL_Delay(100);
 80008d8:	2064      	movs	r0, #100	@ 0x64
 80008da:	f000 fcf7 	bl	80012cc <HAL_Delay>
// RS = 0;
 HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin, GPIO_PIN_RESET);
 80008de:	2380      	movs	r3, #128	@ 0x80
 80008e0:	021b      	lsls	r3, r3, #8
 80008e2:	4831      	ldr	r0, [pc, #196]	@ (80009a8 <Locatexy+0x148>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	0019      	movs	r1, r3
 80008e8:	f001 f85d 	bl	80019a6 <HAL_GPIO_WritePin>
// RW = 0;
 HAL_GPIO_WritePin(GPIOA, LCD_RW_Pin, GPIO_PIN_RESET);
 80008ec:	23a0      	movs	r3, #160	@ 0xa0
 80008ee:	05db      	lsls	r3, r3, #23
 80008f0:	2200      	movs	r2, #0
 80008f2:	2101      	movs	r1, #1
 80008f4:	0018      	movs	r0, r3
 80008f6:	f001 f856 	bl	80019a6 <HAL_GPIO_WritePin>
// P1 = x;
 Printdata(y);
 80008fa:	1dfb      	adds	r3, r7, #7
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	0018      	movs	r0, r3
 8000900:	f7ff fe67 	bl	80005d2 <Printdata>
 //E  = 1;
 HAL_GPIO_WritePin(GPIOC,LCD_E_Pin , GPIO_PIN_SET);
 8000904:	2380      	movs	r3, #128	@ 0x80
 8000906:	01db      	lsls	r3, r3, #7
 8000908:	4827      	ldr	r0, [pc, #156]	@ (80009a8 <Locatexy+0x148>)
 800090a:	2201      	movs	r2, #1
 800090c:	0019      	movs	r1, r3
 800090e:	f001 f84a 	bl	80019a6 <HAL_GPIO_WritePin>
// _nop_();
	HAL_Delay(100);
 8000912:	2064      	movs	r0, #100	@ 0x64
 8000914:	f000 fcda 	bl	80012cc <HAL_Delay>
// E  = 0;
	 HAL_GPIO_WritePin(GPIOC, LCD_E_Pin, GPIO_PIN_RESET);
 8000918:	2380      	movs	r3, #128	@ 0x80
 800091a:	01db      	lsls	r3, r3, #7
 800091c:	4822      	ldr	r0, [pc, #136]	@ (80009a8 <Locatexy+0x148>)
 800091e:	2200      	movs	r2, #0
 8000920:	0019      	movs	r1, r3
 8000922:	f001 f840 	bl	80019a6 <HAL_GPIO_WritePin>
 //_nop_();
	 HAL_Delay(10);
 8000926:	200a      	movs	r0, #10
 8000928:	f000 fcd0 	bl	80012cc <HAL_Delay>

	 for (unsigned char line1 = 0XC0; line1< 8; line1++) {
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	22c0      	movs	r2, #192	@ 0xc0
 8000930:	701a      	strb	r2, [r3, #0]
 8000932:	e009      	b.n	8000948 <Locatexy+0xe8>
	             Z = 0xC0 + line1; }// Increment line address from 0xC0 to 0xC7
 8000934:	1dbb      	adds	r3, r7, #6
 8000936:	1d3a      	adds	r2, r7, #4
 8000938:	7812      	ldrb	r2, [r2, #0]
 800093a:	3a40      	subs	r2, #64	@ 0x40
 800093c:	701a      	strb	r2, [r3, #0]
	 for (unsigned char line1 = 0XC0; line1< 8; line1++) {
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	781a      	ldrb	r2, [r3, #0]
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	3201      	adds	r2, #1
 8000946:	701a      	strb	r2, [r3, #0]
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b07      	cmp	r3, #7
 800094e:	d9f1      	bls.n	8000934 <Locatexy+0xd4>

	 HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin, GPIO_PIN_RESET);
 8000950:	2380      	movs	r3, #128	@ 0x80
 8000952:	021b      	lsls	r3, r3, #8
 8000954:	4814      	ldr	r0, [pc, #80]	@ (80009a8 <Locatexy+0x148>)
 8000956:	2200      	movs	r2, #0
 8000958:	0019      	movs	r1, r3
 800095a:	f001 f824 	bl	80019a6 <HAL_GPIO_WritePin>
	 // RW = 0;
	  HAL_GPIO_WritePin(GPIOA, LCD_RW_Pin, GPIO_PIN_RESET);
 800095e:	23a0      	movs	r3, #160	@ 0xa0
 8000960:	05db      	lsls	r3, r3, #23
 8000962:	2200      	movs	r2, #0
 8000964:	2101      	movs	r1, #1
 8000966:	0018      	movs	r0, r3
 8000968:	f001 f81d 	bl	80019a6 <HAL_GPIO_WritePin>
	 // P1 = y;
	  Printdata(Z);
 800096c:	1dbb      	adds	r3, r7, #6
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	0018      	movs	r0, r3
 8000972:	f7ff fe2e 	bl	80005d2 <Printdata>
	 // E  = 1;
	  HAL_GPIO_WritePin(GPIOC,LCD_E_Pin , GPIO_PIN_SET);
 8000976:	2380      	movs	r3, #128	@ 0x80
 8000978:	01db      	lsls	r3, r3, #7
 800097a:	480b      	ldr	r0, [pc, #44]	@ (80009a8 <Locatexy+0x148>)
 800097c:	2201      	movs	r2, #1
 800097e:	0019      	movs	r1, r3
 8000980:	f001 f811 	bl	80019a6 <HAL_GPIO_WritePin>
	  //_nop_();
	  HAL_Delay(100);
 8000984:	2064      	movs	r0, #100	@ 0x64
 8000986:	f000 fca1 	bl	80012cc <HAL_Delay>
	  //E  = 0;
	  HAL_GPIO_WritePin(GPIOC, LCD_E_Pin, GPIO_PIN_RESET);
 800098a:	2380      	movs	r3, #128	@ 0x80
 800098c:	01db      	lsls	r3, r3, #7
 800098e:	4806      	ldr	r0, [pc, #24]	@ (80009a8 <Locatexy+0x148>)
 8000990:	2200      	movs	r2, #0
 8000992:	0019      	movs	r1, r3
 8000994:	f001 f807 	bl	80019a6 <HAL_GPIO_WritePin>
	  //_nop_();
	  HAL_Delay(100);
 8000998:	2064      	movs	r0, #100	@ 0x64
 800099a:	f000 fc97 	bl	80012cc <HAL_Delay>

}
 800099e:	46c0      	nop			@ (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b002      	add	sp, #8
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	46c0      	nop			@ (mov r8, r8)
 80009a8:	50000800 	.word	0x50000800

080009ac <WriteCommandL>:
////////////////////////////////////////////////////////////////////
void WriteCommandL( unsigned char CommandByte )
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	0002      	movs	r2, r0
 80009b4:	1dfb      	adds	r3, r7, #7
 80009b6:	701a      	strb	r2, [r3, #0]
 BusyL();
 80009b8:	f7ff febe 	bl	8000738 <BusyL>
// P1 = CommandByte;
 Printdata(CommandByte );
 80009bc:	1dfb      	adds	r3, r7, #7
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	0018      	movs	r0, r3
 80009c2:	f7ff fe06 	bl	80005d2 <Printdata>
// RS = 0;
 HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin, GPIO_PIN_RESET);
 80009c6:	2380      	movs	r3, #128	@ 0x80
 80009c8:	021b      	lsls	r3, r3, #8
 80009ca:	4814      	ldr	r0, [pc, #80]	@ (8000a1c <WriteCommandL+0x70>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	0019      	movs	r1, r3
 80009d0:	f000 ffe9 	bl	80019a6 <HAL_GPIO_WritePin>
// RW = 0;
 HAL_GPIO_WritePin(GPIOA, LCD_RW_Pin, GPIO_PIN_RESET);
 80009d4:	23a0      	movs	r3, #160	@ 0xa0
 80009d6:	05db      	lsls	r3, r3, #23
 80009d8:	2200      	movs	r2, #0
 80009da:	2101      	movs	r1, #1
 80009dc:	0018      	movs	r0, r3
 80009de:	f000 ffe2 	bl	80019a6 <HAL_GPIO_WritePin>
// E  = 1;
 HAL_GPIO_WritePin(GPIOC,LCD_E_Pin , GPIO_PIN_SET);
 80009e2:	2380      	movs	r3, #128	@ 0x80
 80009e4:	01db      	lsls	r3, r3, #7
 80009e6:	480d      	ldr	r0, [pc, #52]	@ (8000a1c <WriteCommandL+0x70>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	0019      	movs	r1, r3
 80009ec:	f000 ffdb 	bl	80019a6 <HAL_GPIO_WritePin>
// _nop_();
 HAL_Delay(1000);
 80009f0:	23fa      	movs	r3, #250	@ 0xfa
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	0018      	movs	r0, r3
 80009f6:	f000 fc69 	bl	80012cc <HAL_Delay>
// E  = 0;
 HAL_GPIO_WritePin(GPIOC, LCD_E_Pin, GPIO_PIN_RESET);
 80009fa:	2380      	movs	r3, #128	@ 0x80
 80009fc:	01db      	lsls	r3, r3, #7
 80009fe:	4807      	ldr	r0, [pc, #28]	@ (8000a1c <WriteCommandL+0x70>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	0019      	movs	r1, r3
 8000a04:	f000 ffcf 	bl	80019a6 <HAL_GPIO_WritePin>
// _nop_();
 HAL_Delay(1000);
 8000a08:	23fa      	movs	r3, #250	@ 0xfa
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f000 fc5d 	bl	80012cc <HAL_Delay>

}
 8000a12:	46c0      	nop			@ (mov r8, r8)
 8000a14:	46bd      	mov	sp, r7
 8000a16:	b002      	add	sp, #8
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	46c0      	nop			@ (mov r8, r8)
 8000a1c:	50000800 	.word	0x50000800

08000a20 <WriteCommandR>:
//////////////////////////////////////////////////////////////////
void WriteCommandR( unsigned char CommandByte )
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	0002      	movs	r2, r0
 8000a28:	1dfb      	adds	r3, r7, #7
 8000a2a:	701a      	strb	r2, [r3, #0]
 BusyR();
 8000a2c:	f7ff fece 	bl	80007cc <BusyR>
// P1 = CommandByte;
 Printdata(CommandByte );
 8000a30:	1dfb      	adds	r3, r7, #7
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	0018      	movs	r0, r3
 8000a36:	f7ff fdcc 	bl	80005d2 <Printdata>
// E  = 1;
// _nop_();
// E  = 0;
// _nop_();
 // RS = 0;
  HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin, GPIO_PIN_RESET);
 8000a3a:	2380      	movs	r3, #128	@ 0x80
 8000a3c:	021b      	lsls	r3, r3, #8
 8000a3e:	4814      	ldr	r0, [pc, #80]	@ (8000a90 <WriteCommandR+0x70>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	0019      	movs	r1, r3
 8000a44:	f000 ffaf 	bl	80019a6 <HAL_GPIO_WritePin>
 // RW = 0;
  HAL_GPIO_WritePin(GPIOA, LCD_RW_Pin, GPIO_PIN_RESET);
 8000a48:	23a0      	movs	r3, #160	@ 0xa0
 8000a4a:	05db      	lsls	r3, r3, #23
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2101      	movs	r1, #1
 8000a50:	0018      	movs	r0, r3
 8000a52:	f000 ffa8 	bl	80019a6 <HAL_GPIO_WritePin>
 // E  = 1;
  HAL_GPIO_WritePin(GPIOC,LCD_E_Pin , GPIO_PIN_SET);
 8000a56:	2380      	movs	r3, #128	@ 0x80
 8000a58:	01db      	lsls	r3, r3, #7
 8000a5a:	480d      	ldr	r0, [pc, #52]	@ (8000a90 <WriteCommandR+0x70>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	0019      	movs	r1, r3
 8000a60:	f000 ffa1 	bl	80019a6 <HAL_GPIO_WritePin>
 // _nop_();
  HAL_Delay(1000);
 8000a64:	23fa      	movs	r3, #250	@ 0xfa
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f000 fc2f 	bl	80012cc <HAL_Delay>
 // E  = 0;
  HAL_GPIO_WritePin(GPIOC, LCD_E_Pin, GPIO_PIN_RESET);
 8000a6e:	2380      	movs	r3, #128	@ 0x80
 8000a70:	01db      	lsls	r3, r3, #7
 8000a72:	4807      	ldr	r0, [pc, #28]	@ (8000a90 <WriteCommandR+0x70>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	0019      	movs	r1, r3
 8000a78:	f000 ff95 	bl	80019a6 <HAL_GPIO_WritePin>
 // _nop_();
  HAL_Delay(1000);
 8000a7c:	23fa      	movs	r3, #250	@ 0xfa
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	0018      	movs	r0, r3
 8000a82:	f000 fc23 	bl	80012cc <HAL_Delay>
}
 8000a86:	46c0      	nop			@ (mov r8, r8)
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	b002      	add	sp, #8
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	46c0      	nop			@ (mov r8, r8)
 8000a90:	50000800 	.word	0x50000800

08000a94 <WriteData>:
//// CS2=0;
// return DataByte;
//}
///////////////////////////////////////////////////////////////////////////////////////
void WriteData( unsigned char DataByte )
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	0002      	movs	r2, r0
 8000a9c:	1dfb      	adds	r3, r7, #7
 8000a9e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, LCD_CS1_Pin, GPIO_PIN_SET);
 8000aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b18 <WriteData+0x84>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	2140      	movs	r1, #64	@ 0x40
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f000 ff7d 	bl	80019a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LCD_CS2_Pin, GPIO_PIN_RESET);
 8000aac:	4b1b      	ldr	r3, [pc, #108]	@ (8000b1c <WriteData+0x88>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2104      	movs	r1, #4
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f000 ff77 	bl	80019a6 <HAL_GPIO_WritePin>

 Locatexy();
 8000ab8:	f7ff fed2 	bl	8000860 <Locatexy>
// RS = 1;
 HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin, GPIO_PIN_SET);
 8000abc:	2380      	movs	r3, #128	@ 0x80
 8000abe:	021b      	lsls	r3, r3, #8
 8000ac0:	4815      	ldr	r0, [pc, #84]	@ (8000b18 <WriteData+0x84>)
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	0019      	movs	r1, r3
 8000ac6:	f000 ff6e 	bl	80019a6 <HAL_GPIO_WritePin>
// RW = 0;
 HAL_GPIO_WritePin(GPIOA, LCD_RW_Pin, GPIO_PIN_RESET);
 8000aca:	23a0      	movs	r3, #160	@ 0xa0
 8000acc:	05db      	lsls	r3, r3, #23
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f000 ff67 	bl	80019a6 <HAL_GPIO_WritePin>
// P1 = DataByte;
 ReadDataFromPins();
 8000ad8:	f7ff fc8c 	bl	80003f4 <ReadDataFromPins>
// E  = 1;
 HAL_GPIO_WritePin(GPIOA, LCD_E_Pin, GPIO_PIN_SET);
 8000adc:	2380      	movs	r3, #128	@ 0x80
 8000ade:	01d9      	lsls	r1, r3, #7
 8000ae0:	23a0      	movs	r3, #160	@ 0xa0
 8000ae2:	05db      	lsls	r3, r3, #23
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f000 ff5d 	bl	80019a6 <HAL_GPIO_WritePin>
// _nop_();
 HAL_Delay(1000);
 8000aec:	23fa      	movs	r3, #250	@ 0xfa
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	0018      	movs	r0, r3
 8000af2:	f000 fbeb 	bl	80012cc <HAL_Delay>
 //E  = 0;
 HAL_GPIO_WritePin(GPIOA, LCD_E_Pin, GPIO_PIN_RESET);
 8000af6:	2380      	movs	r3, #128	@ 0x80
 8000af8:	01d9      	lsls	r1, r3, #7
 8000afa:	23a0      	movs	r3, #160	@ 0xa0
 8000afc:	05db      	lsls	r3, r3, #23
 8000afe:	2200      	movs	r2, #0
 8000b00:	0018      	movs	r0, r3
 8000b02:	f000 ff50 	bl	80019a6 <HAL_GPIO_WritePin>

 //_nop_();
 HAL_Delay(1000);
 8000b06:	23fa      	movs	r3, #250	@ 0xfa
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f000 fbde 	bl	80012cc <HAL_Delay>
// HAL_GPIO_WritePin(GPIOC, LCD_CS1_Pin, GPIO_PIN_SET);

  //CS2= 0;
//  HAL_GPIO_WritePin(GPIOB, LCD_CS2_Pin, GPIO_PIN_RESET);
 // CS2=0;
}
 8000b10:	46c0      	nop			@ (mov r8, r8)
 8000b12:	46bd      	mov	sp, r7
 8000b14:	b002      	add	sp, #8
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	50000800 	.word	0x50000800
 8000b1c:	50000400 	.word	0x50000400

08000b20 <LcmInit>:
  for(Col=0X40;Col<0X3F;Col++)
   WriteData(0);
}

void LcmInit( void )
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	 WriteCommandL(0x3e); //DISPALY off
 8000b24:	203e      	movs	r0, #62	@ 0x3e
 8000b26:	f7ff ff41 	bl	80009ac <WriteCommandL>
	 WriteCommandR(0x3e);
 8000b2a:	203e      	movs	r0, #62	@ 0x3e
 8000b2c:	f7ff ff78 	bl	8000a20 <WriteCommandR>
 WriteCommandL(0x3f); //DISPALY ON
 8000b30:	203f      	movs	r0, #63	@ 0x3f
 8000b32:	f7ff ff3b 	bl	80009ac <WriteCommandL>
 WriteCommandR(0x3f);
 8000b36:	203f      	movs	r0, #63	@ 0x3f
 8000b38:	f7ff ff72 	bl	8000a20 <WriteCommandR>

 WriteCommandL(0xc0); //SET START ADDRESS
 8000b3c:	20c0      	movs	r0, #192	@ 0xc0
 8000b3e:	f7ff ff35 	bl	80009ac <WriteCommandL>
 WriteCommandR(0xc0);
 8000b42:	20c0      	movs	r0, #192	@ 0xc0
 8000b44:	f7ff ff6c 	bl	8000a20 <WriteCommandR>

 WriteCommandL(0x3f); //DISPLAY ON
 8000b48:	203f      	movs	r0, #63	@ 0x3f
 8000b4a:	f7ff ff2f 	bl	80009ac <WriteCommandL>
 WriteCommandR(0x3f);
 8000b4e:	203f      	movs	r0, #63	@ 0x3f
 8000b50:	f7ff ff66 	bl	8000a20 <WriteCommandR>

}
 8000b54:	46c0      	nop			@ (mov r8, r8)
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <LcmPutDots>:
void LcmPutDots( unsigned char DotByte,unsigned char DotByte1 )
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	0002      	movs	r2, r0
 8000b64:	1dfb      	adds	r3, r7, #7
 8000b66:	701a      	strb	r2, [r3, #0]
 8000b68:	1dbb      	adds	r3, r7, #6
 8000b6a:	1c0a      	adds	r2, r1, #0
 8000b6c:	701a      	strb	r2, [r3, #0]
 Page = 0xB8;
 8000b6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000bdc <LcmPutDots+0x80>)
 8000b70:	22b8      	movs	r2, #184	@ 0xb8
 8000b72:	701a      	strb	r2, [r3, #0]
 Col  = 0x40;
 8000b74:	4b1a      	ldr	r3, [pc, #104]	@ (8000be0 <LcmPutDots+0x84>)
 8000b76:	2240      	movs	r2, #64	@ 0x40
 8000b78:	701a      	strb	r2, [r3, #0]
 for(Page=0XB8;Page<0XBF;Page++)
 8000b7a:	4b18      	ldr	r3, [pc, #96]	@ (8000bdc <LcmPutDots+0x80>)
 8000b7c:	22b8      	movs	r2, #184	@ 0xb8
 8000b7e:	701a      	strb	r2, [r3, #0]
 8000b80:	e023      	b.n	8000bca <LcmPutDots+0x6e>
 {
  for(Col=0X40;Col<0X3F;Col++)
 8000b82:	4b17      	ldr	r3, [pc, #92]	@ (8000be0 <LcmPutDots+0x84>)
 8000b84:	2240      	movs	r2, #64	@ 0x40
 8000b86:	701a      	strb	r2, [r3, #0]
 8000b88:	e015      	b.n	8000bb6 <LcmPutDots+0x5a>
  {
   WriteData( DotByte );
 8000b8a:	1dfb      	adds	r3, r7, #7
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f7ff ff80 	bl	8000a94 <WriteData>
   Col++;
 8000b94:	4b12      	ldr	r3, [pc, #72]	@ (8000be0 <LcmPutDots+0x84>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	4b10      	ldr	r3, [pc, #64]	@ (8000be0 <LcmPutDots+0x84>)
 8000b9e:	701a      	strb	r2, [r3, #0]
   WriteData( DotByte1 );
 8000ba0:	1dbb      	adds	r3, r7, #6
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f7ff ff75 	bl	8000a94 <WriteData>
  for(Col=0X40;Col<0X3F;Col++)
 8000baa:	4b0d      	ldr	r3, [pc, #52]	@ (8000be0 <LcmPutDots+0x84>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000be0 <LcmPutDots+0x84>)
 8000bb4:	701a      	strb	r2, [r3, #0]
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000be0 <LcmPutDots+0x84>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b3e      	cmp	r3, #62	@ 0x3e
 8000bbc:	d9e5      	bls.n	8000b8a <LcmPutDots+0x2e>
 for(Page=0XB8;Page<0XBF;Page++)
 8000bbe:	4b07      	ldr	r3, [pc, #28]	@ (8000bdc <LcmPutDots+0x80>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4b05      	ldr	r3, [pc, #20]	@ (8000bdc <LcmPutDots+0x80>)
 8000bc8:	701a      	strb	r2, [r3, #0]
 8000bca:	4b04      	ldr	r3, [pc, #16]	@ (8000bdc <LcmPutDots+0x80>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	2bbe      	cmp	r3, #190	@ 0xbe
 8000bd0:	d9d7      	bls.n	8000b82 <LcmPutDots+0x26>
  }

 }
}
 8000bd2:	46c0      	nop			@ (mov r8, r8)
 8000bd4:	46c0      	nop			@ (mov r8, r8)
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	b002      	add	sp, #8
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000150 	.word	0x20000150
 8000be0:	20000151 	.word	0x20000151

08000be4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000be8:	f000 faf3 	bl	80011d2 <HAL_Init>
 //HAL_GPIO_WritePin(GPIOA, LED_K_Pin, GPIO_PIN_SET);
 // HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin, GPIO_PIN_SET);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bec:	f000 f843 	bl	8000c76 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf0:	f000 f908 	bl	8000e04 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000bf4:	f000 f884 	bl	8000d00 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000bf8:	f000 f8d0 	bl	8000d9c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, LED_K_Pin, GPIO_PIN_SET);
 8000bfc:	2380      	movs	r3, #128	@ 0x80
 8000bfe:	0099      	lsls	r1, r3, #2
 8000c00:	23a0      	movs	r3, #160	@ 0xa0
 8000c02:	05db      	lsls	r3, r3, #23
 8000c04:	2201      	movs	r2, #1
 8000c06:	0018      	movs	r0, r3
 8000c08:	f000 fecd 	bl	80019a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin, GPIO_PIN_SET);
 8000c0c:	23a0      	movs	r3, #160	@ 0xa0
 8000c0e:	05db      	lsls	r3, r3, #23
 8000c10:	2201      	movs	r2, #1
 8000c12:	2102      	movs	r1, #2
 8000c14:	0018      	movs	r0, r3
 8000c16:	f000 fec6 	bl	80019a6 <HAL_GPIO_WritePin>
  LcmInit();
 8000c1a:	f7ff ff81 	bl	8000b20 <LcmInit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 // HAL_GPIO_WritePin(GPIOA, LED_K_Pin, GPIO_PIN_SET);
	  LcmPutDots(0x55,0xaa);
 8000c1e:	21aa      	movs	r1, #170	@ 0xaa
 8000c20:	2055      	movs	r0, #85	@ 0x55
 8000c22:	f7ff ff9b 	bl	8000b5c <LcmPutDots>
	 //  Delay(600);
	  HAL_Delay(100);
 8000c26:	2064      	movs	r0, #100	@ 0x64
 8000c28:	f000 fb50 	bl	80012cc <HAL_Delay>
	    LcmPutDots(0xaa,0x55);
 8000c2c:	2155      	movs	r1, #85	@ 0x55
 8000c2e:	20aa      	movs	r0, #170	@ 0xaa
 8000c30:	f7ff ff94 	bl	8000b5c <LcmPutDots>
	   // Delay(600);
	    HAL_Delay(100);
 8000c34:	2064      	movs	r0, #100	@ 0x64
 8000c36:	f000 fb49 	bl	80012cc <HAL_Delay>
	   LcmPutDots(0x55,0x55);
 8000c3a:	2155      	movs	r1, #85	@ 0x55
 8000c3c:	2055      	movs	r0, #85	@ 0x55
 8000c3e:	f7ff ff8d 	bl	8000b5c <LcmPutDots>
	 //  Delay(600);
	   HAL_Delay(100);
 8000c42:	2064      	movs	r0, #100	@ 0x64
 8000c44:	f000 fb42 	bl	80012cc <HAL_Delay>
	    LcmPutDots(0xaa,0xaa);
 8000c48:	21aa      	movs	r1, #170	@ 0xaa
 8000c4a:	20aa      	movs	r0, #170	@ 0xaa
 8000c4c:	f7ff ff86 	bl	8000b5c <LcmPutDots>
	  //  Delay(600);
	    HAL_Delay(100);
 8000c50:	2064      	movs	r0, #100	@ 0x64
 8000c52:	f000 fb3b 	bl	80012cc <HAL_Delay>

	    LcmPutDots(0xff,0x00);
 8000c56:	2100      	movs	r1, #0
 8000c58:	20ff      	movs	r0, #255	@ 0xff
 8000c5a:	f7ff ff7f 	bl	8000b5c <LcmPutDots>
	   // Delay(600);
	    HAL_Delay(100);
 8000c5e:	2064      	movs	r0, #100	@ 0x64
 8000c60:	f000 fb34 	bl	80012cc <HAL_Delay>
	    LcmPutDots(0x00,0xff);
 8000c64:	21ff      	movs	r1, #255	@ 0xff
 8000c66:	2000      	movs	r0, #0
 8000c68:	f7ff ff78 	bl	8000b5c <LcmPutDots>
	   // Delay(600);
	    HAL_Delay(100);
 8000c6c:	2064      	movs	r0, #100	@ 0x64
 8000c6e:	f000 fb2d 	bl	80012cc <HAL_Delay>
	  LcmPutDots(0x55,0xaa);
 8000c72:	46c0      	nop			@ (mov r8, r8)
 8000c74:	e7d3      	b.n	8000c1e <main+0x3a>

08000c76 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c76:	b590      	push	{r4, r7, lr}
 8000c78:	b08d      	sub	sp, #52	@ 0x34
 8000c7a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c7c:	2414      	movs	r4, #20
 8000c7e:	193b      	adds	r3, r7, r4
 8000c80:	0018      	movs	r0, r3
 8000c82:	231c      	movs	r3, #28
 8000c84:	001a      	movs	r2, r3
 8000c86:	2100      	movs	r1, #0
 8000c88:	f002 fbea 	bl	8003460 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c8c:	003b      	movs	r3, r7
 8000c8e:	0018      	movs	r0, r3
 8000c90:	2314      	movs	r3, #20
 8000c92:	001a      	movs	r2, r3
 8000c94:	2100      	movs	r1, #0
 8000c96:	f002 fbe3 	bl	8003460 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c9a:	193b      	adds	r3, r7, r4
 8000c9c:	2202      	movs	r2, #2
 8000c9e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ca0:	193b      	adds	r3, r7, r4
 8000ca2:	2280      	movs	r2, #128	@ 0x80
 8000ca4:	0052      	lsls	r2, r2, #1
 8000ca6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 8000ca8:	193b      	adds	r3, r7, r4
 8000caa:	2280      	movs	r2, #128	@ 0x80
 8000cac:	0152      	lsls	r2, r2, #5
 8000cae:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cb0:	193b      	adds	r3, r7, r4
 8000cb2:	2240      	movs	r2, #64	@ 0x40
 8000cb4:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb6:	193b      	adds	r3, r7, r4
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f000 fe91 	bl	80019e0 <HAL_RCC_OscConfig>
 8000cbe:	1e03      	subs	r3, r0, #0
 8000cc0:	d001      	beq.n	8000cc6 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000cc2:	f000 f94b 	bl	8000f5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc6:	003b      	movs	r3, r7
 8000cc8:	2207      	movs	r2, #7
 8000cca:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ccc:	003b      	movs	r3, r7
 8000cce:	2200      	movs	r2, #0
 8000cd0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000cd2:	003b      	movs	r3, r7
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000cd8:	003b      	movs	r3, r7
 8000cda:	2200      	movs	r2, #0
 8000cdc:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000cde:	003b      	movs	r3, r7
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ce4:	003b      	movs	r3, r7
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f001 f85d 	bl	8001da8 <HAL_RCC_ClockConfig>
 8000cee:	1e03      	subs	r3, r0, #0
 8000cf0:	d001      	beq.n	8000cf6 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000cf2:	f000 f933 	bl	8000f5c <Error_Handler>
  }
}
 8000cf6:	46c0      	nop			@ (mov r8, r8)
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b00d      	add	sp, #52	@ 0x34
 8000cfc:	bd90      	pop	{r4, r7, pc}
	...

08000d00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d04:	4b23      	ldr	r3, [pc, #140]	@ (8000d94 <MX_USART1_UART_Init+0x94>)
 8000d06:	4a24      	ldr	r2, [pc, #144]	@ (8000d98 <MX_USART1_UART_Init+0x98>)
 8000d08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d0a:	4b22      	ldr	r3, [pc, #136]	@ (8000d94 <MX_USART1_UART_Init+0x94>)
 8000d0c:	22e1      	movs	r2, #225	@ 0xe1
 8000d0e:	0252      	lsls	r2, r2, #9
 8000d10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d12:	4b20      	ldr	r3, [pc, #128]	@ (8000d94 <MX_USART1_UART_Init+0x94>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d18:	4b1e      	ldr	r3, [pc, #120]	@ (8000d94 <MX_USART1_UART_Init+0x94>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000d94 <MX_USART1_UART_Init+0x94>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d24:	4b1b      	ldr	r3, [pc, #108]	@ (8000d94 <MX_USART1_UART_Init+0x94>)
 8000d26:	220c      	movs	r2, #12
 8000d28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d94 <MX_USART1_UART_Init+0x94>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d30:	4b18      	ldr	r3, [pc, #96]	@ (8000d94 <MX_USART1_UART_Init+0x94>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d36:	4b17      	ldr	r3, [pc, #92]	@ (8000d94 <MX_USART1_UART_Init+0x94>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d3c:	4b15      	ldr	r3, [pc, #84]	@ (8000d94 <MX_USART1_UART_Init+0x94>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d42:	4b14      	ldr	r3, [pc, #80]	@ (8000d94 <MX_USART1_UART_Init+0x94>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d48:	4b12      	ldr	r3, [pc, #72]	@ (8000d94 <MX_USART1_UART_Init+0x94>)
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f001 faa8 	bl	80022a0 <HAL_UART_Init>
 8000d50:	1e03      	subs	r3, r0, #0
 8000d52:	d001      	beq.n	8000d58 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d54:	f000 f902 	bl	8000f5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d58:	4b0e      	ldr	r3, [pc, #56]	@ (8000d94 <MX_USART1_UART_Init+0x94>)
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f002 fa9f 	bl	80032a0 <HAL_UARTEx_SetTxFifoThreshold>
 8000d62:	1e03      	subs	r3, r0, #0
 8000d64:	d001      	beq.n	8000d6a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000d66:	f000 f8f9 	bl	8000f5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d94 <MX_USART1_UART_Init+0x94>)
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f002 fad6 	bl	8003320 <HAL_UARTEx_SetRxFifoThreshold>
 8000d74:	1e03      	subs	r3, r0, #0
 8000d76:	d001      	beq.n	8000d7c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000d78:	f000 f8f0 	bl	8000f5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d7c:	4b05      	ldr	r3, [pc, #20]	@ (8000d94 <MX_USART1_UART_Init+0x94>)
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f002 fa54 	bl	800322c <HAL_UARTEx_DisableFifoMode>
 8000d84:	1e03      	subs	r3, r0, #0
 8000d86:	d001      	beq.n	8000d8c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000d88:	f000 f8e8 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d8c:	46c0      	nop			@ (mov r8, r8)
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	46c0      	nop			@ (mov r8, r8)
 8000d94:	20000028 	.word	0x20000028
 8000d98:	40013800 	.word	0x40013800

08000d9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000da0:	4b16      	ldr	r3, [pc, #88]	@ (8000dfc <MX_USART2_UART_Init+0x60>)
 8000da2:	4a17      	ldr	r2, [pc, #92]	@ (8000e00 <MX_USART2_UART_Init+0x64>)
 8000da4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000da6:	4b15      	ldr	r3, [pc, #84]	@ (8000dfc <MX_USART2_UART_Init+0x60>)
 8000da8:	22e1      	movs	r2, #225	@ 0xe1
 8000daa:	0252      	lsls	r2, r2, #9
 8000dac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dae:	4b13      	ldr	r3, [pc, #76]	@ (8000dfc <MX_USART2_UART_Init+0x60>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000db4:	4b11      	ldr	r3, [pc, #68]	@ (8000dfc <MX_USART2_UART_Init+0x60>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dba:	4b10      	ldr	r3, [pc, #64]	@ (8000dfc <MX_USART2_UART_Init+0x60>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000dfc <MX_USART2_UART_Init+0x60>)
 8000dc2:	220c      	movs	r2, #12
 8000dc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000dfc <MX_USART2_UART_Init+0x60>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000dfc <MX_USART2_UART_Init+0x60>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dfc <MX_USART2_UART_Init+0x60>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dd8:	4b08      	ldr	r3, [pc, #32]	@ (8000dfc <MX_USART2_UART_Init+0x60>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dde:	4b07      	ldr	r3, [pc, #28]	@ (8000dfc <MX_USART2_UART_Init+0x60>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000de4:	4b05      	ldr	r3, [pc, #20]	@ (8000dfc <MX_USART2_UART_Init+0x60>)
 8000de6:	0018      	movs	r0, r3
 8000de8:	f001 fa5a 	bl	80022a0 <HAL_UART_Init>
 8000dec:	1e03      	subs	r3, r0, #0
 8000dee:	d001      	beq.n	8000df4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000df0:	f000 f8b4 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000df4:	46c0      	nop			@ (mov r8, r8)
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	46c0      	nop			@ (mov r8, r8)
 8000dfc:	200000bc 	.word	0x200000bc
 8000e00:	40004400 	.word	0x40004400

08000e04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e04:	b590      	push	{r4, r7, lr}
 8000e06:	b089      	sub	sp, #36	@ 0x24
 8000e08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0a:	240c      	movs	r4, #12
 8000e0c:	193b      	adds	r3, r7, r4
 8000e0e:	0018      	movs	r0, r3
 8000e10:	2314      	movs	r3, #20
 8000e12:	001a      	movs	r2, r3
 8000e14:	2100      	movs	r1, #0
 8000e16:	f002 fb23 	bl	8003460 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1a:	4b49      	ldr	r3, [pc, #292]	@ (8000f40 <MX_GPIO_Init+0x13c>)
 8000e1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e1e:	4b48      	ldr	r3, [pc, #288]	@ (8000f40 <MX_GPIO_Init+0x13c>)
 8000e20:	2102      	movs	r1, #2
 8000e22:	430a      	orrs	r2, r1
 8000e24:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e26:	4b46      	ldr	r3, [pc, #280]	@ (8000f40 <MX_GPIO_Init+0x13c>)
 8000e28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e32:	4b43      	ldr	r3, [pc, #268]	@ (8000f40 <MX_GPIO_Init+0x13c>)
 8000e34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e36:	4b42      	ldr	r3, [pc, #264]	@ (8000f40 <MX_GPIO_Init+0x13c>)
 8000e38:	2104      	movs	r1, #4
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e3e:	4b40      	ldr	r3, [pc, #256]	@ (8000f40 <MX_GPIO_Init+0x13c>)
 8000e40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e42:	2204      	movs	r2, #4
 8000e44:	4013      	ands	r3, r2
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f40 <MX_GPIO_Init+0x13c>)
 8000e4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e4e:	4b3c      	ldr	r3, [pc, #240]	@ (8000f40 <MX_GPIO_Init+0x13c>)
 8000e50:	2101      	movs	r1, #1
 8000e52:	430a      	orrs	r2, r1
 8000e54:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e56:	4b3a      	ldr	r3, [pc, #232]	@ (8000f40 <MX_GPIO_Init+0x13c>)
 8000e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	603b      	str	r3, [r7, #0]
 8000e60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_K_Pin|DISP_EN_Pin|LCD_CS2_Pin, GPIO_PIN_RESET);
 8000e62:	4938      	ldr	r1, [pc, #224]	@ (8000f44 <MX_GPIO_Init+0x140>)
 8000e64:	4b38      	ldr	r3, [pc, #224]	@ (8000f48 <MX_GPIO_Init+0x144>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f000 fd9c 	bl	80019a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_E_Pin|LCD_RS_Pin|LCD_CS1_Pin, GPIO_PIN_RESET);
 8000e6e:	4937      	ldr	r1, [pc, #220]	@ (8000f4c <MX_GPIO_Init+0x148>)
 8000e70:	4b37      	ldr	r3, [pc, #220]	@ (8000f50 <MX_GPIO_Init+0x14c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	0018      	movs	r0, r3
 8000e76:	f000 fd96 	bl	80019a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RW_Pin|LCD_RESET_Pin|DB0_Pin|DB1_Pin
 8000e7a:	4936      	ldr	r1, [pc, #216]	@ (8000f54 <MX_GPIO_Init+0x150>)
 8000e7c:	23a0      	movs	r3, #160	@ 0xa0
 8000e7e:	05db      	lsls	r3, r3, #23
 8000e80:	2200      	movs	r2, #0
 8000e82:	0018      	movs	r0, r3
 8000e84:	f000 fd8f 	bl	80019a6 <HAL_GPIO_WritePin>
                          |DB2_Pin|DB3_Pin|DB4_Pin|DB5_Pin
                          |DB6_Pin|DB7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_K_Pin DISP_EN_Pin LCD_CS2_Pin */
  GPIO_InitStruct.Pin = LED_K_Pin|DISP_EN_Pin|LCD_CS2_Pin;
 8000e88:	193b      	adds	r3, r7, r4
 8000e8a:	4a2e      	ldr	r2, [pc, #184]	@ (8000f44 <MX_GPIO_Init+0x140>)
 8000e8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8e:	193b      	adds	r3, r7, r4
 8000e90:	2201      	movs	r2, #1
 8000e92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	193b      	adds	r3, r7, r4
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9a:	193b      	adds	r3, r7, r4
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea0:	193b      	adds	r3, r7, r4
 8000ea2:	4a29      	ldr	r2, [pc, #164]	@ (8000f48 <MX_GPIO_Init+0x144>)
 8000ea4:	0019      	movs	r1, r3
 8000ea6:	0010      	movs	r0, r2
 8000ea8:	f000 fbee 	bl	8001688 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_E_Pin LCD_RS_Pin LCD_CS1_Pin */
  GPIO_InitStruct.Pin = LCD_E_Pin|LCD_RS_Pin|LCD_CS1_Pin;
 8000eac:	193b      	adds	r3, r7, r4
 8000eae:	4a27      	ldr	r2, [pc, #156]	@ (8000f4c <MX_GPIO_Init+0x148>)
 8000eb0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb2:	193b      	adds	r3, r7, r4
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	193b      	adds	r3, r7, r4
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	193b      	adds	r3, r7, r4
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec4:	193b      	adds	r3, r7, r4
 8000ec6:	4a22      	ldr	r2, [pc, #136]	@ (8000f50 <MX_GPIO_Init+0x14c>)
 8000ec8:	0019      	movs	r1, r3
 8000eca:	0010      	movs	r0, r2
 8000ecc:	f000 fbdc 	bl	8001688 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RW_Pin LCD_RESET_Pin DB0_Pin DB1_Pin
                           DB2_Pin DB3_Pin DB4_Pin DB5_Pin
                           DB6_Pin DB7_Pin */
  GPIO_InitStruct.Pin = LCD_RW_Pin|LCD_RESET_Pin|DB0_Pin|DB1_Pin
 8000ed0:	193b      	adds	r3, r7, r4
 8000ed2:	4a20      	ldr	r2, [pc, #128]	@ (8000f54 <MX_GPIO_Init+0x150>)
 8000ed4:	601a      	str	r2, [r3, #0]
                          |DB2_Pin|DB3_Pin|DB4_Pin|DB5_Pin
                          |DB6_Pin|DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed6:	193b      	adds	r3, r7, r4
 8000ed8:	2201      	movs	r2, #1
 8000eda:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	193b      	adds	r3, r7, r4
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	193b      	adds	r3, r7, r4
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee8:	193a      	adds	r2, r7, r4
 8000eea:	23a0      	movs	r3, #160	@ 0xa0
 8000eec:	05db      	lsls	r3, r3, #23
 8000eee:	0011      	movs	r1, r2
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f000 fbc9 	bl	8001688 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_INTO_Pin */
  GPIO_InitStruct.Pin = DISP_INTO_Pin;
 8000ef6:	193b      	adds	r3, r7, r4
 8000ef8:	2201      	movs	r2, #1
 8000efa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000efc:	193b      	adds	r3, r7, r4
 8000efe:	4a16      	ldr	r2, [pc, #88]	@ (8000f58 <MX_GPIO_Init+0x154>)
 8000f00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	193b      	adds	r3, r7, r4
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DISP_INTO_GPIO_Port, &GPIO_InitStruct);
 8000f08:	193b      	adds	r3, r7, r4
 8000f0a:	4a0f      	ldr	r2, [pc, #60]	@ (8000f48 <MX_GPIO_Init+0x144>)
 8000f0c:	0019      	movs	r1, r3
 8000f0e:	0010      	movs	r0, r2
 8000f10:	f000 fbba 	bl	8001688 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW4_Pin SW3_Pin SW2_Pin SW1_Pin */
  GPIO_InitStruct.Pin = SW4_Pin|SW3_Pin|SW2_Pin|SW1_Pin;
 8000f14:	0021      	movs	r1, r4
 8000f16:	187b      	adds	r3, r7, r1
 8000f18:	229c      	movs	r2, #156	@ 0x9c
 8000f1a:	0052      	lsls	r2, r2, #1
 8000f1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1e:	187b      	adds	r3, r7, r1
 8000f20:	2200      	movs	r2, #0
 8000f22:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	187b      	adds	r3, r7, r1
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2a:	187b      	adds	r3, r7, r1
 8000f2c:	4a06      	ldr	r2, [pc, #24]	@ (8000f48 <MX_GPIO_Init+0x144>)
 8000f2e:	0019      	movs	r1, r3
 8000f30:	0010      	movs	r0, r2
 8000f32:	f000 fba9 	bl	8001688 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f36:	46c0      	nop			@ (mov r8, r8)
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	b009      	add	sp, #36	@ 0x24
 8000f3c:	bd90      	pop	{r4, r7, pc}
 8000f3e:	46c0      	nop			@ (mov r8, r8)
 8000f40:	40021000 	.word	0x40021000
 8000f44:	00000206 	.word	0x00000206
 8000f48:	50000400 	.word	0x50000400
 8000f4c:	0000c040 	.word	0x0000c040
 8000f50:	50000800 	.word	0x50000800
 8000f54:	00000ff3 	.word	0x00000ff3
 8000f58:	10110000 	.word	0x10110000

08000f5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f60:	b672      	cpsid	i
}
 8000f62:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f64:	46c0      	nop			@ (mov r8, r8)
 8000f66:	e7fd      	b.n	8000f64 <Error_Handler+0x8>

08000f68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fac <HAL_MspInit+0x44>)
 8000f70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f72:	4b0e      	ldr	r3, [pc, #56]	@ (8000fac <HAL_MspInit+0x44>)
 8000f74:	2101      	movs	r1, #1
 8000f76:	430a      	orrs	r2, r1
 8000f78:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fac <HAL_MspInit+0x44>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7e:	2201      	movs	r2, #1
 8000f80:	4013      	ands	r3, r2
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f86:	4b09      	ldr	r3, [pc, #36]	@ (8000fac <HAL_MspInit+0x44>)
 8000f88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f8a:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <HAL_MspInit+0x44>)
 8000f8c:	2180      	movs	r1, #128	@ 0x80
 8000f8e:	0549      	lsls	r1, r1, #21
 8000f90:	430a      	orrs	r2, r1
 8000f92:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f94:	4b05      	ldr	r3, [pc, #20]	@ (8000fac <HAL_MspInit+0x44>)
 8000f96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f98:	2380      	movs	r3, #128	@ 0x80
 8000f9a:	055b      	lsls	r3, r3, #21
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	603b      	str	r3, [r7, #0]
 8000fa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa2:	46c0      	nop			@ (mov r8, r8)
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	b002      	add	sp, #8
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	46c0      	nop			@ (mov r8, r8)
 8000fac:	40021000 	.word	0x40021000

08000fb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fb0:	b590      	push	{r4, r7, lr}
 8000fb2:	b093      	sub	sp, #76	@ 0x4c
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	2334      	movs	r3, #52	@ 0x34
 8000fba:	18fb      	adds	r3, r7, r3
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	2314      	movs	r3, #20
 8000fc0:	001a      	movs	r2, r3
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	f002 fa4c 	bl	8003460 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fc8:	2418      	movs	r4, #24
 8000fca:	193b      	adds	r3, r7, r4
 8000fcc:	0018      	movs	r0, r3
 8000fce:	231c      	movs	r3, #28
 8000fd0:	001a      	movs	r2, r3
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	f002 fa44 	bl	8003460 <memset>
  if(huart->Instance==USART1)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a45      	ldr	r2, [pc, #276]	@ (80010f4 <HAL_UART_MspInit+0x144>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d146      	bne.n	8001070 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000fe2:	193b      	adds	r3, r7, r4
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000fe8:	193b      	adds	r3, r7, r4
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fee:	193b      	adds	r3, r7, r4
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	f001 f869 	bl	80020c8 <HAL_RCCEx_PeriphCLKConfig>
 8000ff6:	1e03      	subs	r3, r0, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ffa:	f7ff ffaf 	bl	8000f5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ffe:	4b3e      	ldr	r3, [pc, #248]	@ (80010f8 <HAL_UART_MspInit+0x148>)
 8001000:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001002:	4b3d      	ldr	r3, [pc, #244]	@ (80010f8 <HAL_UART_MspInit+0x148>)
 8001004:	2180      	movs	r1, #128	@ 0x80
 8001006:	01c9      	lsls	r1, r1, #7
 8001008:	430a      	orrs	r2, r1
 800100a:	641a      	str	r2, [r3, #64]	@ 0x40
 800100c:	4b3a      	ldr	r3, [pc, #232]	@ (80010f8 <HAL_UART_MspInit+0x148>)
 800100e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001010:	2380      	movs	r3, #128	@ 0x80
 8001012:	01db      	lsls	r3, r3, #7
 8001014:	4013      	ands	r3, r2
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101a:	4b37      	ldr	r3, [pc, #220]	@ (80010f8 <HAL_UART_MspInit+0x148>)
 800101c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800101e:	4b36      	ldr	r3, [pc, #216]	@ (80010f8 <HAL_UART_MspInit+0x148>)
 8001020:	2102      	movs	r1, #2
 8001022:	430a      	orrs	r2, r1
 8001024:	635a      	str	r2, [r3, #52]	@ 0x34
 8001026:	4b34      	ldr	r3, [pc, #208]	@ (80010f8 <HAL_UART_MspInit+0x148>)
 8001028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800102a:	2202      	movs	r2, #2
 800102c:	4013      	ands	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001032:	2134      	movs	r1, #52	@ 0x34
 8001034:	187b      	adds	r3, r7, r1
 8001036:	22c0      	movs	r2, #192	@ 0xc0
 8001038:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	187b      	adds	r3, r7, r1
 800103c:	2202      	movs	r2, #2
 800103e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	187b      	adds	r3, r7, r1
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	187b      	adds	r3, r7, r1
 8001048:	2200      	movs	r2, #0
 800104a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 800104c:	187b      	adds	r3, r7, r1
 800104e:	2200      	movs	r2, #0
 8001050:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001052:	187b      	adds	r3, r7, r1
 8001054:	4a29      	ldr	r2, [pc, #164]	@ (80010fc <HAL_UART_MspInit+0x14c>)
 8001056:	0019      	movs	r1, r3
 8001058:	0010      	movs	r0, r2
 800105a:	f000 fb15 	bl	8001688 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2100      	movs	r1, #0
 8001062:	201b      	movs	r0, #27
 8001064:	f000 fa02 	bl	800146c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001068:	201b      	movs	r0, #27
 800106a:	f000 fa14 	bl	8001496 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800106e:	e03d      	b.n	80010ec <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a22      	ldr	r2, [pc, #136]	@ (8001100 <HAL_UART_MspInit+0x150>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d138      	bne.n	80010ec <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800107a:	4b1f      	ldr	r3, [pc, #124]	@ (80010f8 <HAL_UART_MspInit+0x148>)
 800107c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800107e:	4b1e      	ldr	r3, [pc, #120]	@ (80010f8 <HAL_UART_MspInit+0x148>)
 8001080:	2180      	movs	r1, #128	@ 0x80
 8001082:	0289      	lsls	r1, r1, #10
 8001084:	430a      	orrs	r2, r1
 8001086:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001088:	4b1b      	ldr	r3, [pc, #108]	@ (80010f8 <HAL_UART_MspInit+0x148>)
 800108a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800108c:	2380      	movs	r3, #128	@ 0x80
 800108e:	029b      	lsls	r3, r3, #10
 8001090:	4013      	ands	r3, r2
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	4b18      	ldr	r3, [pc, #96]	@ (80010f8 <HAL_UART_MspInit+0x148>)
 8001098:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800109a:	4b17      	ldr	r3, [pc, #92]	@ (80010f8 <HAL_UART_MspInit+0x148>)
 800109c:	2101      	movs	r1, #1
 800109e:	430a      	orrs	r2, r1
 80010a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80010a2:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <HAL_UART_MspInit+0x148>)
 80010a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010a6:	2201      	movs	r2, #1
 80010a8:	4013      	ands	r3, r2
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010ae:	2134      	movs	r1, #52	@ 0x34
 80010b0:	187b      	adds	r3, r7, r1
 80010b2:	220c      	movs	r2, #12
 80010b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	187b      	adds	r3, r7, r1
 80010b8:	2202      	movs	r2, #2
 80010ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	187b      	adds	r3, r7, r1
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	187b      	adds	r3, r7, r1
 80010c4:	2200      	movs	r2, #0
 80010c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80010c8:	187b      	adds	r3, r7, r1
 80010ca:	2201      	movs	r2, #1
 80010cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ce:	187a      	adds	r2, r7, r1
 80010d0:	23a0      	movs	r3, #160	@ 0xa0
 80010d2:	05db      	lsls	r3, r3, #23
 80010d4:	0011      	movs	r1, r2
 80010d6:	0018      	movs	r0, r3
 80010d8:	f000 fad6 	bl	8001688 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010dc:	2200      	movs	r2, #0
 80010de:	2100      	movs	r1, #0
 80010e0:	201c      	movs	r0, #28
 80010e2:	f000 f9c3 	bl	800146c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010e6:	201c      	movs	r0, #28
 80010e8:	f000 f9d5 	bl	8001496 <HAL_NVIC_EnableIRQ>
}
 80010ec:	46c0      	nop			@ (mov r8, r8)
 80010ee:	46bd      	mov	sp, r7
 80010f0:	b013      	add	sp, #76	@ 0x4c
 80010f2:	bd90      	pop	{r4, r7, pc}
 80010f4:	40013800 	.word	0x40013800
 80010f8:	40021000 	.word	0x40021000
 80010fc:	50000400 	.word	0x50000400
 8001100:	40004400 	.word	0x40004400

08001104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001108:	46c0      	nop			@ (mov r8, r8)
 800110a:	e7fd      	b.n	8001108 <NMI_Handler+0x4>

0800110c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001110:	46c0      	nop			@ (mov r8, r8)
 8001112:	e7fd      	b.n	8001110 <HardFault_Handler+0x4>

08001114 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001118:	46c0      	nop			@ (mov r8, r8)
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001122:	46c0      	nop			@ (mov r8, r8)
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800112c:	f000 f8b2 	bl	8001294 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001130:	46c0      	nop			@ (mov r8, r8)
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800113c:	4b03      	ldr	r3, [pc, #12]	@ (800114c <USART1_IRQHandler+0x14>)
 800113e:	0018      	movs	r0, r3
 8001140:	f001 f904 	bl	800234c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001144:	46c0      	nop			@ (mov r8, r8)
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	46c0      	nop			@ (mov r8, r8)
 800114c:	20000028 	.word	0x20000028

08001150 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 interrupt.
  */
void USART2_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001154:	4b03      	ldr	r3, [pc, #12]	@ (8001164 <USART2_IRQHandler+0x14>)
 8001156:	0018      	movs	r0, r3
 8001158:	f001 f8f8 	bl	800234c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800115c:	46c0      	nop			@ (mov r8, r8)
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	46c0      	nop			@ (mov r8, r8)
 8001164:	200000bc 	.word	0x200000bc

08001168 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800116c:	4b03      	ldr	r3, [pc, #12]	@ (800117c <SystemInit+0x14>)
 800116e:	2280      	movs	r2, #128	@ 0x80
 8001170:	0512      	lsls	r2, r2, #20
 8001172:	609a      	str	r2, [r3, #8]
#endif
}
 8001174:	46c0      	nop			@ (mov r8, r8)
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	46c0      	nop			@ (mov r8, r8)
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001180:	480d      	ldr	r0, [pc, #52]	@ (80011b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001182:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001184:	f7ff fff0 	bl	8001168 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001188:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800118a:	e003      	b.n	8001194 <LoopCopyDataInit>

0800118c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800118c:	4b0b      	ldr	r3, [pc, #44]	@ (80011bc <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800118e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001190:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001192:	3104      	adds	r1, #4

08001194 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001194:	480a      	ldr	r0, [pc, #40]	@ (80011c0 <LoopForever+0xa>)
  ldr r3, =_edata
 8001196:	4b0b      	ldr	r3, [pc, #44]	@ (80011c4 <LoopForever+0xe>)
  adds r2, r0, r1
 8001198:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800119a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800119c:	d3f6      	bcc.n	800118c <CopyDataInit>
  ldr r2, =_sbss
 800119e:	4a0a      	ldr	r2, [pc, #40]	@ (80011c8 <LoopForever+0x12>)
  b LoopFillZerobss
 80011a0:	e002      	b.n	80011a8 <LoopFillZerobss>

080011a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  str  r3, [r2]
 80011a4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a6:	3204      	adds	r2, #4

080011a8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80011a8:	4b08      	ldr	r3, [pc, #32]	@ (80011cc <LoopForever+0x16>)
  cmp r2, r3
 80011aa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80011ac:	d3f9      	bcc.n	80011a2 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80011ae:	f002 f95f 	bl	8003470 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011b2:	f7ff fd17 	bl	8000be4 <main>

080011b6 <LoopForever>:

LoopForever:
    b LoopForever
 80011b6:	e7fe      	b.n	80011b6 <LoopForever>
  ldr   r0, =_estack
 80011b8:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 80011bc:	08003560 	.word	0x08003560
  ldr r0, =_sdata
 80011c0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80011c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80011c8:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80011cc:	20000158 	.word	0x20000158

080011d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011d0:	e7fe      	b.n	80011d0 <ADC1_IRQHandler>

080011d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011d8:	1dfb      	adds	r3, r7, #7
 80011da:	2200      	movs	r2, #0
 80011dc:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011de:	2003      	movs	r0, #3
 80011e0:	f000 f80e 	bl	8001200 <HAL_InitTick>
 80011e4:	1e03      	subs	r3, r0, #0
 80011e6:	d003      	beq.n	80011f0 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80011e8:	1dfb      	adds	r3, r7, #7
 80011ea:	2201      	movs	r2, #1
 80011ec:	701a      	strb	r2, [r3, #0]
 80011ee:	e001      	b.n	80011f4 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011f0:	f7ff feba 	bl	8000f68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011f4:	1dfb      	adds	r3, r7, #7
 80011f6:	781b      	ldrb	r3, [r3, #0]
}
 80011f8:	0018      	movs	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	b002      	add	sp, #8
 80011fe:	bd80      	pop	{r7, pc}

08001200 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001208:	230f      	movs	r3, #15
 800120a:	18fb      	adds	r3, r7, r3
 800120c:	2200      	movs	r2, #0
 800120e:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8001210:	4b1d      	ldr	r3, [pc, #116]	@ (8001288 <HAL_InitTick+0x88>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d02b      	beq.n	8001270 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8001218:	4b1c      	ldr	r3, [pc, #112]	@ (800128c <HAL_InitTick+0x8c>)
 800121a:	681c      	ldr	r4, [r3, #0]
 800121c:	4b1a      	ldr	r3, [pc, #104]	@ (8001288 <HAL_InitTick+0x88>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	0019      	movs	r1, r3
 8001222:	23fa      	movs	r3, #250	@ 0xfa
 8001224:	0098      	lsls	r0, r3, #2
 8001226:	f7fe ff6f 	bl	8000108 <__udivsi3>
 800122a:	0003      	movs	r3, r0
 800122c:	0019      	movs	r1, r3
 800122e:	0020      	movs	r0, r4
 8001230:	f7fe ff6a 	bl	8000108 <__udivsi3>
 8001234:	0003      	movs	r3, r0
 8001236:	0018      	movs	r0, r3
 8001238:	f000 f93d 	bl	80014b6 <HAL_SYSTICK_Config>
 800123c:	1e03      	subs	r3, r0, #0
 800123e:	d112      	bne.n	8001266 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b03      	cmp	r3, #3
 8001244:	d80a      	bhi.n	800125c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	2301      	movs	r3, #1
 800124a:	425b      	negs	r3, r3
 800124c:	2200      	movs	r2, #0
 800124e:	0018      	movs	r0, r3
 8001250:	f000 f90c 	bl	800146c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001254:	4b0e      	ldr	r3, [pc, #56]	@ (8001290 <HAL_InitTick+0x90>)
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	e00d      	b.n	8001278 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800125c:	230f      	movs	r3, #15
 800125e:	18fb      	adds	r3, r7, r3
 8001260:	2201      	movs	r2, #1
 8001262:	701a      	strb	r2, [r3, #0]
 8001264:	e008      	b.n	8001278 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001266:	230f      	movs	r3, #15
 8001268:	18fb      	adds	r3, r7, r3
 800126a:	2201      	movs	r2, #1
 800126c:	701a      	strb	r2, [r3, #0]
 800126e:	e003      	b.n	8001278 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001270:	230f      	movs	r3, #15
 8001272:	18fb      	adds	r3, r7, r3
 8001274:	2201      	movs	r2, #1
 8001276:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001278:	230f      	movs	r3, #15
 800127a:	18fb      	adds	r3, r7, r3
 800127c:	781b      	ldrb	r3, [r3, #0]
}
 800127e:	0018      	movs	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	b005      	add	sp, #20
 8001284:	bd90      	pop	{r4, r7, pc}
 8001286:	46c0      	nop			@ (mov r8, r8)
 8001288:	20000008 	.word	0x20000008
 800128c:	20000000 	.word	0x20000000
 8001290:	20000004 	.word	0x20000004

08001294 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001298:	4b05      	ldr	r3, [pc, #20]	@ (80012b0 <HAL_IncTick+0x1c>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	001a      	movs	r2, r3
 800129e:	4b05      	ldr	r3, [pc, #20]	@ (80012b4 <HAL_IncTick+0x20>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	18d2      	adds	r2, r2, r3
 80012a4:	4b03      	ldr	r3, [pc, #12]	@ (80012b4 <HAL_IncTick+0x20>)
 80012a6:	601a      	str	r2, [r3, #0]
}
 80012a8:	46c0      	nop			@ (mov r8, r8)
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	46c0      	nop			@ (mov r8, r8)
 80012b0:	20000008 	.word	0x20000008
 80012b4:	20000154 	.word	0x20000154

080012b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  return uwTick;
 80012bc:	4b02      	ldr	r3, [pc, #8]	@ (80012c8 <HAL_GetTick+0x10>)
 80012be:	681b      	ldr	r3, [r3, #0]
}
 80012c0:	0018      	movs	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	46c0      	nop			@ (mov r8, r8)
 80012c8:	20000154 	.word	0x20000154

080012cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012d4:	f7ff fff0 	bl	80012b8 <HAL_GetTick>
 80012d8:	0003      	movs	r3, r0
 80012da:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	3301      	adds	r3, #1
 80012e4:	d005      	beq.n	80012f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001310 <HAL_Delay+0x44>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	001a      	movs	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	189b      	adds	r3, r3, r2
 80012f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012f2:	46c0      	nop			@ (mov r8, r8)
 80012f4:	f7ff ffe0 	bl	80012b8 <HAL_GetTick>
 80012f8:	0002      	movs	r2, r0
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	429a      	cmp	r2, r3
 8001302:	d8f7      	bhi.n	80012f4 <HAL_Delay+0x28>
  {
  }
}
 8001304:	46c0      	nop			@ (mov r8, r8)
 8001306:	46c0      	nop			@ (mov r8, r8)
 8001308:	46bd      	mov	sp, r7
 800130a:	b004      	add	sp, #16
 800130c:	bd80      	pop	{r7, pc}
 800130e:	46c0      	nop			@ (mov r8, r8)
 8001310:	20000008 	.word	0x20000008

08001314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	0002      	movs	r2, r0
 800131c:	1dfb      	adds	r3, r7, #7
 800131e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001320:	1dfb      	adds	r3, r7, #7
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b7f      	cmp	r3, #127	@ 0x7f
 8001326:	d809      	bhi.n	800133c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001328:	1dfb      	adds	r3, r7, #7
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	001a      	movs	r2, r3
 800132e:	231f      	movs	r3, #31
 8001330:	401a      	ands	r2, r3
 8001332:	4b04      	ldr	r3, [pc, #16]	@ (8001344 <__NVIC_EnableIRQ+0x30>)
 8001334:	2101      	movs	r1, #1
 8001336:	4091      	lsls	r1, r2
 8001338:	000a      	movs	r2, r1
 800133a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800133c:	46c0      	nop			@ (mov r8, r8)
 800133e:	46bd      	mov	sp, r7
 8001340:	b002      	add	sp, #8
 8001342:	bd80      	pop	{r7, pc}
 8001344:	e000e100 	.word	0xe000e100

08001348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001348:	b590      	push	{r4, r7, lr}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	0002      	movs	r2, r0
 8001350:	6039      	str	r1, [r7, #0]
 8001352:	1dfb      	adds	r3, r7, #7
 8001354:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001356:	1dfb      	adds	r3, r7, #7
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b7f      	cmp	r3, #127	@ 0x7f
 800135c:	d828      	bhi.n	80013b0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800135e:	4a2f      	ldr	r2, [pc, #188]	@ (800141c <__NVIC_SetPriority+0xd4>)
 8001360:	1dfb      	adds	r3, r7, #7
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	b25b      	sxtb	r3, r3
 8001366:	089b      	lsrs	r3, r3, #2
 8001368:	33c0      	adds	r3, #192	@ 0xc0
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	589b      	ldr	r3, [r3, r2]
 800136e:	1dfa      	adds	r2, r7, #7
 8001370:	7812      	ldrb	r2, [r2, #0]
 8001372:	0011      	movs	r1, r2
 8001374:	2203      	movs	r2, #3
 8001376:	400a      	ands	r2, r1
 8001378:	00d2      	lsls	r2, r2, #3
 800137a:	21ff      	movs	r1, #255	@ 0xff
 800137c:	4091      	lsls	r1, r2
 800137e:	000a      	movs	r2, r1
 8001380:	43d2      	mvns	r2, r2
 8001382:	401a      	ands	r2, r3
 8001384:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	019b      	lsls	r3, r3, #6
 800138a:	22ff      	movs	r2, #255	@ 0xff
 800138c:	401a      	ands	r2, r3
 800138e:	1dfb      	adds	r3, r7, #7
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	0018      	movs	r0, r3
 8001394:	2303      	movs	r3, #3
 8001396:	4003      	ands	r3, r0
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800139c:	481f      	ldr	r0, [pc, #124]	@ (800141c <__NVIC_SetPriority+0xd4>)
 800139e:	1dfb      	adds	r3, r7, #7
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	b25b      	sxtb	r3, r3
 80013a4:	089b      	lsrs	r3, r3, #2
 80013a6:	430a      	orrs	r2, r1
 80013a8:	33c0      	adds	r3, #192	@ 0xc0
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80013ae:	e031      	b.n	8001414 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001420 <__NVIC_SetPriority+0xd8>)
 80013b2:	1dfb      	adds	r3, r7, #7
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	0019      	movs	r1, r3
 80013b8:	230f      	movs	r3, #15
 80013ba:	400b      	ands	r3, r1
 80013bc:	3b08      	subs	r3, #8
 80013be:	089b      	lsrs	r3, r3, #2
 80013c0:	3306      	adds	r3, #6
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	18d3      	adds	r3, r2, r3
 80013c6:	3304      	adds	r3, #4
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	1dfa      	adds	r2, r7, #7
 80013cc:	7812      	ldrb	r2, [r2, #0]
 80013ce:	0011      	movs	r1, r2
 80013d0:	2203      	movs	r2, #3
 80013d2:	400a      	ands	r2, r1
 80013d4:	00d2      	lsls	r2, r2, #3
 80013d6:	21ff      	movs	r1, #255	@ 0xff
 80013d8:	4091      	lsls	r1, r2
 80013da:	000a      	movs	r2, r1
 80013dc:	43d2      	mvns	r2, r2
 80013de:	401a      	ands	r2, r3
 80013e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	019b      	lsls	r3, r3, #6
 80013e6:	22ff      	movs	r2, #255	@ 0xff
 80013e8:	401a      	ands	r2, r3
 80013ea:	1dfb      	adds	r3, r7, #7
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	0018      	movs	r0, r3
 80013f0:	2303      	movs	r3, #3
 80013f2:	4003      	ands	r3, r0
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013f8:	4809      	ldr	r0, [pc, #36]	@ (8001420 <__NVIC_SetPriority+0xd8>)
 80013fa:	1dfb      	adds	r3, r7, #7
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	001c      	movs	r4, r3
 8001400:	230f      	movs	r3, #15
 8001402:	4023      	ands	r3, r4
 8001404:	3b08      	subs	r3, #8
 8001406:	089b      	lsrs	r3, r3, #2
 8001408:	430a      	orrs	r2, r1
 800140a:	3306      	adds	r3, #6
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	18c3      	adds	r3, r0, r3
 8001410:	3304      	adds	r3, #4
 8001412:	601a      	str	r2, [r3, #0]
}
 8001414:	46c0      	nop			@ (mov r8, r8)
 8001416:	46bd      	mov	sp, r7
 8001418:	b003      	add	sp, #12
 800141a:	bd90      	pop	{r4, r7, pc}
 800141c:	e000e100 	.word	0xe000e100
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	1e5a      	subs	r2, r3, #1
 8001430:	2380      	movs	r3, #128	@ 0x80
 8001432:	045b      	lsls	r3, r3, #17
 8001434:	429a      	cmp	r2, r3
 8001436:	d301      	bcc.n	800143c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001438:	2301      	movs	r3, #1
 800143a:	e010      	b.n	800145e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800143c:	4b0a      	ldr	r3, [pc, #40]	@ (8001468 <SysTick_Config+0x44>)
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	3a01      	subs	r2, #1
 8001442:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001444:	2301      	movs	r3, #1
 8001446:	425b      	negs	r3, r3
 8001448:	2103      	movs	r1, #3
 800144a:	0018      	movs	r0, r3
 800144c:	f7ff ff7c 	bl	8001348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001450:	4b05      	ldr	r3, [pc, #20]	@ (8001468 <SysTick_Config+0x44>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001456:	4b04      	ldr	r3, [pc, #16]	@ (8001468 <SysTick_Config+0x44>)
 8001458:	2207      	movs	r2, #7
 800145a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800145c:	2300      	movs	r3, #0
}
 800145e:	0018      	movs	r0, r3
 8001460:	46bd      	mov	sp, r7
 8001462:	b002      	add	sp, #8
 8001464:	bd80      	pop	{r7, pc}
 8001466:	46c0      	nop			@ (mov r8, r8)
 8001468:	e000e010 	.word	0xe000e010

0800146c <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	60b9      	str	r1, [r7, #8]
 8001474:	607a      	str	r2, [r7, #4]
 8001476:	210f      	movs	r1, #15
 8001478:	187b      	adds	r3, r7, r1
 800147a:	1c02      	adds	r2, r0, #0
 800147c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	187b      	adds	r3, r7, r1
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	b25b      	sxtb	r3, r3
 8001486:	0011      	movs	r1, r2
 8001488:	0018      	movs	r0, r3
 800148a:	f7ff ff5d 	bl	8001348 <__NVIC_SetPriority>
}
 800148e:	46c0      	nop			@ (mov r8, r8)
 8001490:	46bd      	mov	sp, r7
 8001492:	b004      	add	sp, #16
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	0002      	movs	r2, r0
 800149e:	1dfb      	adds	r3, r7, #7
 80014a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014a2:	1dfb      	adds	r3, r7, #7
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	b25b      	sxtb	r3, r3
 80014a8:	0018      	movs	r0, r3
 80014aa:	f7ff ff33 	bl	8001314 <__NVIC_EnableIRQ>
}
 80014ae:	46c0      	nop			@ (mov r8, r8)
 80014b0:	46bd      	mov	sp, r7
 80014b2:	b002      	add	sp, #8
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b082      	sub	sp, #8
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	0018      	movs	r0, r3
 80014c2:	f7ff ffaf 	bl	8001424 <SysTick_Config>
 80014c6:	0003      	movs	r3, r0
}
 80014c8:	0018      	movs	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	b002      	add	sp, #8
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d101      	bne.n	80014e2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e050      	b.n	8001584 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2225      	movs	r2, #37	@ 0x25
 80014e6:	5c9b      	ldrb	r3, [r3, r2]
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d008      	beq.n	8001500 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2204      	movs	r2, #4
 80014f2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2224      	movs	r2, #36	@ 0x24
 80014f8:	2100      	movs	r1, #0
 80014fa:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e041      	b.n	8001584 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	210e      	movs	r1, #14
 800150c:	438a      	bics	r2, r1
 800150e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800151a:	491c      	ldr	r1, [pc, #112]	@ (800158c <HAL_DMA_Abort+0xbc>)
 800151c:	400a      	ands	r2, r1
 800151e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2101      	movs	r1, #1
 800152c:	438a      	bics	r2, r1
 800152e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8001530:	4b17      	ldr	r3, [pc, #92]	@ (8001590 <HAL_DMA_Abort+0xc0>)
 8001532:	6859      	ldr	r1, [r3, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001538:	221c      	movs	r2, #28
 800153a:	4013      	ands	r3, r2
 800153c:	2201      	movs	r2, #1
 800153e:	409a      	lsls	r2, r3
 8001540:	4b13      	ldr	r3, [pc, #76]	@ (8001590 <HAL_DMA_Abort+0xc0>)
 8001542:	430a      	orrs	r2, r1
 8001544:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800154e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001554:	2b00      	cmp	r3, #0
 8001556:	d00c      	beq.n	8001572 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001562:	490a      	ldr	r1, [pc, #40]	@ (800158c <HAL_DMA_Abort+0xbc>)
 8001564:	400a      	ands	r2, r1
 8001566:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001570:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2225      	movs	r2, #37	@ 0x25
 8001576:	2101      	movs	r1, #1
 8001578:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2224      	movs	r2, #36	@ 0x24
 800157e:	2100      	movs	r1, #0
 8001580:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001582:	2300      	movs	r3, #0
}
 8001584:	0018      	movs	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	b002      	add	sp, #8
 800158a:	bd80      	pop	{r7, pc}
 800158c:	fffffeff 	.word	0xfffffeff
 8001590:	40020000 	.word	0x40020000

08001594 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800159c:	230f      	movs	r3, #15
 800159e:	18fb      	adds	r3, r7, r3
 80015a0:	2200      	movs	r2, #0
 80015a2:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2224      	movs	r2, #36	@ 0x24
 80015a8:	2100      	movs	r1, #0
 80015aa:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2224      	movs	r2, #36	@ 0x24
 80015b0:	5c9b      	ldrb	r3, [r3, r2]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d101      	bne.n	80015ba <HAL_DMA_Abort_IT+0x26>
 80015b6:	2302      	movs	r3, #2
 80015b8:	e05e      	b.n	8001678 <HAL_DMA_Abort_IT+0xe4>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2224      	movs	r2, #36	@ 0x24
 80015be:	2101      	movs	r1, #1
 80015c0:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2225      	movs	r2, #37	@ 0x25
 80015c6:	5c9b      	ldrb	r3, [r3, r2]
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d007      	beq.n	80015de <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2204      	movs	r2, #4
 80015d2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80015d4:	230f      	movs	r3, #15
 80015d6:	18fb      	adds	r3, r7, r3
 80015d8:	2201      	movs	r2, #1
 80015da:	701a      	strb	r2, [r3, #0]
 80015dc:	e049      	b.n	8001672 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	210e      	movs	r1, #14
 80015ea:	438a      	bics	r2, r1
 80015ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2101      	movs	r1, #1
 80015fa:	438a      	bics	r2, r1
 80015fc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001608:	491d      	ldr	r1, [pc, #116]	@ (8001680 <HAL_DMA_Abort_IT+0xec>)
 800160a:	400a      	ands	r2, r1
 800160c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 800160e:	4b1d      	ldr	r3, [pc, #116]	@ (8001684 <HAL_DMA_Abort_IT+0xf0>)
 8001610:	6859      	ldr	r1, [r3, #4]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001616:	221c      	movs	r2, #28
 8001618:	4013      	ands	r3, r2
 800161a:	2201      	movs	r2, #1
 800161c:	409a      	lsls	r2, r3
 800161e:	4b19      	ldr	r3, [pc, #100]	@ (8001684 <HAL_DMA_Abort_IT+0xf0>)
 8001620:	430a      	orrs	r2, r1
 8001622:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800162c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001632:	2b00      	cmp	r3, #0
 8001634:	d00c      	beq.n	8001650 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001640:	490f      	ldr	r1, [pc, #60]	@ (8001680 <HAL_DMA_Abort_IT+0xec>)
 8001642:	400a      	ands	r2, r1
 8001644:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800164e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2225      	movs	r2, #37	@ 0x25
 8001654:	2101      	movs	r1, #1
 8001656:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2224      	movs	r2, #36	@ 0x24
 800165c:	2100      	movs	r1, #0
 800165e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001664:	2b00      	cmp	r3, #0
 8001666:	d004      	beq.n	8001672 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	0010      	movs	r0, r2
 8001670:	4798      	blx	r3
    }
  }
  return status;
 8001672:	230f      	movs	r3, #15
 8001674:	18fb      	adds	r3, r7, r3
 8001676:	781b      	ldrb	r3, [r3, #0]
}
 8001678:	0018      	movs	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	b004      	add	sp, #16
 800167e:	bd80      	pop	{r7, pc}
 8001680:	fffffeff 	.word	0xfffffeff
 8001684:	40020000 	.word	0x40020000

08001688 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001692:	2300      	movs	r3, #0
 8001694:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001696:	e153      	b.n	8001940 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2101      	movs	r1, #1
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4091      	lsls	r1, r2
 80016a2:	000a      	movs	r2, r1
 80016a4:	4013      	ands	r3, r2
 80016a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d100      	bne.n	80016b0 <HAL_GPIO_Init+0x28>
 80016ae:	e144      	b.n	800193a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d003      	beq.n	80016c0 <HAL_GPIO_Init+0x38>
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	2b12      	cmp	r3, #18
 80016be:	d125      	bne.n	800170c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	08da      	lsrs	r2, r3, #3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3208      	adds	r2, #8
 80016c8:	0092      	lsls	r2, r2, #2
 80016ca:	58d3      	ldr	r3, [r2, r3]
 80016cc:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	2207      	movs	r2, #7
 80016d2:	4013      	ands	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	220f      	movs	r2, #15
 80016d8:	409a      	lsls	r2, r3
 80016da:	0013      	movs	r3, r2
 80016dc:	43da      	mvns	r2, r3
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	4013      	ands	r3, r2
 80016e2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	220f      	movs	r2, #15
 80016ea:	401a      	ands	r2, r3
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	2107      	movs	r1, #7
 80016f0:	400b      	ands	r3, r1
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	409a      	lsls	r2, r3
 80016f6:	0013      	movs	r3, r2
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	08da      	lsrs	r2, r3, #3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3208      	adds	r2, #8
 8001706:	0092      	lsls	r2, r2, #2
 8001708:	6979      	ldr	r1, [r7, #20]
 800170a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	2203      	movs	r2, #3
 8001718:	409a      	lsls	r2, r3
 800171a:	0013      	movs	r3, r2
 800171c:	43da      	mvns	r2, r3
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	4013      	ands	r3, r2
 8001722:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2203      	movs	r2, #3
 800172a:	401a      	ands	r2, r3
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	409a      	lsls	r2, r3
 8001732:	0013      	movs	r3, r2
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	4313      	orrs	r3, r2
 8001738:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	697a      	ldr	r2, [r7, #20]
 800173e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d00b      	beq.n	8001760 <HAL_GPIO_Init+0xd8>
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2b02      	cmp	r3, #2
 800174e:	d007      	beq.n	8001760 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001754:	2b11      	cmp	r3, #17
 8001756:	d003      	beq.n	8001760 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b12      	cmp	r3, #18
 800175e:	d130      	bne.n	80017c2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	2203      	movs	r2, #3
 800176c:	409a      	lsls	r2, r3
 800176e:	0013      	movs	r3, r2
 8001770:	43da      	mvns	r2, r3
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	4013      	ands	r3, r2
 8001776:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	68da      	ldr	r2, [r3, #12]
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	409a      	lsls	r2, r3
 8001782:	0013      	movs	r3, r2
 8001784:	697a      	ldr	r2, [r7, #20]
 8001786:	4313      	orrs	r3, r2
 8001788:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001796:	2201      	movs	r2, #1
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	409a      	lsls	r2, r3
 800179c:	0013      	movs	r3, r2
 800179e:	43da      	mvns	r2, r3
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	4013      	ands	r3, r2
 80017a4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	091b      	lsrs	r3, r3, #4
 80017ac:	2201      	movs	r2, #1
 80017ae:	401a      	ands	r2, r3
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	409a      	lsls	r2, r3
 80017b4:	0013      	movs	r3, r2
 80017b6:	697a      	ldr	r2, [r7, #20]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b03      	cmp	r3, #3
 80017c8:	d017      	beq.n	80017fa <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	2203      	movs	r2, #3
 80017d6:	409a      	lsls	r2, r3
 80017d8:	0013      	movs	r3, r2
 80017da:	43da      	mvns	r2, r3
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	4013      	ands	r3, r2
 80017e0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	409a      	lsls	r2, r3
 80017ec:	0013      	movs	r3, r2
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	2380      	movs	r3, #128	@ 0x80
 8001800:	055b      	lsls	r3, r3, #21
 8001802:	4013      	ands	r3, r2
 8001804:	d100      	bne.n	8001808 <HAL_GPIO_Init+0x180>
 8001806:	e098      	b.n	800193a <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001808:	4a53      	ldr	r2, [pc, #332]	@ (8001958 <HAL_GPIO_Init+0x2d0>)
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	089b      	lsrs	r3, r3, #2
 800180e:	3318      	adds	r3, #24
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	589b      	ldr	r3, [r3, r2]
 8001814:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	2203      	movs	r2, #3
 800181a:	4013      	ands	r3, r2
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	220f      	movs	r2, #15
 8001820:	409a      	lsls	r2, r3
 8001822:	0013      	movs	r3, r2
 8001824:	43da      	mvns	r2, r3
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	4013      	ands	r3, r2
 800182a:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	23a0      	movs	r3, #160	@ 0xa0
 8001830:	05db      	lsls	r3, r3, #23
 8001832:	429a      	cmp	r2, r3
 8001834:	d019      	beq.n	800186a <HAL_GPIO_Init+0x1e2>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a48      	ldr	r2, [pc, #288]	@ (800195c <HAL_GPIO_Init+0x2d4>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d013      	beq.n	8001866 <HAL_GPIO_Init+0x1de>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a47      	ldr	r2, [pc, #284]	@ (8001960 <HAL_GPIO_Init+0x2d8>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d00d      	beq.n	8001862 <HAL_GPIO_Init+0x1da>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a46      	ldr	r2, [pc, #280]	@ (8001964 <HAL_GPIO_Init+0x2dc>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d007      	beq.n	800185e <HAL_GPIO_Init+0x1d6>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a45      	ldr	r2, [pc, #276]	@ (8001968 <HAL_GPIO_Init+0x2e0>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d101      	bne.n	800185a <HAL_GPIO_Init+0x1d2>
 8001856:	2305      	movs	r3, #5
 8001858:	e008      	b.n	800186c <HAL_GPIO_Init+0x1e4>
 800185a:	2306      	movs	r3, #6
 800185c:	e006      	b.n	800186c <HAL_GPIO_Init+0x1e4>
 800185e:	2303      	movs	r3, #3
 8001860:	e004      	b.n	800186c <HAL_GPIO_Init+0x1e4>
 8001862:	2302      	movs	r3, #2
 8001864:	e002      	b.n	800186c <HAL_GPIO_Init+0x1e4>
 8001866:	2301      	movs	r3, #1
 8001868:	e000      	b.n	800186c <HAL_GPIO_Init+0x1e4>
 800186a:	2300      	movs	r3, #0
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	2103      	movs	r1, #3
 8001870:	400a      	ands	r2, r1
 8001872:	00d2      	lsls	r2, r2, #3
 8001874:	4093      	lsls	r3, r2
 8001876:	697a      	ldr	r2, [r7, #20]
 8001878:	4313      	orrs	r3, r2
 800187a:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800187c:	4936      	ldr	r1, [pc, #216]	@ (8001958 <HAL_GPIO_Init+0x2d0>)
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	089b      	lsrs	r3, r3, #2
 8001882:	3318      	adds	r3, #24
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 800188a:	4a33      	ldr	r2, [pc, #204]	@ (8001958 <HAL_GPIO_Init+0x2d0>)
 800188c:	2380      	movs	r3, #128	@ 0x80
 800188e:	58d3      	ldr	r3, [r2, r3]
 8001890:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	43da      	mvns	r2, r3
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	4013      	ands	r3, r2
 800189a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	2380      	movs	r3, #128	@ 0x80
 80018a2:	025b      	lsls	r3, r3, #9
 80018a4:	4013      	ands	r3, r2
 80018a6:	d003      	beq.n	80018b0 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 80018a8:	697a      	ldr	r2, [r7, #20]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80018b0:	4929      	ldr	r1, [pc, #164]	@ (8001958 <HAL_GPIO_Init+0x2d0>)
 80018b2:	2280      	movs	r2, #128	@ 0x80
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80018b8:	4a27      	ldr	r2, [pc, #156]	@ (8001958 <HAL_GPIO_Init+0x2d0>)
 80018ba:	2384      	movs	r3, #132	@ 0x84
 80018bc:	58d3      	ldr	r3, [r2, r3]
 80018be:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	43da      	mvns	r2, r3
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	4013      	ands	r3, r2
 80018c8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	2380      	movs	r3, #128	@ 0x80
 80018d0:	029b      	lsls	r3, r3, #10
 80018d2:	4013      	ands	r3, r2
 80018d4:	d003      	beq.n	80018de <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4313      	orrs	r3, r2
 80018dc:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80018de:	491e      	ldr	r1, [pc, #120]	@ (8001958 <HAL_GPIO_Init+0x2d0>)
 80018e0:	2284      	movs	r2, #132	@ 0x84
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80018e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001958 <HAL_GPIO_Init+0x2d0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	43da      	mvns	r2, r3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	4013      	ands	r3, r2
 80018f4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685a      	ldr	r2, [r3, #4]
 80018fa:	2380      	movs	r3, #128	@ 0x80
 80018fc:	035b      	lsls	r3, r3, #13
 80018fe:	4013      	ands	r3, r2
 8001900:	d003      	beq.n	800190a <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4313      	orrs	r3, r2
 8001908:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800190a:	4b13      	ldr	r3, [pc, #76]	@ (8001958 <HAL_GPIO_Init+0x2d0>)
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001910:	4b11      	ldr	r3, [pc, #68]	@ (8001958 <HAL_GPIO_Init+0x2d0>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	43da      	mvns	r2, r3
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	4013      	ands	r3, r2
 800191e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	2380      	movs	r3, #128	@ 0x80
 8001926:	039b      	lsls	r3, r3, #14
 8001928:	4013      	ands	r3, r2
 800192a:	d003      	beq.n	8001934 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 800192c:	697a      	ldr	r2, [r7, #20]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	4313      	orrs	r3, r2
 8001932:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001934:	4b08      	ldr	r3, [pc, #32]	@ (8001958 <HAL_GPIO_Init+0x2d0>)
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	3301      	adds	r3, #1
 800193e:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	40da      	lsrs	r2, r3
 8001948:	1e13      	subs	r3, r2, #0
 800194a:	d000      	beq.n	800194e <HAL_GPIO_Init+0x2c6>
 800194c:	e6a4      	b.n	8001698 <HAL_GPIO_Init+0x10>
  }
}
 800194e:	46c0      	nop			@ (mov r8, r8)
 8001950:	46c0      	nop			@ (mov r8, r8)
 8001952:	46bd      	mov	sp, r7
 8001954:	b006      	add	sp, #24
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40021800 	.word	0x40021800
 800195c:	50000400 	.word	0x50000400
 8001960:	50000800 	.word	0x50000800
 8001964:	50000c00 	.word	0x50000c00
 8001968:	50001400 	.word	0x50001400

0800196c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	000a      	movs	r2, r1
 8001976:	1cbb      	adds	r3, r7, #2
 8001978:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	1cba      	adds	r2, r7, #2
 8001980:	8812      	ldrh	r2, [r2, #0]
 8001982:	4013      	ands	r3, r2
 8001984:	d004      	beq.n	8001990 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001986:	230f      	movs	r3, #15
 8001988:	18fb      	adds	r3, r7, r3
 800198a:	2201      	movs	r2, #1
 800198c:	701a      	strb	r2, [r3, #0]
 800198e:	e003      	b.n	8001998 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001990:	230f      	movs	r3, #15
 8001992:	18fb      	adds	r3, r7, r3
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001998:	230f      	movs	r3, #15
 800199a:	18fb      	adds	r3, r7, r3
 800199c:	781b      	ldrb	r3, [r3, #0]
}
 800199e:	0018      	movs	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	b004      	add	sp, #16
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	0008      	movs	r0, r1
 80019b0:	0011      	movs	r1, r2
 80019b2:	1cbb      	adds	r3, r7, #2
 80019b4:	1c02      	adds	r2, r0, #0
 80019b6:	801a      	strh	r2, [r3, #0]
 80019b8:	1c7b      	adds	r3, r7, #1
 80019ba:	1c0a      	adds	r2, r1, #0
 80019bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019be:	1c7b      	adds	r3, r7, #1
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d004      	beq.n	80019d0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019c6:	1cbb      	adds	r3, r7, #2
 80019c8:	881a      	ldrh	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019ce:	e003      	b.n	80019d8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019d0:	1cbb      	adds	r3, r7, #2
 80019d2:	881a      	ldrh	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80019d8:	46c0      	nop			@ (mov r8, r8)
 80019da:	46bd      	mov	sp, r7
 80019dc:	b002      	add	sp, #8
 80019de:	bd80      	pop	{r7, pc}

080019e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e1d0      	b.n	8001d94 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2201      	movs	r2, #1
 80019f8:	4013      	ands	r3, r2
 80019fa:	d100      	bne.n	80019fe <HAL_RCC_OscConfig+0x1e>
 80019fc:	e069      	b.n	8001ad2 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019fe:	4bc8      	ldr	r3, [pc, #800]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	2238      	movs	r2, #56	@ 0x38
 8001a04:	4013      	ands	r3, r2
 8001a06:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	2b08      	cmp	r3, #8
 8001a0c:	d105      	bne.n	8001a1a <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d15d      	bne.n	8001ad2 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e1bc      	b.n	8001d94 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	2380      	movs	r3, #128	@ 0x80
 8001a20:	025b      	lsls	r3, r3, #9
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d107      	bne.n	8001a36 <HAL_RCC_OscConfig+0x56>
 8001a26:	4bbe      	ldr	r3, [pc, #760]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	4bbd      	ldr	r3, [pc, #756]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001a2c:	2180      	movs	r1, #128	@ 0x80
 8001a2e:	0249      	lsls	r1, r1, #9
 8001a30:	430a      	orrs	r2, r1
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	e020      	b.n	8001a78 <HAL_RCC_OscConfig+0x98>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685a      	ldr	r2, [r3, #4]
 8001a3a:	23a0      	movs	r3, #160	@ 0xa0
 8001a3c:	02db      	lsls	r3, r3, #11
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d10e      	bne.n	8001a60 <HAL_RCC_OscConfig+0x80>
 8001a42:	4bb7      	ldr	r3, [pc, #732]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	4bb6      	ldr	r3, [pc, #728]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001a48:	2180      	movs	r1, #128	@ 0x80
 8001a4a:	02c9      	lsls	r1, r1, #11
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	4bb3      	ldr	r3, [pc, #716]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	4bb2      	ldr	r3, [pc, #712]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001a56:	2180      	movs	r1, #128	@ 0x80
 8001a58:	0249      	lsls	r1, r1, #9
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	e00b      	b.n	8001a78 <HAL_RCC_OscConfig+0x98>
 8001a60:	4baf      	ldr	r3, [pc, #700]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	4bae      	ldr	r3, [pc, #696]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001a66:	49af      	ldr	r1, [pc, #700]	@ (8001d24 <HAL_RCC_OscConfig+0x344>)
 8001a68:	400a      	ands	r2, r1
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	4bac      	ldr	r3, [pc, #688]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4bab      	ldr	r3, [pc, #684]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001a72:	49ad      	ldr	r1, [pc, #692]	@ (8001d28 <HAL_RCC_OscConfig+0x348>)
 8001a74:	400a      	ands	r2, r1
 8001a76:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d014      	beq.n	8001aaa <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a80:	f7ff fc1a 	bl	80012b8 <HAL_GetTick>
 8001a84:	0003      	movs	r3, r0
 8001a86:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001a8a:	f7ff fc15 	bl	80012b8 <HAL_GetTick>
 8001a8e:	0002      	movs	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b64      	cmp	r3, #100	@ 0x64
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e17b      	b.n	8001d94 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a9c:	4ba0      	ldr	r3, [pc, #640]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	2380      	movs	r3, #128	@ 0x80
 8001aa2:	029b      	lsls	r3, r3, #10
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	d0f0      	beq.n	8001a8a <HAL_RCC_OscConfig+0xaa>
 8001aa8:	e013      	b.n	8001ad2 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aaa:	f7ff fc05 	bl	80012b8 <HAL_GetTick>
 8001aae:	0003      	movs	r3, r0
 8001ab0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001ab4:	f7ff fc00 	bl	80012b8 <HAL_GetTick>
 8001ab8:	0002      	movs	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b64      	cmp	r3, #100	@ 0x64
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e166      	b.n	8001d94 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ac6:	4b96      	ldr	r3, [pc, #600]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	2380      	movs	r3, #128	@ 0x80
 8001acc:	029b      	lsls	r3, r3, #10
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d1f0      	bne.n	8001ab4 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	4013      	ands	r3, r2
 8001ada:	d100      	bne.n	8001ade <HAL_RCC_OscConfig+0xfe>
 8001adc:	e086      	b.n	8001bec <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ade:	4b90      	ldr	r3, [pc, #576]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	2238      	movs	r2, #56	@ 0x38
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d12f      	bne.n	8001b4e <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e14c      	b.n	8001d94 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001afa:	4b89      	ldr	r3, [pc, #548]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	4a8b      	ldr	r2, [pc, #556]	@ (8001d2c <HAL_RCC_OscConfig+0x34c>)
 8001b00:	4013      	ands	r3, r2
 8001b02:	0019      	movs	r1, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	021a      	lsls	r2, r3, #8
 8001b0a:	4b85      	ldr	r3, [pc, #532]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d112      	bne.n	8001b3c <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001b16:	4b82      	ldr	r3, [pc, #520]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a85      	ldr	r2, [pc, #532]	@ (8001d30 <HAL_RCC_OscConfig+0x350>)
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	0019      	movs	r1, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	691a      	ldr	r2, [r3, #16]
 8001b24:	4b7e      	ldr	r3, [pc, #504]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001b26:	430a      	orrs	r2, r1
 8001b28:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001b2a:	4b7d      	ldr	r3, [pc, #500]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	0adb      	lsrs	r3, r3, #11
 8001b30:	2207      	movs	r2, #7
 8001b32:	4013      	ands	r3, r2
 8001b34:	4a7f      	ldr	r2, [pc, #508]	@ (8001d34 <HAL_RCC_OscConfig+0x354>)
 8001b36:	40da      	lsrs	r2, r3
 8001b38:	4b7f      	ldr	r3, [pc, #508]	@ (8001d38 <HAL_RCC_OscConfig+0x358>)
 8001b3a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001b3c:	4b7f      	ldr	r3, [pc, #508]	@ (8001d3c <HAL_RCC_OscConfig+0x35c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	0018      	movs	r0, r3
 8001b42:	f7ff fb5d 	bl	8001200 <HAL_InitTick>
 8001b46:	1e03      	subs	r3, r0, #0
 8001b48:	d050      	beq.n	8001bec <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e122      	b.n	8001d94 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d030      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001b56:	4b72      	ldr	r3, [pc, #456]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a75      	ldr	r2, [pc, #468]	@ (8001d30 <HAL_RCC_OscConfig+0x350>)
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	0019      	movs	r1, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	691a      	ldr	r2, [r3, #16]
 8001b64:	4b6e      	ldr	r3, [pc, #440]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001b66:	430a      	orrs	r2, r1
 8001b68:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8001b6a:	4b6d      	ldr	r3, [pc, #436]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	4b6c      	ldr	r3, [pc, #432]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001b70:	2180      	movs	r1, #128	@ 0x80
 8001b72:	0049      	lsls	r1, r1, #1
 8001b74:	430a      	orrs	r2, r1
 8001b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b78:	f7ff fb9e 	bl	80012b8 <HAL_GetTick>
 8001b7c:	0003      	movs	r3, r0
 8001b7e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001b82:	f7ff fb99 	bl	80012b8 <HAL_GetTick>
 8001b86:	0002      	movs	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e0ff      	b.n	8001d94 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b94:	4b62      	ldr	r3, [pc, #392]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	2380      	movs	r3, #128	@ 0x80
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	d0f0      	beq.n	8001b82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba0:	4b5f      	ldr	r3, [pc, #380]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	4a61      	ldr	r2, [pc, #388]	@ (8001d2c <HAL_RCC_OscConfig+0x34c>)
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	0019      	movs	r1, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	021a      	lsls	r2, r3, #8
 8001bb0:	4b5b      	ldr	r3, [pc, #364]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	e019      	b.n	8001bec <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001bb8:	4b59      	ldr	r3, [pc, #356]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4b58      	ldr	r3, [pc, #352]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001bbe:	4960      	ldr	r1, [pc, #384]	@ (8001d40 <HAL_RCC_OscConfig+0x360>)
 8001bc0:	400a      	ands	r2, r1
 8001bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc4:	f7ff fb78 	bl	80012b8 <HAL_GetTick>
 8001bc8:	0003      	movs	r3, r0
 8001bca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001bce:	f7ff fb73 	bl	80012b8 <HAL_GetTick>
 8001bd2:	0002      	movs	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e0d9      	b.n	8001d94 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001be0:	4b4f      	ldr	r3, [pc, #316]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	2380      	movs	r3, #128	@ 0x80
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	4013      	ands	r3, r2
 8001bea:	d1f0      	bne.n	8001bce <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2208      	movs	r2, #8
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d042      	beq.n	8001c7c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001bf6:	4b4a      	ldr	r3, [pc, #296]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	2238      	movs	r2, #56	@ 0x38
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	2b18      	cmp	r3, #24
 8001c00:	d105      	bne.n	8001c0e <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d138      	bne.n	8001c7c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e0c2      	b.n	8001d94 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d019      	beq.n	8001c4a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001c16:	4b42      	ldr	r3, [pc, #264]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001c18:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c1a:	4b41      	ldr	r3, [pc, #260]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c22:	f7ff fb49 	bl	80012b8 <HAL_GetTick>
 8001c26:	0003      	movs	r3, r0
 8001c28:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001c2c:	f7ff fb44 	bl	80012b8 <HAL_GetTick>
 8001c30:	0002      	movs	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e0aa      	b.n	8001d94 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001c3e:	4b38      	ldr	r3, [pc, #224]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001c40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c42:	2202      	movs	r2, #2
 8001c44:	4013      	ands	r3, r2
 8001c46:	d0f1      	beq.n	8001c2c <HAL_RCC_OscConfig+0x24c>
 8001c48:	e018      	b.n	8001c7c <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001c4a:	4b35      	ldr	r3, [pc, #212]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001c4c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c4e:	4b34      	ldr	r3, [pc, #208]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001c50:	2101      	movs	r1, #1
 8001c52:	438a      	bics	r2, r1
 8001c54:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c56:	f7ff fb2f 	bl	80012b8 <HAL_GetTick>
 8001c5a:	0003      	movs	r3, r0
 8001c5c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001c60:	f7ff fb2a 	bl	80012b8 <HAL_GetTick>
 8001c64:	0002      	movs	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e090      	b.n	8001d94 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001c72:	4b2b      	ldr	r3, [pc, #172]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c76:	2202      	movs	r2, #2
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d1f1      	bne.n	8001c60 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2204      	movs	r2, #4
 8001c82:	4013      	ands	r3, r2
 8001c84:	d100      	bne.n	8001c88 <HAL_RCC_OscConfig+0x2a8>
 8001c86:	e084      	b.n	8001d92 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c88:	230f      	movs	r3, #15
 8001c8a:	18fb      	adds	r3, r7, r3
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001c90:	4b23      	ldr	r3, [pc, #140]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	2238      	movs	r2, #56	@ 0x38
 8001c96:	4013      	ands	r3, r2
 8001c98:	2b20      	cmp	r3, #32
 8001c9a:	d106      	bne.n	8001caa <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d000      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x2c6>
 8001ca4:	e075      	b.n	8001d92 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e074      	b.n	8001d94 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d106      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x2e0>
 8001cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001cb4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001cb8:	2101      	movs	r1, #1
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001cbe:	e01c      	b.n	8001cfa <HAL_RCC_OscConfig+0x31a>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	2b05      	cmp	r3, #5
 8001cc6:	d10c      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x302>
 8001cc8:	4b15      	ldr	r3, [pc, #84]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001cca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ccc:	4b14      	ldr	r3, [pc, #80]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001cce:	2104      	movs	r1, #4
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001cd4:	4b12      	ldr	r3, [pc, #72]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001cd6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001cd8:	4b11      	ldr	r3, [pc, #68]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001cda:	2101      	movs	r1, #1
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ce0:	e00b      	b.n	8001cfa <HAL_RCC_OscConfig+0x31a>
 8001ce2:	4b0f      	ldr	r3, [pc, #60]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001ce4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001ce8:	2101      	movs	r1, #1
 8001cea:	438a      	bics	r2, r1
 8001cec:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001cee:	4b0c      	ldr	r3, [pc, #48]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001cf0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d20 <HAL_RCC_OscConfig+0x340>)
 8001cf4:	2104      	movs	r1, #4
 8001cf6:	438a      	bics	r2, r1
 8001cf8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d028      	beq.n	8001d54 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d02:	f7ff fad9 	bl	80012b8 <HAL_GetTick>
 8001d06:	0003      	movs	r3, r0
 8001d08:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001d0a:	e01d      	b.n	8001d48 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d0c:	f7ff fad4 	bl	80012b8 <HAL_GetTick>
 8001d10:	0002      	movs	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	4a0b      	ldr	r2, [pc, #44]	@ (8001d44 <HAL_RCC_OscConfig+0x364>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d915      	bls.n	8001d48 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e039      	b.n	8001d94 <HAL_RCC_OscConfig+0x3b4>
 8001d20:	40021000 	.word	0x40021000
 8001d24:	fffeffff 	.word	0xfffeffff
 8001d28:	fffbffff 	.word	0xfffbffff
 8001d2c:	ffff80ff 	.word	0xffff80ff
 8001d30:	ffffc7ff 	.word	0xffffc7ff
 8001d34:	02dc6c00 	.word	0x02dc6c00
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	20000004 	.word	0x20000004
 8001d40:	fffffeff 	.word	0xfffffeff
 8001d44:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001d48:	4b14      	ldr	r3, [pc, #80]	@ (8001d9c <HAL_RCC_OscConfig+0x3bc>)
 8001d4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d4c:	2202      	movs	r2, #2
 8001d4e:	4013      	ands	r3, r2
 8001d50:	d0dc      	beq.n	8001d0c <HAL_RCC_OscConfig+0x32c>
 8001d52:	e013      	b.n	8001d7c <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d54:	f7ff fab0 	bl	80012b8 <HAL_GetTick>
 8001d58:	0003      	movs	r3, r0
 8001d5a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001d5c:	e009      	b.n	8001d72 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d5e:	f7ff faab 	bl	80012b8 <HAL_GetTick>
 8001d62:	0002      	movs	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	4a0d      	ldr	r2, [pc, #52]	@ (8001da0 <HAL_RCC_OscConfig+0x3c0>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e010      	b.n	8001d94 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001d72:	4b0a      	ldr	r3, [pc, #40]	@ (8001d9c <HAL_RCC_OscConfig+0x3bc>)
 8001d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d76:	2202      	movs	r2, #2
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d1f0      	bne.n	8001d5e <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001d7c:	230f      	movs	r3, #15
 8001d7e:	18fb      	adds	r3, r7, r3
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d105      	bne.n	8001d92 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001d86:	4b05      	ldr	r3, [pc, #20]	@ (8001d9c <HAL_RCC_OscConfig+0x3bc>)
 8001d88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d8a:	4b04      	ldr	r3, [pc, #16]	@ (8001d9c <HAL_RCC_OscConfig+0x3bc>)
 8001d8c:	4905      	ldr	r1, [pc, #20]	@ (8001da4 <HAL_RCC_OscConfig+0x3c4>)
 8001d8e:	400a      	ands	r2, r1
 8001d90:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	0018      	movs	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	b006      	add	sp, #24
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	00001388 	.word	0x00001388
 8001da4:	efffffff 	.word	0xefffffff

08001da8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e0e9      	b.n	8001f90 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dbc:	4b76      	ldr	r3, [pc, #472]	@ (8001f98 <HAL_RCC_ClockConfig+0x1f0>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2207      	movs	r2, #7
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d91e      	bls.n	8001e08 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dca:	4b73      	ldr	r3, [pc, #460]	@ (8001f98 <HAL_RCC_ClockConfig+0x1f0>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2207      	movs	r2, #7
 8001dd0:	4393      	bics	r3, r2
 8001dd2:	0019      	movs	r1, r3
 8001dd4:	4b70      	ldr	r3, [pc, #448]	@ (8001f98 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ddc:	f7ff fa6c 	bl	80012b8 <HAL_GetTick>
 8001de0:	0003      	movs	r3, r0
 8001de2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001de4:	e009      	b.n	8001dfa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001de6:	f7ff fa67 	bl	80012b8 <HAL_GetTick>
 8001dea:	0002      	movs	r2, r0
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	4a6a      	ldr	r2, [pc, #424]	@ (8001f9c <HAL_RCC_ClockConfig+0x1f4>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e0ca      	b.n	8001f90 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001dfa:	4b67      	ldr	r3, [pc, #412]	@ (8001f98 <HAL_RCC_ClockConfig+0x1f0>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2207      	movs	r2, #7
 8001e00:	4013      	ands	r3, r2
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d1ee      	bne.n	8001de6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2202      	movs	r2, #2
 8001e0e:	4013      	ands	r3, r2
 8001e10:	d017      	beq.n	8001e42 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2204      	movs	r2, #4
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d008      	beq.n	8001e2e <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e1c:	4b60      	ldr	r3, [pc, #384]	@ (8001fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	4a60      	ldr	r2, [pc, #384]	@ (8001fa4 <HAL_RCC_ClockConfig+0x1fc>)
 8001e22:	401a      	ands	r2, r3
 8001e24:	4b5e      	ldr	r3, [pc, #376]	@ (8001fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e26:	21b0      	movs	r1, #176	@ 0xb0
 8001e28:	0109      	lsls	r1, r1, #4
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e2e:	4b5c      	ldr	r3, [pc, #368]	@ (8001fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	4a5d      	ldr	r2, [pc, #372]	@ (8001fa8 <HAL_RCC_ClockConfig+0x200>)
 8001e34:	4013      	ands	r3, r2
 8001e36:	0019      	movs	r1, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68da      	ldr	r2, [r3, #12]
 8001e3c:	4b58      	ldr	r3, [pc, #352]	@ (8001fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2201      	movs	r2, #1
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d055      	beq.n	8001ef8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8001e4c:	4b54      	ldr	r3, [pc, #336]	@ (8001fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	221c      	movs	r2, #28
 8001e52:	4393      	bics	r3, r2
 8001e54:	0019      	movs	r1, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	4b51      	ldr	r3, [pc, #324]	@ (8001fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d107      	bne.n	8001e78 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e68:	4b4d      	ldr	r3, [pc, #308]	@ (8001fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	2380      	movs	r3, #128	@ 0x80
 8001e6e:	029b      	lsls	r3, r3, #10
 8001e70:	4013      	ands	r3, r2
 8001e72:	d11f      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e08b      	b.n	8001f90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d107      	bne.n	8001e90 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e80:	4b47      	ldr	r3, [pc, #284]	@ (8001fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	2380      	movs	r3, #128	@ 0x80
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d113      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e07f      	b.n	8001f90 <HAL_RCC_ClockConfig+0x1e8>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b03      	cmp	r3, #3
 8001e96:	d106      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001e98:	4b41      	ldr	r3, [pc, #260]	@ (8001fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d108      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e074      	b.n	8001f90 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001ea6:	4b3e      	ldr	r3, [pc, #248]	@ (8001fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8001ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eaa:	2202      	movs	r2, #2
 8001eac:	4013      	ands	r3, r2
 8001eae:	d101      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e06d      	b.n	8001f90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001eb4:	4b3a      	ldr	r3, [pc, #232]	@ (8001fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	2207      	movs	r2, #7
 8001eba:	4393      	bics	r3, r2
 8001ebc:	0019      	movs	r1, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	4b37      	ldr	r3, [pc, #220]	@ (8001fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ec8:	f7ff f9f6 	bl	80012b8 <HAL_GetTick>
 8001ecc:	0003      	movs	r3, r0
 8001ece:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed0:	e009      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001ed2:	f7ff f9f1 	bl	80012b8 <HAL_GetTick>
 8001ed6:	0002      	movs	r2, r0
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	4a2f      	ldr	r2, [pc, #188]	@ (8001f9c <HAL_RCC_ClockConfig+0x1f4>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e054      	b.n	8001f90 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee6:	4b2e      	ldr	r3, [pc, #184]	@ (8001fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	2238      	movs	r2, #56	@ 0x38
 8001eec:	401a      	ands	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d1ec      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ef8:	4b27      	ldr	r3, [pc, #156]	@ (8001f98 <HAL_RCC_ClockConfig+0x1f0>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2207      	movs	r2, #7
 8001efe:	4013      	ands	r3, r2
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d21e      	bcs.n	8001f44 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f06:	4b24      	ldr	r3, [pc, #144]	@ (8001f98 <HAL_RCC_ClockConfig+0x1f0>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2207      	movs	r2, #7
 8001f0c:	4393      	bics	r3, r2
 8001f0e:	0019      	movs	r1, r3
 8001f10:	4b21      	ldr	r3, [pc, #132]	@ (8001f98 <HAL_RCC_ClockConfig+0x1f0>)
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f18:	f7ff f9ce 	bl	80012b8 <HAL_GetTick>
 8001f1c:	0003      	movs	r3, r0
 8001f1e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f20:	e009      	b.n	8001f36 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001f22:	f7ff f9c9 	bl	80012b8 <HAL_GetTick>
 8001f26:	0002      	movs	r2, r0
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	4a1b      	ldr	r2, [pc, #108]	@ (8001f9c <HAL_RCC_ClockConfig+0x1f4>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e02c      	b.n	8001f90 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f36:	4b18      	ldr	r3, [pc, #96]	@ (8001f98 <HAL_RCC_ClockConfig+0x1f0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2207      	movs	r2, #7
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d1ee      	bne.n	8001f22 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2204      	movs	r2, #4
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d009      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001f4e:	4b14      	ldr	r3, [pc, #80]	@ (8001fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	4a16      	ldr	r2, [pc, #88]	@ (8001fac <HAL_RCC_ClockConfig+0x204>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	0019      	movs	r1, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691a      	ldr	r2, [r3, #16]
 8001f5c:	4b10      	ldr	r3, [pc, #64]	@ (8001fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001f62:	f000 f82b 	bl	8001fbc <HAL_RCC_GetSysClockFreq>
 8001f66:	0001      	movs	r1, r0
 8001f68:	4b0d      	ldr	r3, [pc, #52]	@ (8001fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001f6c:	0a1b      	lsrs	r3, r3, #8
 8001f6e:	220f      	movs	r2, #15
 8001f70:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001f72:	4b0f      	ldr	r3, [pc, #60]	@ (8001fb0 <HAL_RCC_ClockConfig+0x208>)
 8001f74:	0092      	lsls	r2, r2, #2
 8001f76:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001f78:	221f      	movs	r2, #31
 8001f7a:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001f7c:	000a      	movs	r2, r1
 8001f7e:	40da      	lsrs	r2, r3
 8001f80:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb4 <HAL_RCC_ClockConfig+0x20c>)
 8001f82:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f84:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb8 <HAL_RCC_ClockConfig+0x210>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	0018      	movs	r0, r3
 8001f8a:	f7ff f939 	bl	8001200 <HAL_InitTick>
 8001f8e:	0003      	movs	r3, r0
}
 8001f90:	0018      	movs	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	b004      	add	sp, #16
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40022000 	.word	0x40022000
 8001f9c:	00001388 	.word	0x00001388
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	ffff84ff 	.word	0xffff84ff
 8001fa8:	fffff0ff 	.word	0xfffff0ff
 8001fac:	ffff8fff 	.word	0xffff8fff
 8001fb0:	080034d0 	.word	0x080034d0
 8001fb4:	20000000 	.word	0x20000000
 8001fb8:	20000004 	.word	0x20000004

08001fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8001fc2:	4b23      	ldr	r3, [pc, #140]	@ (8002050 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	089b      	lsrs	r3, r3, #2
 8001fc8:	2207      	movs	r2, #7
 8001fca:	4013      	ands	r3, r2
 8001fcc:	3301      	adds	r3, #1
 8001fce:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001fd0:	4b1f      	ldr	r3, [pc, #124]	@ (8002050 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	2238      	movs	r2, #56	@ 0x38
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d10f      	bne.n	8001ffa <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001fda:	4b1d      	ldr	r3, [pc, #116]	@ (8002050 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	0adb      	lsrs	r3, r3, #11
 8001fe0:	2207      	movs	r2, #7
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	409a      	lsls	r2, r3
 8001fe8:	0013      	movs	r3, r2
 8001fea:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001fec:	6879      	ldr	r1, [r7, #4]
 8001fee:	4819      	ldr	r0, [pc, #100]	@ (8002054 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ff0:	f7fe f88a 	bl	8000108 <__udivsi3>
 8001ff4:	0003      	movs	r3, r0
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	e01e      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ffa:	4b15      	ldr	r3, [pc, #84]	@ (8002050 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	2238      	movs	r2, #56	@ 0x38
 8002000:	4013      	ands	r3, r2
 8002002:	2b08      	cmp	r3, #8
 8002004:	d102      	bne.n	800200c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002006:	4b14      	ldr	r3, [pc, #80]	@ (8002058 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	e015      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800200c:	4b10      	ldr	r3, [pc, #64]	@ (8002050 <HAL_RCC_GetSysClockFreq+0x94>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	2238      	movs	r2, #56	@ 0x38
 8002012:	4013      	ands	r3, r2
 8002014:	2b20      	cmp	r3, #32
 8002016:	d103      	bne.n	8002020 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002018:	2380      	movs	r3, #128	@ 0x80
 800201a:	021b      	lsls	r3, r3, #8
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	e00b      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002020:	4b0b      	ldr	r3, [pc, #44]	@ (8002050 <HAL_RCC_GetSysClockFreq+0x94>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	2238      	movs	r2, #56	@ 0x38
 8002026:	4013      	ands	r3, r2
 8002028:	2b18      	cmp	r3, #24
 800202a:	d103      	bne.n	8002034 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800202c:	23fa      	movs	r3, #250	@ 0xfa
 800202e:	01db      	lsls	r3, r3, #7
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	e001      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0x7c>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8002034:	2300      	movs	r3, #0
 8002036:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8002038:	68b9      	ldr	r1, [r7, #8]
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f7fe f864 	bl	8000108 <__udivsi3>
 8002040:	0003      	movs	r3, r0
 8002042:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8002044:	68fb      	ldr	r3, [r7, #12]
}
 8002046:	0018      	movs	r0, r3
 8002048:	46bd      	mov	sp, r7
 800204a:	b004      	add	sp, #16
 800204c:	bd80      	pop	{r7, pc}
 800204e:	46c0      	nop			@ (mov r8, r8)
 8002050:	40021000 	.word	0x40021000
 8002054:	02dc6c00 	.word	0x02dc6c00
 8002058:	007a1200 	.word	0x007a1200

0800205c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002060:	f7ff ffac 	bl	8001fbc <HAL_RCC_GetSysClockFreq>
 8002064:	0001      	movs	r1, r0
 8002066:	4b09      	ldr	r3, [pc, #36]	@ (800208c <HAL_RCC_GetHCLKFreq+0x30>)
 8002068:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800206a:	0a1b      	lsrs	r3, r3, #8
 800206c:	220f      	movs	r2, #15
 800206e:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002070:	4b07      	ldr	r3, [pc, #28]	@ (8002090 <HAL_RCC_GetHCLKFreq+0x34>)
 8002072:	0092      	lsls	r2, r2, #2
 8002074:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002076:	221f      	movs	r2, #31
 8002078:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800207a:	000a      	movs	r2, r1
 800207c:	40da      	lsrs	r2, r3
 800207e:	4b05      	ldr	r3, [pc, #20]	@ (8002094 <HAL_RCC_GetHCLKFreq+0x38>)
 8002080:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8002082:	4b04      	ldr	r3, [pc, #16]	@ (8002094 <HAL_RCC_GetHCLKFreq+0x38>)
 8002084:	681b      	ldr	r3, [r3, #0]
}
 8002086:	0018      	movs	r0, r3
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40021000 	.word	0x40021000
 8002090:	080034d0 	.word	0x080034d0
 8002094:	20000000 	.word	0x20000000

08002098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 800209c:	f7ff ffde 	bl	800205c <HAL_RCC_GetHCLKFreq>
 80020a0:	0001      	movs	r1, r0
 80020a2:	4b07      	ldr	r3, [pc, #28]	@ (80020c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	0b1b      	lsrs	r3, r3, #12
 80020a8:	2207      	movs	r2, #7
 80020aa:	401a      	ands	r2, r3
 80020ac:	4b05      	ldr	r3, [pc, #20]	@ (80020c4 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80020ae:	0092      	lsls	r2, r2, #2
 80020b0:	58d3      	ldr	r3, [r2, r3]
 80020b2:	221f      	movs	r2, #31
 80020b4:	4013      	ands	r3, r2
 80020b6:	40d9      	lsrs	r1, r3
 80020b8:	000b      	movs	r3, r1
}
 80020ba:	0018      	movs	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40021000 	.word	0x40021000
 80020c4:	08003510 	.word	0x08003510

080020c8 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80020d0:	2313      	movs	r3, #19
 80020d2:	18fb      	adds	r3, r7, r3
 80020d4:	2200      	movs	r2, #0
 80020d6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020d8:	2312      	movs	r3, #18
 80020da:	18fb      	adds	r3, r7, r3
 80020dc:	2200      	movs	r2, #0
 80020de:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2240      	movs	r2, #64	@ 0x40
 80020e6:	4013      	ands	r3, r2
 80020e8:	d100      	bne.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x24>
 80020ea:	e079      	b.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ec:	2011      	movs	r0, #17
 80020ee:	183b      	adds	r3, r7, r0
 80020f0:	2200      	movs	r2, #0
 80020f2:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020f4:	4b63      	ldr	r3, [pc, #396]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80020f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80020f8:	2380      	movs	r3, #128	@ 0x80
 80020fa:	055b      	lsls	r3, r3, #21
 80020fc:	4013      	ands	r3, r2
 80020fe:	d110      	bne.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002100:	4b60      	ldr	r3, [pc, #384]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002102:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002104:	4b5f      	ldr	r3, [pc, #380]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002106:	2180      	movs	r1, #128	@ 0x80
 8002108:	0549      	lsls	r1, r1, #21
 800210a:	430a      	orrs	r2, r1
 800210c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800210e:	4b5d      	ldr	r3, [pc, #372]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002110:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002112:	2380      	movs	r3, #128	@ 0x80
 8002114:	055b      	lsls	r3, r3, #21
 8002116:	4013      	ands	r3, r2
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800211c:	183b      	adds	r3, r7, r0
 800211e:	2201      	movs	r2, #1
 8002120:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8002122:	4b58      	ldr	r3, [pc, #352]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002124:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002126:	23c0      	movs	r3, #192	@ 0xc0
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4013      	ands	r3, r2
 800212c:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d019      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	429a      	cmp	r2, r3
 800213c:	d014      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 800213e:	4b51      	ldr	r3, [pc, #324]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002142:	4a51      	ldr	r2, [pc, #324]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002144:	4013      	ands	r3, r2
 8002146:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002148:	4b4e      	ldr	r3, [pc, #312]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800214a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800214c:	4b4d      	ldr	r3, [pc, #308]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800214e:	2180      	movs	r1, #128	@ 0x80
 8002150:	0249      	lsls	r1, r1, #9
 8002152:	430a      	orrs	r2, r1
 8002154:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002156:	4b4b      	ldr	r3, [pc, #300]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002158:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800215a:	4b4a      	ldr	r3, [pc, #296]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800215c:	494b      	ldr	r1, [pc, #300]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800215e:	400a      	ands	r2, r1
 8002160:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8002162:	4b48      	ldr	r3, [pc, #288]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	2201      	movs	r2, #1
 800216c:	4013      	ands	r3, r2
 800216e:	d016      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002170:	f7ff f8a2 	bl	80012b8 <HAL_GetTick>
 8002174:	0003      	movs	r3, r0
 8002176:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002178:	e00c      	b.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800217a:	f7ff f89d 	bl	80012b8 <HAL_GetTick>
 800217e:	0002      	movs	r2, r0
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	4a42      	ldr	r2, [pc, #264]	@ (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d904      	bls.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 800218a:	2313      	movs	r3, #19
 800218c:	18fb      	adds	r3, r7, r3
 800218e:	2203      	movs	r2, #3
 8002190:	701a      	strb	r2, [r3, #0]
          break;
 8002192:	e004      	b.n	800219e <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002194:	4b3b      	ldr	r3, [pc, #236]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002198:	2202      	movs	r2, #2
 800219a:	4013      	ands	r3, r2
 800219c:	d0ed      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 800219e:	2313      	movs	r3, #19
 80021a0:	18fb      	adds	r3, r7, r3
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10a      	bne.n	80021be <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021a8:	4b36      	ldr	r3, [pc, #216]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ac:	4a36      	ldr	r2, [pc, #216]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80021ae:	4013      	ands	r3, r2
 80021b0:	0019      	movs	r1, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	699a      	ldr	r2, [r3, #24]
 80021b6:	4b33      	ldr	r3, [pc, #204]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021b8:	430a      	orrs	r2, r1
 80021ba:	65da      	str	r2, [r3, #92]	@ 0x5c
 80021bc:	e005      	b.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021be:	2312      	movs	r3, #18
 80021c0:	18fb      	adds	r3, r7, r3
 80021c2:	2213      	movs	r2, #19
 80021c4:	18ba      	adds	r2, r7, r2
 80021c6:	7812      	ldrb	r2, [r2, #0]
 80021c8:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021ca:	2311      	movs	r3, #17
 80021cc:	18fb      	adds	r3, r7, r3
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d105      	bne.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021d8:	4b2a      	ldr	r3, [pc, #168]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021da:	492e      	ldr	r1, [pc, #184]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80021dc:	400a      	ands	r2, r1
 80021de:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2201      	movs	r2, #1
 80021e6:	4013      	ands	r3, r2
 80021e8:	d009      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021ea:	4b26      	ldr	r3, [pc, #152]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ee:	2203      	movs	r2, #3
 80021f0:	4393      	bics	r3, r2
 80021f2:	0019      	movs	r1, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	4b22      	ldr	r3, [pc, #136]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021fa:	430a      	orrs	r2, r1
 80021fc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2202      	movs	r2, #2
 8002204:	4013      	ands	r3, r2
 8002206:	d009      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002208:	4b1e      	ldr	r3, [pc, #120]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800220a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800220c:	4a22      	ldr	r2, [pc, #136]	@ (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800220e:	4013      	ands	r3, r2
 8002210:	0019      	movs	r1, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68da      	ldr	r2, [r3, #12]
 8002216:	4b1b      	ldr	r3, [pc, #108]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002218:	430a      	orrs	r2, r1
 800221a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2220      	movs	r2, #32
 8002222:	4013      	ands	r3, r2
 8002224:	d008      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002226:	4b17      	ldr	r3, [pc, #92]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	0899      	lsrs	r1, r3, #2
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	695a      	ldr	r2, [r3, #20]
 8002232:	4b14      	ldr	r3, [pc, #80]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002234:	430a      	orrs	r2, r1
 8002236:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2204      	movs	r2, #4
 800223e:	4013      	ands	r3, r2
 8002240:	d009      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002242:	4b10      	ldr	r3, [pc, #64]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002246:	4a15      	ldr	r2, [pc, #84]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002248:	4013      	ands	r3, r2
 800224a:	0019      	movs	r1, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	691a      	ldr	r2, [r3, #16]
 8002250:	4b0c      	ldr	r3, [pc, #48]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002252:	430a      	orrs	r2, r1
 8002254:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2280      	movs	r2, #128	@ 0x80
 800225c:	4013      	ands	r3, r2
 800225e:	d009      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8002260:	4b08      	ldr	r3, [pc, #32]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	22e0      	movs	r2, #224	@ 0xe0
 8002266:	4393      	bics	r3, r2
 8002268:	0019      	movs	r1, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	4b05      	ldr	r3, [pc, #20]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002270:	430a      	orrs	r2, r1
 8002272:	601a      	str	r2, [r3, #0]
  }
  return status;
 8002274:	2312      	movs	r3, #18
 8002276:	18fb      	adds	r3, r7, r3
 8002278:	781b      	ldrb	r3, [r3, #0]
}
 800227a:	0018      	movs	r0, r3
 800227c:	46bd      	mov	sp, r7
 800227e:	b006      	add	sp, #24
 8002280:	bd80      	pop	{r7, pc}
 8002282:	46c0      	nop			@ (mov r8, r8)
 8002284:	40021000 	.word	0x40021000
 8002288:	fffffcff 	.word	0xfffffcff
 800228c:	fffeffff 	.word	0xfffeffff
 8002290:	00001388 	.word	0x00001388
 8002294:	efffffff 	.word	0xefffffff
 8002298:	ffffcfff 	.word	0xffffcfff
 800229c:	ffff3fff 	.word	0xffff3fff

080022a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e046      	b.n	8002340 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2288      	movs	r2, #136	@ 0x88
 80022b6:	589b      	ldr	r3, [r3, r2]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d107      	bne.n	80022cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2284      	movs	r2, #132	@ 0x84
 80022c0:	2100      	movs	r1, #0
 80022c2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	0018      	movs	r0, r3
 80022c8:	f7fe fe72 	bl	8000fb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2288      	movs	r2, #136	@ 0x88
 80022d0:	2124      	movs	r1, #36	@ 0x24
 80022d2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2101      	movs	r1, #1
 80022e0:	438a      	bics	r2, r1
 80022e2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	0018      	movs	r0, r3
 80022f0:	f000 fd0c 	bl	8002d0c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	0018      	movs	r0, r3
 80022f8:	f000 fb8a 	bl	8002a10 <UART_SetConfig>
 80022fc:	0003      	movs	r3, r0
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d101      	bne.n	8002306 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e01c      	b.n	8002340 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	490d      	ldr	r1, [pc, #52]	@ (8002348 <HAL_UART_Init+0xa8>)
 8002312:	400a      	ands	r2, r1
 8002314:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	212a      	movs	r1, #42	@ 0x2a
 8002322:	438a      	bics	r2, r1
 8002324:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2101      	movs	r1, #1
 8002332:	430a      	orrs	r2, r1
 8002334:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	0018      	movs	r0, r3
 800233a:	f000 fd9b 	bl	8002e74 <UART_CheckIdleState>
 800233e:	0003      	movs	r3, r0
}
 8002340:	0018      	movs	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	b002      	add	sp, #8
 8002346:	bd80      	pop	{r7, pc}
 8002348:	ffffb7ff 	.word	0xffffb7ff

0800234c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800234c:	b5b0      	push	{r4, r5, r7, lr}
 800234e:	b0aa      	sub	sp, #168	@ 0xa8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	22a4      	movs	r2, #164	@ 0xa4
 800235c:	18b9      	adds	r1, r7, r2
 800235e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	20a0      	movs	r0, #160	@ 0xa0
 8002368:	1839      	adds	r1, r7, r0
 800236a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	249c      	movs	r4, #156	@ 0x9c
 8002374:	1939      	adds	r1, r7, r4
 8002376:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002378:	0011      	movs	r1, r2
 800237a:	18bb      	adds	r3, r7, r2
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4aa2      	ldr	r2, [pc, #648]	@ (8002608 <HAL_UART_IRQHandler+0x2bc>)
 8002380:	4013      	ands	r3, r2
 8002382:	2298      	movs	r2, #152	@ 0x98
 8002384:	18bd      	adds	r5, r7, r2
 8002386:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002388:	18bb      	adds	r3, r7, r2
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d11a      	bne.n	80023c6 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002390:	187b      	adds	r3, r7, r1
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2220      	movs	r2, #32
 8002396:	4013      	ands	r3, r2
 8002398:	d015      	beq.n	80023c6 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800239a:	183b      	adds	r3, r7, r0
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2220      	movs	r2, #32
 80023a0:	4013      	ands	r3, r2
 80023a2:	d105      	bne.n	80023b0 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80023a4:	193b      	adds	r3, r7, r4
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	2380      	movs	r3, #128	@ 0x80
 80023aa:	055b      	lsls	r3, r3, #21
 80023ac:	4013      	ands	r3, r2
 80023ae:	d00a      	beq.n	80023c6 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d100      	bne.n	80023ba <HAL_UART_IRQHandler+0x6e>
 80023b8:	e2fb      	b.n	80029b2 <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	0010      	movs	r0, r2
 80023c2:	4798      	blx	r3
      }
      return;
 80023c4:	e2f5      	b.n	80029b2 <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80023c6:	2398      	movs	r3, #152	@ 0x98
 80023c8:	18fb      	adds	r3, r7, r3
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d100      	bne.n	80023d2 <HAL_UART_IRQHandler+0x86>
 80023d0:	e122      	b.n	8002618 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80023d2:	239c      	movs	r3, #156	@ 0x9c
 80023d4:	18fb      	adds	r3, r7, r3
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a8c      	ldr	r2, [pc, #560]	@ (800260c <HAL_UART_IRQHandler+0x2c0>)
 80023da:	4013      	ands	r3, r2
 80023dc:	d106      	bne.n	80023ec <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80023de:	23a0      	movs	r3, #160	@ 0xa0
 80023e0:	18fb      	adds	r3, r7, r3
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a8a      	ldr	r2, [pc, #552]	@ (8002610 <HAL_UART_IRQHandler+0x2c4>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	d100      	bne.n	80023ec <HAL_UART_IRQHandler+0xa0>
 80023ea:	e115      	b.n	8002618 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80023ec:	23a4      	movs	r3, #164	@ 0xa4
 80023ee:	18fb      	adds	r3, r7, r3
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2201      	movs	r2, #1
 80023f4:	4013      	ands	r3, r2
 80023f6:	d012      	beq.n	800241e <HAL_UART_IRQHandler+0xd2>
 80023f8:	23a0      	movs	r3, #160	@ 0xa0
 80023fa:	18fb      	adds	r3, r7, r3
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	2380      	movs	r3, #128	@ 0x80
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	4013      	ands	r3, r2
 8002404:	d00b      	beq.n	800241e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2201      	movs	r2, #1
 800240c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2290      	movs	r2, #144	@ 0x90
 8002412:	589b      	ldr	r3, [r3, r2]
 8002414:	2201      	movs	r2, #1
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2190      	movs	r1, #144	@ 0x90
 800241c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800241e:	23a4      	movs	r3, #164	@ 0xa4
 8002420:	18fb      	adds	r3, r7, r3
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2202      	movs	r2, #2
 8002426:	4013      	ands	r3, r2
 8002428:	d011      	beq.n	800244e <HAL_UART_IRQHandler+0x102>
 800242a:	239c      	movs	r3, #156	@ 0x9c
 800242c:	18fb      	adds	r3, r7, r3
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2201      	movs	r2, #1
 8002432:	4013      	ands	r3, r2
 8002434:	d00b      	beq.n	800244e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2202      	movs	r2, #2
 800243c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2290      	movs	r2, #144	@ 0x90
 8002442:	589b      	ldr	r3, [r3, r2]
 8002444:	2204      	movs	r2, #4
 8002446:	431a      	orrs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2190      	movs	r1, #144	@ 0x90
 800244c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800244e:	23a4      	movs	r3, #164	@ 0xa4
 8002450:	18fb      	adds	r3, r7, r3
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2204      	movs	r2, #4
 8002456:	4013      	ands	r3, r2
 8002458:	d011      	beq.n	800247e <HAL_UART_IRQHandler+0x132>
 800245a:	239c      	movs	r3, #156	@ 0x9c
 800245c:	18fb      	adds	r3, r7, r3
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2201      	movs	r2, #1
 8002462:	4013      	ands	r3, r2
 8002464:	d00b      	beq.n	800247e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2204      	movs	r2, #4
 800246c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2290      	movs	r2, #144	@ 0x90
 8002472:	589b      	ldr	r3, [r3, r2]
 8002474:	2202      	movs	r2, #2
 8002476:	431a      	orrs	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2190      	movs	r1, #144	@ 0x90
 800247c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800247e:	23a4      	movs	r3, #164	@ 0xa4
 8002480:	18fb      	adds	r3, r7, r3
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2208      	movs	r2, #8
 8002486:	4013      	ands	r3, r2
 8002488:	d017      	beq.n	80024ba <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800248a:	23a0      	movs	r3, #160	@ 0xa0
 800248c:	18fb      	adds	r3, r7, r3
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2220      	movs	r2, #32
 8002492:	4013      	ands	r3, r2
 8002494:	d105      	bne.n	80024a2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002496:	239c      	movs	r3, #156	@ 0x9c
 8002498:	18fb      	adds	r3, r7, r3
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a5b      	ldr	r2, [pc, #364]	@ (800260c <HAL_UART_IRQHandler+0x2c0>)
 800249e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80024a0:	d00b      	beq.n	80024ba <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2208      	movs	r2, #8
 80024a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2290      	movs	r2, #144	@ 0x90
 80024ae:	589b      	ldr	r3, [r3, r2]
 80024b0:	2208      	movs	r2, #8
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2190      	movs	r1, #144	@ 0x90
 80024b8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80024ba:	23a4      	movs	r3, #164	@ 0xa4
 80024bc:	18fb      	adds	r3, r7, r3
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	2380      	movs	r3, #128	@ 0x80
 80024c2:	011b      	lsls	r3, r3, #4
 80024c4:	4013      	ands	r3, r2
 80024c6:	d013      	beq.n	80024f0 <HAL_UART_IRQHandler+0x1a4>
 80024c8:	23a0      	movs	r3, #160	@ 0xa0
 80024ca:	18fb      	adds	r3, r7, r3
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	2380      	movs	r3, #128	@ 0x80
 80024d0:	04db      	lsls	r3, r3, #19
 80024d2:	4013      	ands	r3, r2
 80024d4:	d00c      	beq.n	80024f0 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2280      	movs	r2, #128	@ 0x80
 80024dc:	0112      	lsls	r2, r2, #4
 80024de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2290      	movs	r2, #144	@ 0x90
 80024e4:	589b      	ldr	r3, [r3, r2]
 80024e6:	2220      	movs	r2, #32
 80024e8:	431a      	orrs	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2190      	movs	r1, #144	@ 0x90
 80024ee:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2290      	movs	r2, #144	@ 0x90
 80024f4:	589b      	ldr	r3, [r3, r2]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d100      	bne.n	80024fc <HAL_UART_IRQHandler+0x1b0>
 80024fa:	e25c      	b.n	80029b6 <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80024fc:	23a4      	movs	r3, #164	@ 0xa4
 80024fe:	18fb      	adds	r3, r7, r3
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2220      	movs	r2, #32
 8002504:	4013      	ands	r3, r2
 8002506:	d015      	beq.n	8002534 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002508:	23a0      	movs	r3, #160	@ 0xa0
 800250a:	18fb      	adds	r3, r7, r3
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2220      	movs	r2, #32
 8002510:	4013      	ands	r3, r2
 8002512:	d106      	bne.n	8002522 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002514:	239c      	movs	r3, #156	@ 0x9c
 8002516:	18fb      	adds	r3, r7, r3
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	2380      	movs	r3, #128	@ 0x80
 800251c:	055b      	lsls	r3, r3, #21
 800251e:	4013      	ands	r3, r2
 8002520:	d008      	beq.n	8002534 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002526:	2b00      	cmp	r3, #0
 8002528:	d004      	beq.n	8002534 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	0010      	movs	r0, r2
 8002532:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2290      	movs	r2, #144	@ 0x90
 8002538:	589b      	ldr	r3, [r3, r2]
 800253a:	2194      	movs	r1, #148	@ 0x94
 800253c:	187a      	adds	r2, r7, r1
 800253e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2240      	movs	r2, #64	@ 0x40
 8002548:	4013      	ands	r3, r2
 800254a:	2b40      	cmp	r3, #64	@ 0x40
 800254c:	d004      	beq.n	8002558 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800254e:	187b      	adds	r3, r7, r1
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2228      	movs	r2, #40	@ 0x28
 8002554:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002556:	d04c      	beq.n	80025f2 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	0018      	movs	r0, r3
 800255c:	f000 fda4 	bl	80030a8 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	2240      	movs	r2, #64	@ 0x40
 8002568:	4013      	ands	r3, r2
 800256a:	2b40      	cmp	r3, #64	@ 0x40
 800256c:	d13c      	bne.n	80025e8 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800256e:	f3ef 8310 	mrs	r3, PRIMASK
 8002572:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8002574:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002576:	2090      	movs	r0, #144	@ 0x90
 8002578:	183a      	adds	r2, r7, r0
 800257a:	6013      	str	r3, [r2, #0]
 800257c:	2301      	movs	r3, #1
 800257e:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002580:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002582:	f383 8810 	msr	PRIMASK, r3
}
 8002586:	46c0      	nop			@ (mov r8, r8)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2140      	movs	r1, #64	@ 0x40
 8002594:	438a      	bics	r2, r1
 8002596:	609a      	str	r2, [r3, #8]
 8002598:	183b      	adds	r3, r7, r0
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800259e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025a0:	f383 8810 	msr	PRIMASK, r3
}
 80025a4:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2280      	movs	r2, #128	@ 0x80
 80025aa:	589b      	ldr	r3, [r3, r2]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d016      	beq.n	80025de <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2280      	movs	r2, #128	@ 0x80
 80025b4:	589b      	ldr	r3, [r3, r2]
 80025b6:	4a17      	ldr	r2, [pc, #92]	@ (8002614 <HAL_UART_IRQHandler+0x2c8>)
 80025b8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2280      	movs	r2, #128	@ 0x80
 80025be:	589b      	ldr	r3, [r3, r2]
 80025c0:	0018      	movs	r0, r3
 80025c2:	f7fe ffe7 	bl	8001594 <HAL_DMA_Abort_IT>
 80025c6:	1e03      	subs	r3, r0, #0
 80025c8:	d01c      	beq.n	8002604 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2280      	movs	r2, #128	@ 0x80
 80025ce:	589b      	ldr	r3, [r3, r2]
 80025d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	2180      	movs	r1, #128	@ 0x80
 80025d6:	5852      	ldr	r2, [r2, r1]
 80025d8:	0010      	movs	r0, r2
 80025da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025dc:	e012      	b.n	8002604 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	0018      	movs	r0, r3
 80025e2:	f000 fa01 	bl	80029e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025e6:	e00d      	b.n	8002604 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	0018      	movs	r0, r3
 80025ec:	f000 f9fc 	bl	80029e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025f0:	e008      	b.n	8002604 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	0018      	movs	r0, r3
 80025f6:	f000 f9f7 	bl	80029e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2290      	movs	r2, #144	@ 0x90
 80025fe:	2100      	movs	r1, #0
 8002600:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002602:	e1d8      	b.n	80029b6 <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002604:	46c0      	nop			@ (mov r8, r8)
    return;
 8002606:	e1d6      	b.n	80029b6 <HAL_UART_IRQHandler+0x66a>
 8002608:	0000080f 	.word	0x0000080f
 800260c:	10000001 	.word	0x10000001
 8002610:	04000120 	.word	0x04000120
 8002614:	08003175 	.word	0x08003175

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800261c:	2b01      	cmp	r3, #1
 800261e:	d000      	beq.n	8002622 <HAL_UART_IRQHandler+0x2d6>
 8002620:	e15d      	b.n	80028de <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002622:	23a4      	movs	r3, #164	@ 0xa4
 8002624:	18fb      	adds	r3, r7, r3
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2210      	movs	r2, #16
 800262a:	4013      	ands	r3, r2
 800262c:	d100      	bne.n	8002630 <HAL_UART_IRQHandler+0x2e4>
 800262e:	e156      	b.n	80028de <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002630:	23a0      	movs	r3, #160	@ 0xa0
 8002632:	18fb      	adds	r3, r7, r3
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2210      	movs	r2, #16
 8002638:	4013      	ands	r3, r2
 800263a:	d100      	bne.n	800263e <HAL_UART_IRQHandler+0x2f2>
 800263c:	e14f      	b.n	80028de <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2210      	movs	r2, #16
 8002644:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2240      	movs	r2, #64	@ 0x40
 800264e:	4013      	ands	r3, r2
 8002650:	2b40      	cmp	r3, #64	@ 0x40
 8002652:	d000      	beq.n	8002656 <HAL_UART_IRQHandler+0x30a>
 8002654:	e0c3      	b.n	80027de <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2280      	movs	r2, #128	@ 0x80
 800265a:	589b      	ldr	r3, [r3, r2]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	217e      	movs	r1, #126	@ 0x7e
 8002662:	187b      	adds	r3, r7, r1
 8002664:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002666:	187b      	adds	r3, r7, r1
 8002668:	881b      	ldrh	r3, [r3, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d100      	bne.n	8002670 <HAL_UART_IRQHandler+0x324>
 800266e:	e097      	b.n	80027a0 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	225c      	movs	r2, #92	@ 0x5c
 8002674:	5a9b      	ldrh	r3, [r3, r2]
 8002676:	187a      	adds	r2, r7, r1
 8002678:	8812      	ldrh	r2, [r2, #0]
 800267a:	429a      	cmp	r2, r3
 800267c:	d300      	bcc.n	8002680 <HAL_UART_IRQHandler+0x334>
 800267e:	e08f      	b.n	80027a0 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	187a      	adds	r2, r7, r1
 8002684:	215e      	movs	r1, #94	@ 0x5e
 8002686:	8812      	ldrh	r2, [r2, #0]
 8002688:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2280      	movs	r2, #128	@ 0x80
 800268e:	589b      	ldr	r3, [r3, r2]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2220      	movs	r2, #32
 8002696:	4013      	ands	r3, r2
 8002698:	d170      	bne.n	800277c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800269a:	f3ef 8310 	mrs	r3, PRIMASK
 800269e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80026a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80026a4:	2301      	movs	r3, #1
 80026a6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026aa:	f383 8810 	msr	PRIMASK, r3
}
 80026ae:	46c0      	nop			@ (mov r8, r8)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	49c4      	ldr	r1, [pc, #784]	@ (80029cc <HAL_UART_IRQHandler+0x680>)
 80026bc:	400a      	ands	r2, r1
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026c6:	f383 8810 	msr	PRIMASK, r3
}
 80026ca:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80026cc:	f3ef 8310 	mrs	r3, PRIMASK
 80026d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80026d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026d4:	677b      	str	r3, [r7, #116]	@ 0x74
 80026d6:	2301      	movs	r3, #1
 80026d8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026dc:	f383 8810 	msr	PRIMASK, r3
}
 80026e0:	46c0      	nop			@ (mov r8, r8)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2101      	movs	r1, #1
 80026ee:	438a      	bics	r2, r1
 80026f0:	609a      	str	r2, [r3, #8]
 80026f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026f4:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026f8:	f383 8810 	msr	PRIMASK, r3
}
 80026fc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80026fe:	f3ef 8310 	mrs	r3, PRIMASK
 8002702:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002704:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002706:	673b      	str	r3, [r7, #112]	@ 0x70
 8002708:	2301      	movs	r3, #1
 800270a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800270c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800270e:	f383 8810 	msr	PRIMASK, r3
}
 8002712:	46c0      	nop			@ (mov r8, r8)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2140      	movs	r1, #64	@ 0x40
 8002720:	438a      	bics	r2, r1
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002726:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002728:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800272a:	f383 8810 	msr	PRIMASK, r3
}
 800272e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	228c      	movs	r2, #140	@ 0x8c
 8002734:	2120      	movs	r1, #32
 8002736:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800273e:	f3ef 8310 	mrs	r3, PRIMASK
 8002742:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8002744:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002746:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002748:	2301      	movs	r3, #1
 800274a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800274c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800274e:	f383 8810 	msr	PRIMASK, r3
}
 8002752:	46c0      	nop			@ (mov r8, r8)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2110      	movs	r1, #16
 8002760:	438a      	bics	r2, r1
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002766:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002768:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800276a:	f383 8810 	msr	PRIMASK, r3
}
 800276e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2280      	movs	r2, #128	@ 0x80
 8002774:	589b      	ldr	r3, [r3, r2]
 8002776:	0018      	movs	r0, r3
 8002778:	f7fe feaa 	bl	80014d0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2202      	movs	r2, #2
 8002780:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	225c      	movs	r2, #92	@ 0x5c
 8002786:	5a9a      	ldrh	r2, [r3, r2]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	215e      	movs	r1, #94	@ 0x5e
 800278c:	5a5b      	ldrh	r3, [r3, r1]
 800278e:	b29b      	uxth	r3, r3
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	b29a      	uxth	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	0011      	movs	r1, r2
 8002798:	0018      	movs	r0, r3
 800279a:	f000 f92d 	bl	80029f8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800279e:	e10c      	b.n	80029ba <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	225c      	movs	r2, #92	@ 0x5c
 80027a4:	5a9b      	ldrh	r3, [r3, r2]
 80027a6:	227e      	movs	r2, #126	@ 0x7e
 80027a8:	18ba      	adds	r2, r7, r2
 80027aa:	8812      	ldrh	r2, [r2, #0]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d000      	beq.n	80027b2 <HAL_UART_IRQHandler+0x466>
 80027b0:	e103      	b.n	80029ba <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2280      	movs	r2, #128	@ 0x80
 80027b6:	589b      	ldr	r3, [r3, r2]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2220      	movs	r2, #32
 80027be:	4013      	ands	r3, r2
 80027c0:	2b20      	cmp	r3, #32
 80027c2:	d000      	beq.n	80027c6 <HAL_UART_IRQHandler+0x47a>
 80027c4:	e0f9      	b.n	80029ba <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2202      	movs	r2, #2
 80027ca:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	225c      	movs	r2, #92	@ 0x5c
 80027d0:	5a9a      	ldrh	r2, [r3, r2]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	0011      	movs	r1, r2
 80027d6:	0018      	movs	r0, r3
 80027d8:	f000 f90e 	bl	80029f8 <HAL_UARTEx_RxEventCallback>
      return;
 80027dc:	e0ed      	b.n	80029ba <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	225c      	movs	r2, #92	@ 0x5c
 80027e2:	5a99      	ldrh	r1, [r3, r2]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	225e      	movs	r2, #94	@ 0x5e
 80027e8:	5a9b      	ldrh	r3, [r3, r2]
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	208e      	movs	r0, #142	@ 0x8e
 80027ee:	183b      	adds	r3, r7, r0
 80027f0:	1a8a      	subs	r2, r1, r2
 80027f2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	225e      	movs	r2, #94	@ 0x5e
 80027f8:	5a9b      	ldrh	r3, [r3, r2]
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d100      	bne.n	8002802 <HAL_UART_IRQHandler+0x4b6>
 8002800:	e0dd      	b.n	80029be <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 8002802:	183b      	adds	r3, r7, r0
 8002804:	881b      	ldrh	r3, [r3, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d100      	bne.n	800280c <HAL_UART_IRQHandler+0x4c0>
 800280a:	e0d8      	b.n	80029be <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800280c:	f3ef 8310 	mrs	r3, PRIMASK
 8002810:	60fb      	str	r3, [r7, #12]
  return(result);
 8002812:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002814:	2488      	movs	r4, #136	@ 0x88
 8002816:	193a      	adds	r2, r7, r4
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	2301      	movs	r3, #1
 800281c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	f383 8810 	msr	PRIMASK, r3
}
 8002824:	46c0      	nop			@ (mov r8, r8)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4967      	ldr	r1, [pc, #412]	@ (80029d0 <HAL_UART_IRQHandler+0x684>)
 8002832:	400a      	ands	r2, r1
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	193b      	adds	r3, r7, r4
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f383 8810 	msr	PRIMASK, r3
}
 8002842:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002844:	f3ef 8310 	mrs	r3, PRIMASK
 8002848:	61bb      	str	r3, [r7, #24]
  return(result);
 800284a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800284c:	2484      	movs	r4, #132	@ 0x84
 800284e:	193a      	adds	r2, r7, r4
 8002850:	6013      	str	r3, [r2, #0]
 8002852:	2301      	movs	r3, #1
 8002854:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	f383 8810 	msr	PRIMASK, r3
}
 800285c:	46c0      	nop			@ (mov r8, r8)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	495a      	ldr	r1, [pc, #360]	@ (80029d4 <HAL_UART_IRQHandler+0x688>)
 800286a:	400a      	ands	r2, r1
 800286c:	609a      	str	r2, [r3, #8]
 800286e:	193b      	adds	r3, r7, r4
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002874:	6a3b      	ldr	r3, [r7, #32]
 8002876:	f383 8810 	msr	PRIMASK, r3
}
 800287a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	228c      	movs	r2, #140	@ 0x8c
 8002880:	2120      	movs	r1, #32
 8002882:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002890:	f3ef 8310 	mrs	r3, PRIMASK
 8002894:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002898:	2480      	movs	r4, #128	@ 0x80
 800289a:	193a      	adds	r2, r7, r4
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	2301      	movs	r3, #1
 80028a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028a4:	f383 8810 	msr	PRIMASK, r3
}
 80028a8:	46c0      	nop			@ (mov r8, r8)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2110      	movs	r1, #16
 80028b6:	438a      	bics	r2, r1
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	193b      	adds	r3, r7, r4
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028c2:	f383 8810 	msr	PRIMASK, r3
}
 80028c6:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2202      	movs	r2, #2
 80028cc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80028ce:	183b      	adds	r3, r7, r0
 80028d0:	881a      	ldrh	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	0011      	movs	r1, r2
 80028d6:	0018      	movs	r0, r3
 80028d8:	f000 f88e 	bl	80029f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80028dc:	e06f      	b.n	80029be <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80028de:	23a4      	movs	r3, #164	@ 0xa4
 80028e0:	18fb      	adds	r3, r7, r3
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	2380      	movs	r3, #128	@ 0x80
 80028e6:	035b      	lsls	r3, r3, #13
 80028e8:	4013      	ands	r3, r2
 80028ea:	d010      	beq.n	800290e <HAL_UART_IRQHandler+0x5c2>
 80028ec:	239c      	movs	r3, #156	@ 0x9c
 80028ee:	18fb      	adds	r3, r7, r3
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	2380      	movs	r3, #128	@ 0x80
 80028f4:	03db      	lsls	r3, r3, #15
 80028f6:	4013      	ands	r3, r2
 80028f8:	d009      	beq.n	800290e <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2280      	movs	r2, #128	@ 0x80
 8002900:	0352      	lsls	r2, r2, #13
 8002902:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	0018      	movs	r0, r3
 8002908:	f000 fc77 	bl	80031fa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800290c:	e05a      	b.n	80029c4 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800290e:	23a4      	movs	r3, #164	@ 0xa4
 8002910:	18fb      	adds	r3, r7, r3
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2280      	movs	r2, #128	@ 0x80
 8002916:	4013      	ands	r3, r2
 8002918:	d016      	beq.n	8002948 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800291a:	23a0      	movs	r3, #160	@ 0xa0
 800291c:	18fb      	adds	r3, r7, r3
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2280      	movs	r2, #128	@ 0x80
 8002922:	4013      	ands	r3, r2
 8002924:	d106      	bne.n	8002934 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002926:	239c      	movs	r3, #156	@ 0x9c
 8002928:	18fb      	adds	r3, r7, r3
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	2380      	movs	r3, #128	@ 0x80
 800292e:	041b      	lsls	r3, r3, #16
 8002930:	4013      	ands	r3, r2
 8002932:	d009      	beq.n	8002948 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002938:	2b00      	cmp	r3, #0
 800293a:	d042      	beq.n	80029c2 <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	0010      	movs	r0, r2
 8002944:	4798      	blx	r3
    }
    return;
 8002946:	e03c      	b.n	80029c2 <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002948:	23a4      	movs	r3, #164	@ 0xa4
 800294a:	18fb      	adds	r3, r7, r3
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2240      	movs	r2, #64	@ 0x40
 8002950:	4013      	ands	r3, r2
 8002952:	d00a      	beq.n	800296a <HAL_UART_IRQHandler+0x61e>
 8002954:	23a0      	movs	r3, #160	@ 0xa0
 8002956:	18fb      	adds	r3, r7, r3
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2240      	movs	r2, #64	@ 0x40
 800295c:	4013      	ands	r3, r2
 800295e:	d004      	beq.n	800296a <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	0018      	movs	r0, r3
 8002964:	f000 fc1d 	bl	80031a2 <UART_EndTransmit_IT>
    return;
 8002968:	e02c      	b.n	80029c4 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800296a:	23a4      	movs	r3, #164	@ 0xa4
 800296c:	18fb      	adds	r3, r7, r3
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	2380      	movs	r3, #128	@ 0x80
 8002972:	041b      	lsls	r3, r3, #16
 8002974:	4013      	ands	r3, r2
 8002976:	d00b      	beq.n	8002990 <HAL_UART_IRQHandler+0x644>
 8002978:	23a0      	movs	r3, #160	@ 0xa0
 800297a:	18fb      	adds	r3, r7, r3
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	2380      	movs	r3, #128	@ 0x80
 8002980:	05db      	lsls	r3, r3, #23
 8002982:	4013      	ands	r3, r2
 8002984:	d004      	beq.n	8002990 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	0018      	movs	r0, r3
 800298a:	f000 fc46 	bl	800321a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800298e:	e019      	b.n	80029c4 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002990:	23a4      	movs	r3, #164	@ 0xa4
 8002992:	18fb      	adds	r3, r7, r3
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	2380      	movs	r3, #128	@ 0x80
 8002998:	045b      	lsls	r3, r3, #17
 800299a:	4013      	ands	r3, r2
 800299c:	d012      	beq.n	80029c4 <HAL_UART_IRQHandler+0x678>
 800299e:	23a0      	movs	r3, #160	@ 0xa0
 80029a0:	18fb      	adds	r3, r7, r3
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	da0d      	bge.n	80029c4 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	0018      	movs	r0, r3
 80029ac:	f000 fc2d 	bl	800320a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80029b0:	e008      	b.n	80029c4 <HAL_UART_IRQHandler+0x678>
      return;
 80029b2:	46c0      	nop			@ (mov r8, r8)
 80029b4:	e006      	b.n	80029c4 <HAL_UART_IRQHandler+0x678>
    return;
 80029b6:	46c0      	nop			@ (mov r8, r8)
 80029b8:	e004      	b.n	80029c4 <HAL_UART_IRQHandler+0x678>
      return;
 80029ba:	46c0      	nop			@ (mov r8, r8)
 80029bc:	e002      	b.n	80029c4 <HAL_UART_IRQHandler+0x678>
      return;
 80029be:	46c0      	nop			@ (mov r8, r8)
 80029c0:	e000      	b.n	80029c4 <HAL_UART_IRQHandler+0x678>
    return;
 80029c2:	46c0      	nop			@ (mov r8, r8)
  }
}
 80029c4:	46bd      	mov	sp, r7
 80029c6:	b02a      	add	sp, #168	@ 0xa8
 80029c8:	bdb0      	pop	{r4, r5, r7, pc}
 80029ca:	46c0      	nop			@ (mov r8, r8)
 80029cc:	fffffeff 	.word	0xfffffeff
 80029d0:	fffffedf 	.word	0xfffffedf
 80029d4:	effffffe 	.word	0xeffffffe

080029d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80029e0:	46c0      	nop			@ (mov r8, r8)
 80029e2:	46bd      	mov	sp, r7
 80029e4:	b002      	add	sp, #8
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80029f0:	46c0      	nop			@ (mov r8, r8)
 80029f2:	46bd      	mov	sp, r7
 80029f4:	b002      	add	sp, #8
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	000a      	movs	r2, r1
 8002a02:	1cbb      	adds	r3, r7, #2
 8002a04:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a06:	46c0      	nop			@ (mov r8, r8)
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	b002      	add	sp, #8
 8002a0c:	bd80      	pop	{r7, pc}
	...

08002a10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b088      	sub	sp, #32
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a18:	231e      	movs	r3, #30
 8002a1a:	18fb      	adds	r3, r7, r3
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4aab      	ldr	r2, [pc, #684]	@ (8002cec <UART_SetConfig+0x2dc>)
 8002a40:	4013      	ands	r3, r2
 8002a42:	0019      	movs	r1, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	4aa6      	ldr	r2, [pc, #664]	@ (8002cf0 <UART_SetConfig+0x2e0>)
 8002a56:	4013      	ands	r3, r2
 8002a58:	0019      	movs	r1, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	4a9d      	ldr	r2, [pc, #628]	@ (8002cf4 <UART_SetConfig+0x2e4>)
 8002a7e:	4013      	ands	r3, r2
 8002a80:	0019      	movs	r1, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a92:	220f      	movs	r2, #15
 8002a94:	4393      	bics	r3, r2
 8002a96:	0019      	movs	r1, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a93      	ldr	r2, [pc, #588]	@ (8002cf8 <UART_SetConfig+0x2e8>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d127      	bne.n	8002afe <UART_SetConfig+0xee>
 8002aae:	4b93      	ldr	r3, [pc, #588]	@ (8002cfc <UART_SetConfig+0x2ec>)
 8002ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ab2:	2203      	movs	r2, #3
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	2b03      	cmp	r3, #3
 8002ab8:	d017      	beq.n	8002aea <UART_SetConfig+0xda>
 8002aba:	d81b      	bhi.n	8002af4 <UART_SetConfig+0xe4>
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d00a      	beq.n	8002ad6 <UART_SetConfig+0xc6>
 8002ac0:	d818      	bhi.n	8002af4 <UART_SetConfig+0xe4>
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d002      	beq.n	8002acc <UART_SetConfig+0xbc>
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d00a      	beq.n	8002ae0 <UART_SetConfig+0xd0>
 8002aca:	e013      	b.n	8002af4 <UART_SetConfig+0xe4>
 8002acc:	231f      	movs	r3, #31
 8002ace:	18fb      	adds	r3, r7, r3
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	701a      	strb	r2, [r3, #0]
 8002ad4:	e021      	b.n	8002b1a <UART_SetConfig+0x10a>
 8002ad6:	231f      	movs	r3, #31
 8002ad8:	18fb      	adds	r3, r7, r3
 8002ada:	2202      	movs	r2, #2
 8002adc:	701a      	strb	r2, [r3, #0]
 8002ade:	e01c      	b.n	8002b1a <UART_SetConfig+0x10a>
 8002ae0:	231f      	movs	r3, #31
 8002ae2:	18fb      	adds	r3, r7, r3
 8002ae4:	2204      	movs	r2, #4
 8002ae6:	701a      	strb	r2, [r3, #0]
 8002ae8:	e017      	b.n	8002b1a <UART_SetConfig+0x10a>
 8002aea:	231f      	movs	r3, #31
 8002aec:	18fb      	adds	r3, r7, r3
 8002aee:	2208      	movs	r2, #8
 8002af0:	701a      	strb	r2, [r3, #0]
 8002af2:	e012      	b.n	8002b1a <UART_SetConfig+0x10a>
 8002af4:	231f      	movs	r3, #31
 8002af6:	18fb      	adds	r3, r7, r3
 8002af8:	2210      	movs	r2, #16
 8002afa:	701a      	strb	r2, [r3, #0]
 8002afc:	e00d      	b.n	8002b1a <UART_SetConfig+0x10a>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a7f      	ldr	r2, [pc, #508]	@ (8002d00 <UART_SetConfig+0x2f0>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d104      	bne.n	8002b12 <UART_SetConfig+0x102>
 8002b08:	231f      	movs	r3, #31
 8002b0a:	18fb      	adds	r3, r7, r3
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	701a      	strb	r2, [r3, #0]
 8002b10:	e003      	b.n	8002b1a <UART_SetConfig+0x10a>
 8002b12:	231f      	movs	r3, #31
 8002b14:	18fb      	adds	r3, r7, r3
 8002b16:	2210      	movs	r2, #16
 8002b18:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	69da      	ldr	r2, [r3, #28]
 8002b1e:	2380      	movs	r3, #128	@ 0x80
 8002b20:	021b      	lsls	r3, r3, #8
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d000      	beq.n	8002b28 <UART_SetConfig+0x118>
 8002b26:	e06f      	b.n	8002c08 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8002b28:	231f      	movs	r3, #31
 8002b2a:	18fb      	adds	r3, r7, r3
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b08      	cmp	r3, #8
 8002b30:	d01f      	beq.n	8002b72 <UART_SetConfig+0x162>
 8002b32:	dc22      	bgt.n	8002b7a <UART_SetConfig+0x16a>
 8002b34:	2b04      	cmp	r3, #4
 8002b36:	d017      	beq.n	8002b68 <UART_SetConfig+0x158>
 8002b38:	dc1f      	bgt.n	8002b7a <UART_SetConfig+0x16a>
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d002      	beq.n	8002b44 <UART_SetConfig+0x134>
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d005      	beq.n	8002b4e <UART_SetConfig+0x13e>
 8002b42:	e01a      	b.n	8002b7a <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b44:	f7ff faa8 	bl	8002098 <HAL_RCC_GetPCLK1Freq>
 8002b48:	0003      	movs	r3, r0
 8002b4a:	61bb      	str	r3, [r7, #24]
        break;
 8002b4c:	e01c      	b.n	8002b88 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002b4e:	4b6b      	ldr	r3, [pc, #428]	@ (8002cfc <UART_SetConfig+0x2ec>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	095b      	lsrs	r3, r3, #5
 8002b54:	2207      	movs	r2, #7
 8002b56:	4013      	ands	r3, r2
 8002b58:	3301      	adds	r3, #1
 8002b5a:	0019      	movs	r1, r3
 8002b5c:	4869      	ldr	r0, [pc, #420]	@ (8002d04 <UART_SetConfig+0x2f4>)
 8002b5e:	f7fd fad3 	bl	8000108 <__udivsi3>
 8002b62:	0003      	movs	r3, r0
 8002b64:	61bb      	str	r3, [r7, #24]
        break;
 8002b66:	e00f      	b.n	8002b88 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b68:	f7ff fa28 	bl	8001fbc <HAL_RCC_GetSysClockFreq>
 8002b6c:	0003      	movs	r3, r0
 8002b6e:	61bb      	str	r3, [r7, #24]
        break;
 8002b70:	e00a      	b.n	8002b88 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b72:	2380      	movs	r3, #128	@ 0x80
 8002b74:	021b      	lsls	r3, r3, #8
 8002b76:	61bb      	str	r3, [r7, #24]
        break;
 8002b78:	e006      	b.n	8002b88 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b7e:	231e      	movs	r3, #30
 8002b80:	18fb      	adds	r3, r7, r3
 8002b82:	2201      	movs	r2, #1
 8002b84:	701a      	strb	r2, [r3, #0]
        break;
 8002b86:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d100      	bne.n	8002b90 <UART_SetConfig+0x180>
 8002b8e:	e097      	b.n	8002cc0 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b94:	4b5c      	ldr	r3, [pc, #368]	@ (8002d08 <UART_SetConfig+0x2f8>)
 8002b96:	0052      	lsls	r2, r2, #1
 8002b98:	5ad3      	ldrh	r3, [r2, r3]
 8002b9a:	0019      	movs	r1, r3
 8002b9c:	69b8      	ldr	r0, [r7, #24]
 8002b9e:	f7fd fab3 	bl	8000108 <__udivsi3>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	005a      	lsls	r2, r3, #1
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	085b      	lsrs	r3, r3, #1
 8002bac:	18d2      	adds	r2, r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	0019      	movs	r1, r3
 8002bb4:	0010      	movs	r0, r2
 8002bb6:	f7fd faa7 	bl	8000108 <__udivsi3>
 8002bba:	0003      	movs	r3, r0
 8002bbc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	2b0f      	cmp	r3, #15
 8002bc2:	d91c      	bls.n	8002bfe <UART_SetConfig+0x1ee>
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	2380      	movs	r3, #128	@ 0x80
 8002bc8:	025b      	lsls	r3, r3, #9
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d217      	bcs.n	8002bfe <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	200e      	movs	r0, #14
 8002bd4:	183b      	adds	r3, r7, r0
 8002bd6:	210f      	movs	r1, #15
 8002bd8:	438a      	bics	r2, r1
 8002bda:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	085b      	lsrs	r3, r3, #1
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	2207      	movs	r2, #7
 8002be4:	4013      	ands	r3, r2
 8002be6:	b299      	uxth	r1, r3
 8002be8:	183b      	adds	r3, r7, r0
 8002bea:	183a      	adds	r2, r7, r0
 8002bec:	8812      	ldrh	r2, [r2, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	183a      	adds	r2, r7, r0
 8002bf8:	8812      	ldrh	r2, [r2, #0]
 8002bfa:	60da      	str	r2, [r3, #12]
 8002bfc:	e060      	b.n	8002cc0 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002bfe:	231e      	movs	r3, #30
 8002c00:	18fb      	adds	r3, r7, r3
 8002c02:	2201      	movs	r2, #1
 8002c04:	701a      	strb	r2, [r3, #0]
 8002c06:	e05b      	b.n	8002cc0 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c08:	231f      	movs	r3, #31
 8002c0a:	18fb      	adds	r3, r7, r3
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b08      	cmp	r3, #8
 8002c10:	d01f      	beq.n	8002c52 <UART_SetConfig+0x242>
 8002c12:	dc22      	bgt.n	8002c5a <UART_SetConfig+0x24a>
 8002c14:	2b04      	cmp	r3, #4
 8002c16:	d017      	beq.n	8002c48 <UART_SetConfig+0x238>
 8002c18:	dc1f      	bgt.n	8002c5a <UART_SetConfig+0x24a>
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d002      	beq.n	8002c24 <UART_SetConfig+0x214>
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d005      	beq.n	8002c2e <UART_SetConfig+0x21e>
 8002c22:	e01a      	b.n	8002c5a <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c24:	f7ff fa38 	bl	8002098 <HAL_RCC_GetPCLK1Freq>
 8002c28:	0003      	movs	r3, r0
 8002c2a:	61bb      	str	r3, [r7, #24]
        break;
 8002c2c:	e01c      	b.n	8002c68 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002c2e:	4b33      	ldr	r3, [pc, #204]	@ (8002cfc <UART_SetConfig+0x2ec>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	095b      	lsrs	r3, r3, #5
 8002c34:	2207      	movs	r2, #7
 8002c36:	4013      	ands	r3, r2
 8002c38:	3301      	adds	r3, #1
 8002c3a:	0019      	movs	r1, r3
 8002c3c:	4831      	ldr	r0, [pc, #196]	@ (8002d04 <UART_SetConfig+0x2f4>)
 8002c3e:	f7fd fa63 	bl	8000108 <__udivsi3>
 8002c42:	0003      	movs	r3, r0
 8002c44:	61bb      	str	r3, [r7, #24]
        break;
 8002c46:	e00f      	b.n	8002c68 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c48:	f7ff f9b8 	bl	8001fbc <HAL_RCC_GetSysClockFreq>
 8002c4c:	0003      	movs	r3, r0
 8002c4e:	61bb      	str	r3, [r7, #24]
        break;
 8002c50:	e00a      	b.n	8002c68 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c52:	2380      	movs	r3, #128	@ 0x80
 8002c54:	021b      	lsls	r3, r3, #8
 8002c56:	61bb      	str	r3, [r7, #24]
        break;
 8002c58:	e006      	b.n	8002c68 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c5e:	231e      	movs	r3, #30
 8002c60:	18fb      	adds	r3, r7, r3
 8002c62:	2201      	movs	r2, #1
 8002c64:	701a      	strb	r2, [r3, #0]
        break;
 8002c66:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d028      	beq.n	8002cc0 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c72:	4b25      	ldr	r3, [pc, #148]	@ (8002d08 <UART_SetConfig+0x2f8>)
 8002c74:	0052      	lsls	r2, r2, #1
 8002c76:	5ad3      	ldrh	r3, [r2, r3]
 8002c78:	0019      	movs	r1, r3
 8002c7a:	69b8      	ldr	r0, [r7, #24]
 8002c7c:	f7fd fa44 	bl	8000108 <__udivsi3>
 8002c80:	0003      	movs	r3, r0
 8002c82:	001a      	movs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	085b      	lsrs	r3, r3, #1
 8002c8a:	18d2      	adds	r2, r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	0019      	movs	r1, r3
 8002c92:	0010      	movs	r0, r2
 8002c94:	f7fd fa38 	bl	8000108 <__udivsi3>
 8002c98:	0003      	movs	r3, r0
 8002c9a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	2b0f      	cmp	r3, #15
 8002ca0:	d90a      	bls.n	8002cb8 <UART_SetConfig+0x2a8>
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	2380      	movs	r3, #128	@ 0x80
 8002ca6:	025b      	lsls	r3, r3, #9
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d205      	bcs.n	8002cb8 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	60da      	str	r2, [r3, #12]
 8002cb6:	e003      	b.n	8002cc0 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002cb8:	231e      	movs	r3, #30
 8002cba:	18fb      	adds	r3, r7, r3
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	226a      	movs	r2, #106	@ 0x6a
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2268      	movs	r2, #104	@ 0x68
 8002ccc:	2101      	movs	r1, #1
 8002cce:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002cdc:	231e      	movs	r3, #30
 8002cde:	18fb      	adds	r3, r7, r3
 8002ce0:	781b      	ldrb	r3, [r3, #0]
}
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	b008      	add	sp, #32
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	46c0      	nop			@ (mov r8, r8)
 8002cec:	cfff69f3 	.word	0xcfff69f3
 8002cf0:	ffffcfff 	.word	0xffffcfff
 8002cf4:	11fff4ff 	.word	0x11fff4ff
 8002cf8:	40013800 	.word	0x40013800
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	40004400 	.word	0x40004400
 8002d04:	02dc6c00 	.word	0x02dc6c00
 8002d08:	08003530 	.word	0x08003530

08002d0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d18:	2208      	movs	r2, #8
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d00b      	beq.n	8002d36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	4a4a      	ldr	r2, [pc, #296]	@ (8002e50 <UART_AdvFeatureConfig+0x144>)
 8002d26:	4013      	ands	r3, r2
 8002d28:	0019      	movs	r1, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	d00b      	beq.n	8002d58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	4a43      	ldr	r2, [pc, #268]	@ (8002e54 <UART_AdvFeatureConfig+0x148>)
 8002d48:	4013      	ands	r3, r2
 8002d4a:	0019      	movs	r1, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	4013      	ands	r3, r2
 8002d60:	d00b      	beq.n	8002d7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	4a3b      	ldr	r2, [pc, #236]	@ (8002e58 <UART_AdvFeatureConfig+0x14c>)
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	0019      	movs	r1, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d7e:	2204      	movs	r2, #4
 8002d80:	4013      	ands	r3, r2
 8002d82:	d00b      	beq.n	8002d9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	4a34      	ldr	r2, [pc, #208]	@ (8002e5c <UART_AdvFeatureConfig+0x150>)
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	0019      	movs	r1, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da0:	2210      	movs	r2, #16
 8002da2:	4013      	ands	r3, r2
 8002da4:	d00b      	beq.n	8002dbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	4a2c      	ldr	r2, [pc, #176]	@ (8002e60 <UART_AdvFeatureConfig+0x154>)
 8002dae:	4013      	ands	r3, r2
 8002db0:	0019      	movs	r1, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	d00b      	beq.n	8002de0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	4a25      	ldr	r2, [pc, #148]	@ (8002e64 <UART_AdvFeatureConfig+0x158>)
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	0019      	movs	r1, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de4:	2240      	movs	r2, #64	@ 0x40
 8002de6:	4013      	ands	r3, r2
 8002de8:	d01d      	beq.n	8002e26 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	4a1d      	ldr	r2, [pc, #116]	@ (8002e68 <UART_AdvFeatureConfig+0x15c>)
 8002df2:	4013      	ands	r3, r2
 8002df4:	0019      	movs	r1, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e06:	2380      	movs	r3, #128	@ 0x80
 8002e08:	035b      	lsls	r3, r3, #13
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d10b      	bne.n	8002e26 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	4a15      	ldr	r2, [pc, #84]	@ (8002e6c <UART_AdvFeatureConfig+0x160>)
 8002e16:	4013      	ands	r3, r2
 8002e18:	0019      	movs	r1, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e2a:	2280      	movs	r2, #128	@ 0x80
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	d00b      	beq.n	8002e48 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	4a0e      	ldr	r2, [pc, #56]	@ (8002e70 <UART_AdvFeatureConfig+0x164>)
 8002e38:	4013      	ands	r3, r2
 8002e3a:	0019      	movs	r1, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	605a      	str	r2, [r3, #4]
  }
}
 8002e48:	46c0      	nop			@ (mov r8, r8)
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	b002      	add	sp, #8
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	ffff7fff 	.word	0xffff7fff
 8002e54:	fffdffff 	.word	0xfffdffff
 8002e58:	fffeffff 	.word	0xfffeffff
 8002e5c:	fffbffff 	.word	0xfffbffff
 8002e60:	ffffefff 	.word	0xffffefff
 8002e64:	ffffdfff 	.word	0xffffdfff
 8002e68:	ffefffff 	.word	0xffefffff
 8002e6c:	ff9fffff 	.word	0xff9fffff
 8002e70:	fff7ffff 	.word	0xfff7ffff

08002e74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b092      	sub	sp, #72	@ 0x48
 8002e78:	af02      	add	r7, sp, #8
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2290      	movs	r2, #144	@ 0x90
 8002e80:	2100      	movs	r1, #0
 8002e82:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e84:	f7fe fa18 	bl	80012b8 <HAL_GetTick>
 8002e88:	0003      	movs	r3, r0
 8002e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2208      	movs	r2, #8
 8002e94:	4013      	ands	r3, r2
 8002e96:	2b08      	cmp	r3, #8
 8002e98:	d12d      	bne.n	8002ef6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e9c:	2280      	movs	r2, #128	@ 0x80
 8002e9e:	0391      	lsls	r1, r2, #14
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	4a47      	ldr	r2, [pc, #284]	@ (8002fc0 <UART_CheckIdleState+0x14c>)
 8002ea4:	9200      	str	r2, [sp, #0]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f000 f88e 	bl	8002fc8 <UART_WaitOnFlagUntilTimeout>
 8002eac:	1e03      	subs	r3, r0, #0
 8002eae:	d022      	beq.n	8002ef6 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002eb0:	f3ef 8310 	mrs	r3, PRIMASK
 8002eb4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002eb8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002eba:	2301      	movs	r3, #1
 8002ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ec0:	f383 8810 	msr	PRIMASK, r3
}
 8002ec4:	46c0      	nop			@ (mov r8, r8)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2180      	movs	r1, #128	@ 0x80
 8002ed2:	438a      	bics	r2, r1
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002edc:	f383 8810 	msr	PRIMASK, r3
}
 8002ee0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2288      	movs	r2, #136	@ 0x88
 8002ee6:	2120      	movs	r1, #32
 8002ee8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2284      	movs	r2, #132	@ 0x84
 8002eee:	2100      	movs	r1, #0
 8002ef0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e060      	b.n	8002fb8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2204      	movs	r2, #4
 8002efe:	4013      	ands	r3, r2
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	d146      	bne.n	8002f92 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f06:	2280      	movs	r2, #128	@ 0x80
 8002f08:	03d1      	lsls	r1, r2, #15
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	4a2c      	ldr	r2, [pc, #176]	@ (8002fc0 <UART_CheckIdleState+0x14c>)
 8002f0e:	9200      	str	r2, [sp, #0]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f000 f859 	bl	8002fc8 <UART_WaitOnFlagUntilTimeout>
 8002f16:	1e03      	subs	r3, r0, #0
 8002f18:	d03b      	beq.n	8002f92 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002f1a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f1e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f20:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002f22:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f24:	2301      	movs	r3, #1
 8002f26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	f383 8810 	msr	PRIMASK, r3
}
 8002f2e:	46c0      	nop			@ (mov r8, r8)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4922      	ldr	r1, [pc, #136]	@ (8002fc4 <UART_CheckIdleState+0x150>)
 8002f3c:	400a      	ands	r2, r1
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	f383 8810 	msr	PRIMASK, r3
}
 8002f4a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002f4c:	f3ef 8310 	mrs	r3, PRIMASK
 8002f50:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f52:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f54:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f56:	2301      	movs	r3, #1
 8002f58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	f383 8810 	msr	PRIMASK, r3
}
 8002f60:	46c0      	nop			@ (mov r8, r8)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	438a      	bics	r2, r1
 8002f70:	609a      	str	r2, [r3, #8]
 8002f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f74:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f76:	6a3b      	ldr	r3, [r7, #32]
 8002f78:	f383 8810 	msr	PRIMASK, r3
}
 8002f7c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	228c      	movs	r2, #140	@ 0x8c
 8002f82:	2120      	movs	r1, #32
 8002f84:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2284      	movs	r2, #132	@ 0x84
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e012      	b.n	8002fb8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2288      	movs	r2, #136	@ 0x88
 8002f96:	2120      	movs	r1, #32
 8002f98:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	228c      	movs	r2, #140	@ 0x8c
 8002f9e:	2120      	movs	r1, #32
 8002fa0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2284      	movs	r2, #132	@ 0x84
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	0018      	movs	r0, r3
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	b010      	add	sp, #64	@ 0x40
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	01ffffff 	.word	0x01ffffff
 8002fc4:	fffffedf 	.word	0xfffffedf

08002fc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	603b      	str	r3, [r7, #0]
 8002fd4:	1dfb      	adds	r3, r7, #7
 8002fd6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fd8:	e051      	b.n	800307e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	d04e      	beq.n	800307e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe0:	f7fe f96a 	bl	80012b8 <HAL_GetTick>
 8002fe4:	0002      	movs	r2, r0
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d302      	bcc.n	8002ff6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e051      	b.n	800309e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2204      	movs	r2, #4
 8003002:	4013      	ands	r3, r2
 8003004:	d03b      	beq.n	800307e <UART_WaitOnFlagUntilTimeout+0xb6>
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	2b80      	cmp	r3, #128	@ 0x80
 800300a:	d038      	beq.n	800307e <UART_WaitOnFlagUntilTimeout+0xb6>
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	2b40      	cmp	r3, #64	@ 0x40
 8003010:	d035      	beq.n	800307e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	69db      	ldr	r3, [r3, #28]
 8003018:	2208      	movs	r2, #8
 800301a:	4013      	ands	r3, r2
 800301c:	2b08      	cmp	r3, #8
 800301e:	d111      	bne.n	8003044 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2208      	movs	r2, #8
 8003026:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	0018      	movs	r0, r3
 800302c:	f000 f83c 	bl	80030a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2290      	movs	r2, #144	@ 0x90
 8003034:	2108      	movs	r1, #8
 8003036:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2284      	movs	r2, #132	@ 0x84
 800303c:	2100      	movs	r1, #0
 800303e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e02c      	b.n	800309e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	69da      	ldr	r2, [r3, #28]
 800304a:	2380      	movs	r3, #128	@ 0x80
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	401a      	ands	r2, r3
 8003050:	2380      	movs	r3, #128	@ 0x80
 8003052:	011b      	lsls	r3, r3, #4
 8003054:	429a      	cmp	r2, r3
 8003056:	d112      	bne.n	800307e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2280      	movs	r2, #128	@ 0x80
 800305e:	0112      	lsls	r2, r2, #4
 8003060:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	0018      	movs	r0, r3
 8003066:	f000 f81f 	bl	80030a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2290      	movs	r2, #144	@ 0x90
 800306e:	2120      	movs	r1, #32
 8003070:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2284      	movs	r2, #132	@ 0x84
 8003076:	2100      	movs	r1, #0
 8003078:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e00f      	b.n	800309e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	69db      	ldr	r3, [r3, #28]
 8003084:	68ba      	ldr	r2, [r7, #8]
 8003086:	4013      	ands	r3, r2
 8003088:	68ba      	ldr	r2, [r7, #8]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	425a      	negs	r2, r3
 800308e:	4153      	adcs	r3, r2
 8003090:	b2db      	uxtb	r3, r3
 8003092:	001a      	movs	r2, r3
 8003094:	1dfb      	adds	r3, r7, #7
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	429a      	cmp	r2, r3
 800309a:	d09e      	beq.n	8002fda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	0018      	movs	r0, r3
 80030a0:	46bd      	mov	sp, r7
 80030a2:	b004      	add	sp, #16
 80030a4:	bd80      	pop	{r7, pc}
	...

080030a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b08e      	sub	sp, #56	@ 0x38
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80030b0:	f3ef 8310 	mrs	r3, PRIMASK
 80030b4:	617b      	str	r3, [r7, #20]
  return(result);
 80030b6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80030b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80030ba:	2301      	movs	r3, #1
 80030bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	f383 8810 	msr	PRIMASK, r3
}
 80030c4:	46c0      	nop			@ (mov r8, r8)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4926      	ldr	r1, [pc, #152]	@ (800316c <UART_EndRxTransfer+0xc4>)
 80030d2:	400a      	ands	r2, r1
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	f383 8810 	msr	PRIMASK, r3
}
 80030e0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80030e2:	f3ef 8310 	mrs	r3, PRIMASK
 80030e6:	623b      	str	r3, [r7, #32]
  return(result);
 80030e8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80030ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80030ec:	2301      	movs	r3, #1
 80030ee:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f2:	f383 8810 	msr	PRIMASK, r3
}
 80030f6:	46c0      	nop			@ (mov r8, r8)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689a      	ldr	r2, [r3, #8]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	491b      	ldr	r1, [pc, #108]	@ (8003170 <UART_EndRxTransfer+0xc8>)
 8003104:	400a      	ands	r2, r1
 8003106:	609a      	str	r2, [r3, #8]
 8003108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800310a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800310c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800310e:	f383 8810 	msr	PRIMASK, r3
}
 8003112:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003118:	2b01      	cmp	r3, #1
 800311a:	d118      	bne.n	800314e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800311c:	f3ef 8310 	mrs	r3, PRIMASK
 8003120:	60bb      	str	r3, [r7, #8]
  return(result);
 8003122:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003124:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003126:	2301      	movs	r3, #1
 8003128:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f383 8810 	msr	PRIMASK, r3
}
 8003130:	46c0      	nop			@ (mov r8, r8)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2110      	movs	r1, #16
 800313e:	438a      	bics	r2, r1
 8003140:	601a      	str	r2, [r3, #0]
 8003142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003144:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	f383 8810 	msr	PRIMASK, r3
}
 800314c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	228c      	movs	r2, #140	@ 0x8c
 8003152:	2120      	movs	r1, #32
 8003154:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003162:	46c0      	nop			@ (mov r8, r8)
 8003164:	46bd      	mov	sp, r7
 8003166:	b00e      	add	sp, #56	@ 0x38
 8003168:	bd80      	pop	{r7, pc}
 800316a:	46c0      	nop			@ (mov r8, r8)
 800316c:	fffffedf 	.word	0xfffffedf
 8003170:	effffffe 	.word	0xeffffffe

08003174 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003180:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	225e      	movs	r2, #94	@ 0x5e
 8003186:	2100      	movs	r1, #0
 8003188:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2256      	movs	r2, #86	@ 0x56
 800318e:	2100      	movs	r1, #0
 8003190:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	0018      	movs	r0, r3
 8003196:	f7ff fc27 	bl	80029e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800319a:	46c0      	nop			@ (mov r8, r8)
 800319c:	46bd      	mov	sp, r7
 800319e:	b004      	add	sp, #16
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b086      	sub	sp, #24
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80031aa:	f3ef 8310 	mrs	r3, PRIMASK
 80031ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80031b0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80031b2:	617b      	str	r3, [r7, #20]
 80031b4:	2301      	movs	r3, #1
 80031b6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f383 8810 	msr	PRIMASK, r3
}
 80031be:	46c0      	nop			@ (mov r8, r8)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2140      	movs	r1, #64	@ 0x40
 80031cc:	438a      	bics	r2, r1
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	f383 8810 	msr	PRIMASK, r3
}
 80031da:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2288      	movs	r2, #136	@ 0x88
 80031e0:	2120      	movs	r1, #32
 80031e2:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	0018      	movs	r0, r3
 80031ee:	f7ff fbf3 	bl	80029d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031f2:	46c0      	nop			@ (mov r8, r8)
 80031f4:	46bd      	mov	sp, r7
 80031f6:	b006      	add	sp, #24
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b082      	sub	sp, #8
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003202:	46c0      	nop			@ (mov r8, r8)
 8003204:	46bd      	mov	sp, r7
 8003206:	b002      	add	sp, #8
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b082      	sub	sp, #8
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003212:	46c0      	nop			@ (mov r8, r8)
 8003214:	46bd      	mov	sp, r7
 8003216:	b002      	add	sp, #8
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b082      	sub	sp, #8
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003222:	46c0      	nop			@ (mov r8, r8)
 8003224:	46bd      	mov	sp, r7
 8003226:	b002      	add	sp, #8
 8003228:	bd80      	pop	{r7, pc}
	...

0800322c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2284      	movs	r2, #132	@ 0x84
 8003238:	5c9b      	ldrb	r3, [r3, r2]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d101      	bne.n	8003242 <HAL_UARTEx_DisableFifoMode+0x16>
 800323e:	2302      	movs	r3, #2
 8003240:	e027      	b.n	8003292 <HAL_UARTEx_DisableFifoMode+0x66>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2284      	movs	r2, #132	@ 0x84
 8003246:	2101      	movs	r1, #1
 8003248:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2288      	movs	r2, #136	@ 0x88
 800324e:	2124      	movs	r1, #36	@ 0x24
 8003250:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2101      	movs	r1, #1
 8003266:	438a      	bics	r2, r1
 8003268:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	4a0b      	ldr	r2, [pc, #44]	@ (800329c <HAL_UARTEx_DisableFifoMode+0x70>)
 800326e:	4013      	ands	r3, r2
 8003270:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2288      	movs	r2, #136	@ 0x88
 8003284:	2120      	movs	r1, #32
 8003286:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2284      	movs	r2, #132	@ 0x84
 800328c:	2100      	movs	r1, #0
 800328e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	0018      	movs	r0, r3
 8003294:	46bd      	mov	sp, r7
 8003296:	b004      	add	sp, #16
 8003298:	bd80      	pop	{r7, pc}
 800329a:	46c0      	nop			@ (mov r8, r8)
 800329c:	dfffffff 	.word	0xdfffffff

080032a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2284      	movs	r2, #132	@ 0x84
 80032ae:	5c9b      	ldrb	r3, [r3, r2]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d101      	bne.n	80032b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80032b4:	2302      	movs	r3, #2
 80032b6:	e02e      	b.n	8003316 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2284      	movs	r2, #132	@ 0x84
 80032bc:	2101      	movs	r1, #1
 80032be:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2288      	movs	r2, #136	@ 0x88
 80032c4:	2124      	movs	r1, #36	@ 0x24
 80032c6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2101      	movs	r1, #1
 80032dc:	438a      	bics	r2, r1
 80032de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	08d9      	lsrs	r1, r3, #3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	0018      	movs	r0, r3
 80032f8:	f000 f854 	bl	80033a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2288      	movs	r2, #136	@ 0x88
 8003308:	2120      	movs	r1, #32
 800330a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2284      	movs	r2, #132	@ 0x84
 8003310:	2100      	movs	r1, #0
 8003312:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	0018      	movs	r0, r3
 8003318:	46bd      	mov	sp, r7
 800331a:	b004      	add	sp, #16
 800331c:	bd80      	pop	{r7, pc}
	...

08003320 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2284      	movs	r2, #132	@ 0x84
 800332e:	5c9b      	ldrb	r3, [r3, r2]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003334:	2302      	movs	r3, #2
 8003336:	e02f      	b.n	8003398 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2284      	movs	r2, #132	@ 0x84
 800333c:	2101      	movs	r1, #1
 800333e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2288      	movs	r2, #136	@ 0x88
 8003344:	2124      	movs	r1, #36	@ 0x24
 8003346:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2101      	movs	r1, #1
 800335c:	438a      	bics	r2, r1
 800335e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	4a0e      	ldr	r2, [pc, #56]	@ (80033a0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003368:	4013      	ands	r3, r2
 800336a:	0019      	movs	r1, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	430a      	orrs	r2, r1
 8003374:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	0018      	movs	r0, r3
 800337a:	f000 f813 	bl	80033a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2288      	movs	r2, #136	@ 0x88
 800338a:	2120      	movs	r1, #32
 800338c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2284      	movs	r2, #132	@ 0x84
 8003392:	2100      	movs	r1, #0
 8003394:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	0018      	movs	r0, r3
 800339a:	46bd      	mov	sp, r7
 800339c:	b004      	add	sp, #16
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	f1ffffff 	.word	0xf1ffffff

080033a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80033a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d108      	bne.n	80033c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	226a      	movs	r2, #106	@ 0x6a
 80033b8:	2101      	movs	r1, #1
 80033ba:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2268      	movs	r2, #104	@ 0x68
 80033c0:	2101      	movs	r1, #1
 80033c2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80033c4:	e043      	b.n	800344e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80033c6:	260f      	movs	r6, #15
 80033c8:	19bb      	adds	r3, r7, r6
 80033ca:	2208      	movs	r2, #8
 80033cc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80033ce:	200e      	movs	r0, #14
 80033d0:	183b      	adds	r3, r7, r0
 80033d2:	2208      	movs	r2, #8
 80033d4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	0e5b      	lsrs	r3, r3, #25
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	240d      	movs	r4, #13
 80033e2:	193b      	adds	r3, r7, r4
 80033e4:	2107      	movs	r1, #7
 80033e6:	400a      	ands	r2, r1
 80033e8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	0f5b      	lsrs	r3, r3, #29
 80033f2:	b2da      	uxtb	r2, r3
 80033f4:	250c      	movs	r5, #12
 80033f6:	197b      	adds	r3, r7, r5
 80033f8:	2107      	movs	r1, #7
 80033fa:	400a      	ands	r2, r1
 80033fc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80033fe:	183b      	adds	r3, r7, r0
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	197a      	adds	r2, r7, r5
 8003404:	7812      	ldrb	r2, [r2, #0]
 8003406:	4914      	ldr	r1, [pc, #80]	@ (8003458 <UARTEx_SetNbDataToProcess+0xb4>)
 8003408:	5c8a      	ldrb	r2, [r1, r2]
 800340a:	435a      	muls	r2, r3
 800340c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800340e:	197b      	adds	r3, r7, r5
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	4a12      	ldr	r2, [pc, #72]	@ (800345c <UARTEx_SetNbDataToProcess+0xb8>)
 8003414:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003416:	0019      	movs	r1, r3
 8003418:	f7fc ff00 	bl	800021c <__divsi3>
 800341c:	0003      	movs	r3, r0
 800341e:	b299      	uxth	r1, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	226a      	movs	r2, #106	@ 0x6a
 8003424:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003426:	19bb      	adds	r3, r7, r6
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	193a      	adds	r2, r7, r4
 800342c:	7812      	ldrb	r2, [r2, #0]
 800342e:	490a      	ldr	r1, [pc, #40]	@ (8003458 <UARTEx_SetNbDataToProcess+0xb4>)
 8003430:	5c8a      	ldrb	r2, [r1, r2]
 8003432:	435a      	muls	r2, r3
 8003434:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003436:	193b      	adds	r3, r7, r4
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	4a08      	ldr	r2, [pc, #32]	@ (800345c <UARTEx_SetNbDataToProcess+0xb8>)
 800343c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800343e:	0019      	movs	r1, r3
 8003440:	f7fc feec 	bl	800021c <__divsi3>
 8003444:	0003      	movs	r3, r0
 8003446:	b299      	uxth	r1, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2268      	movs	r2, #104	@ 0x68
 800344c:	5299      	strh	r1, [r3, r2]
}
 800344e:	46c0      	nop			@ (mov r8, r8)
 8003450:	46bd      	mov	sp, r7
 8003452:	b005      	add	sp, #20
 8003454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003456:	46c0      	nop			@ (mov r8, r8)
 8003458:	08003548 	.word	0x08003548
 800345c:	08003550 	.word	0x08003550

08003460 <memset>:
 8003460:	0003      	movs	r3, r0
 8003462:	1882      	adds	r2, r0, r2
 8003464:	4293      	cmp	r3, r2
 8003466:	d100      	bne.n	800346a <memset+0xa>
 8003468:	4770      	bx	lr
 800346a:	7019      	strb	r1, [r3, #0]
 800346c:	3301      	adds	r3, #1
 800346e:	e7f9      	b.n	8003464 <memset+0x4>

08003470 <__libc_init_array>:
 8003470:	b570      	push	{r4, r5, r6, lr}
 8003472:	2600      	movs	r6, #0
 8003474:	4c0c      	ldr	r4, [pc, #48]	@ (80034a8 <__libc_init_array+0x38>)
 8003476:	4d0d      	ldr	r5, [pc, #52]	@ (80034ac <__libc_init_array+0x3c>)
 8003478:	1b64      	subs	r4, r4, r5
 800347a:	10a4      	asrs	r4, r4, #2
 800347c:	42a6      	cmp	r6, r4
 800347e:	d109      	bne.n	8003494 <__libc_init_array+0x24>
 8003480:	2600      	movs	r6, #0
 8003482:	f000 f819 	bl	80034b8 <_init>
 8003486:	4c0a      	ldr	r4, [pc, #40]	@ (80034b0 <__libc_init_array+0x40>)
 8003488:	4d0a      	ldr	r5, [pc, #40]	@ (80034b4 <__libc_init_array+0x44>)
 800348a:	1b64      	subs	r4, r4, r5
 800348c:	10a4      	asrs	r4, r4, #2
 800348e:	42a6      	cmp	r6, r4
 8003490:	d105      	bne.n	800349e <__libc_init_array+0x2e>
 8003492:	bd70      	pop	{r4, r5, r6, pc}
 8003494:	00b3      	lsls	r3, r6, #2
 8003496:	58eb      	ldr	r3, [r5, r3]
 8003498:	4798      	blx	r3
 800349a:	3601      	adds	r6, #1
 800349c:	e7ee      	b.n	800347c <__libc_init_array+0xc>
 800349e:	00b3      	lsls	r3, r6, #2
 80034a0:	58eb      	ldr	r3, [r5, r3]
 80034a2:	4798      	blx	r3
 80034a4:	3601      	adds	r6, #1
 80034a6:	e7f2      	b.n	800348e <__libc_init_array+0x1e>
 80034a8:	08003558 	.word	0x08003558
 80034ac:	08003558 	.word	0x08003558
 80034b0:	0800355c 	.word	0x0800355c
 80034b4:	08003558 	.word	0x08003558

080034b8 <_init>:
 80034b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ba:	46c0      	nop			@ (mov r8, r8)
 80034bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034be:	bc08      	pop	{r3}
 80034c0:	469e      	mov	lr, r3
 80034c2:	4770      	bx	lr

080034c4 <_fini>:
 80034c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034c6:	46c0      	nop			@ (mov r8, r8)
 80034c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ca:	bc08      	pop	{r3}
 80034cc:	469e      	mov	lr, r3
 80034ce:	4770      	bx	lr

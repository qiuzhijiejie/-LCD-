
GLCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a34  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08003af4  08003af4  00013af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bac  08003bac  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08003bac  08003bac  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bac  08003bac  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bac  08003bac  00013bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bb0  08003bb0  00013bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08003bb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000024  08003bd8  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08003bd8  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b19b  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d2c  00000000  00000000  0002b22a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000890  00000000  00000000  0002cf58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006a1  00000000  00000000  0002d7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001357d  00000000  00000000  0002de89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bb5c  00000000  00000000  00041406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000769d5  00000000  00000000  0004cf62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001d64  00000000  00000000  000c3938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000c569c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000024 	.word	0x20000024
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003adc 	.word	0x08003adc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000028 	.word	0x20000028
 8000104:	08003adc 	.word	0x08003adc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80003f8:	f001 f9f1 	bl	80017de <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80003fc:	f000 f876 	bl	80004ec <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000400:	f000 f95e 	bl	80006c0 <MX_GPIO_Init>
	MX_IWDG_Init();
 8000404:	f000 f8ba 	bl	800057c <MX_IWDG_Init>
	MX_USART1_UART_Init();
 8000408:	f000 f8d8 	bl	80005bc <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800040c:	f000 f924 	bl	8000658 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	LcmInit();
 8000410:	f000 fc6e 	bl	8000cf0 <LcmInit>
	LcmClear();
 8000414:	f000 fc42 	bl	8000c9c <LcmClear>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		LcmPutDots(0x55, 0xaa);
 8000418:	21aa      	movs	r1, #170	; 0xaa
 800041a:	2055      	movs	r0, #85	; 0x55
 800041c:	f000 fc80 	bl	8000d20 <LcmPutDots>
		HAL_Delay(600);
 8000420:	2396      	movs	r3, #150	; 0x96
 8000422:	009b      	lsls	r3, r3, #2
 8000424:	0018      	movs	r0, r3
 8000426:	f001 fa57 	bl	80018d8 <HAL_Delay>
		LcmPutDots(0xaa, 0x55);
 800042a:	2155      	movs	r1, #85	; 0x55
 800042c:	20aa      	movs	r0, #170	; 0xaa
 800042e:	f000 fc77 	bl	8000d20 <LcmPutDots>
		HAL_Delay(600);
 8000432:	2396      	movs	r3, #150	; 0x96
 8000434:	009b      	lsls	r3, r3, #2
 8000436:	0018      	movs	r0, r3
 8000438:	f001 fa4e 	bl	80018d8 <HAL_Delay>

		LcmPutDots(0x55, 0x55);
 800043c:	2155      	movs	r1, #85	; 0x55
 800043e:	2055      	movs	r0, #85	; 0x55
 8000440:	f000 fc6e 	bl	8000d20 <LcmPutDots>
		HAL_Delay(600);
 8000444:	2396      	movs	r3, #150	; 0x96
 8000446:	009b      	lsls	r3, r3, #2
 8000448:	0018      	movs	r0, r3
 800044a:	f001 fa45 	bl	80018d8 <HAL_Delay>
		LcmPutDots(0xaa, 0xaa);
 800044e:	21aa      	movs	r1, #170	; 0xaa
 8000450:	20aa      	movs	r0, #170	; 0xaa
 8000452:	f000 fc65 	bl	8000d20 <LcmPutDots>
		HAL_Delay(600);
 8000456:	2396      	movs	r3, #150	; 0x96
 8000458:	009b      	lsls	r3, r3, #2
 800045a:	0018      	movs	r0, r3
 800045c:	f001 fa3c 	bl	80018d8 <HAL_Delay>

		LcmPutDots(0xff, 0x00);
 8000460:	2100      	movs	r1, #0
 8000462:	20ff      	movs	r0, #255	; 0xff
 8000464:	f000 fc5c 	bl	8000d20 <LcmPutDots>
		HAL_Delay(600);
 8000468:	2396      	movs	r3, #150	; 0x96
 800046a:	009b      	lsls	r3, r3, #2
 800046c:	0018      	movs	r0, r3
 800046e:	f001 fa33 	bl	80018d8 <HAL_Delay>
		LcmPutDots(0x00, 0xff);
 8000472:	21ff      	movs	r1, #255	; 0xff
 8000474:	2000      	movs	r0, #0
 8000476:	f000 fc53 	bl	8000d20 <LcmPutDots>
		HAL_Delay(600);
 800047a:	2396      	movs	r3, #150	; 0x96
 800047c:	009b      	lsls	r3, r3, #2
 800047e:	0018      	movs	r0, r3
 8000480:	f001 fa2a 	bl	80018d8 <HAL_Delay>

		LcmPutBMP(BMP3);
 8000484:	4b17      	ldr	r3, [pc, #92]	; (80004e4 <main+0xf0>)
 8000486:	0018      	movs	r0, r3
 8000488:	f000 fc90 	bl	8000dac <LcmPutBMP>
		HAL_Delay(1000);
 800048c:	23fa      	movs	r3, #250	; 0xfa
 800048e:	009b      	lsls	r3, r3, #2
 8000490:	0018      	movs	r0, r3
 8000492:	f001 fa21 	bl	80018d8 <HAL_Delay>

		LcmReverseBMPP(BMP3);
 8000496:	4b13      	ldr	r3, [pc, #76]	; (80004e4 <main+0xf0>)
 8000498:	0018      	movs	r0, r3
 800049a:	f000 fcc3 	bl	8000e24 <LcmReverseBMPP>
		HAL_Delay(1000);
 800049e:	23fa      	movs	r3, #250	; 0xfa
 80004a0:	009b      	lsls	r3, r3, #2
 80004a2:	0018      	movs	r0, r3
 80004a4:	f001 fa18 	bl	80018d8 <HAL_Delay>
		LcmPutBMP(BMP4);
 80004a8:	4b0f      	ldr	r3, [pc, #60]	; (80004e8 <main+0xf4>)
 80004aa:	0018      	movs	r0, r3
 80004ac:	f000 fc7e 	bl	8000dac <LcmPutBMP>
		HAL_Delay(1000);
 80004b0:	23fa      	movs	r3, #250	; 0xfa
 80004b2:	009b      	lsls	r3, r3, #2
 80004b4:	0018      	movs	r0, r3
 80004b6:	f001 fa0f 	bl	80018d8 <HAL_Delay>
		LcmReverseBMPP(BMP4);
 80004ba:	4b0b      	ldr	r3, [pc, #44]	; (80004e8 <main+0xf4>)
 80004bc:	0018      	movs	r0, r3
 80004be:	f000 fcb1 	bl	8000e24 <LcmReverseBMPP>
		HAL_Delay(1000);
 80004c2:	23fa      	movs	r3, #250	; 0xfa
 80004c4:	009b      	lsls	r3, r3, #2
 80004c6:	0018      	movs	r0, r3
 80004c8:	f001 fa06 	bl	80018d8 <HAL_Delay>
		LcmClear();
 80004cc:	f000 fbe6 	bl	8000c9c <LcmClear>
		Display_Chinese();
 80004d0:	f000 fe20 	bl	8001114 <Display_Chinese>
		HAL_Delay(1000);
 80004d4:	23fa      	movs	r3, #250	; 0xfa
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	0018      	movs	r0, r3
 80004da:	f001 f9fd 	bl	80018d8 <HAL_Delay>
		Display_character();
 80004de:	f000 fd87 	bl	8000ff0 <Display_character>
		LcmPutDots(0x55, 0xaa);
 80004e2:	e799      	b.n	8000418 <main+0x24>
 80004e4:	08003b24 	.word	0x08003b24
 80004e8:	08003b24 	.word	0x08003b24

080004ec <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80004ec:	b590      	push	{r4, r7, lr}
 80004ee:	b08d      	sub	sp, #52	; 0x34
 80004f0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	2414      	movs	r4, #20
 80004f4:	193b      	adds	r3, r7, r4
 80004f6:	0018      	movs	r0, r3
 80004f8:	231c      	movs	r3, #28
 80004fa:	001a      	movs	r2, r3
 80004fc:	2100      	movs	r1, #0
 80004fe:	f003 fac1 	bl	8003a84 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000502:	003b      	movs	r3, r7
 8000504:	0018      	movs	r0, r3
 8000506:	2314      	movs	r3, #20
 8000508:	001a      	movs	r2, r3
 800050a:	2100      	movs	r1, #0
 800050c:	f003 faba 	bl	8003a84 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000510:	193b      	adds	r3, r7, r4
 8000512:	220a      	movs	r2, #10
 8000514:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000516:	193b      	adds	r3, r7, r4
 8000518:	2280      	movs	r2, #128	; 0x80
 800051a:	0052      	lsls	r2, r2, #1
 800051c:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 800051e:	193b      	adds	r3, r7, r4
 8000520:	2280      	movs	r2, #128	; 0x80
 8000522:	0152      	lsls	r2, r2, #5
 8000524:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000526:	193b      	adds	r3, r7, r4
 8000528:	2240      	movs	r2, #64	; 0x40
 800052a:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800052c:	193b      	adds	r3, r7, r4
 800052e:	2201      	movs	r2, #1
 8000530:	619a      	str	r2, [r3, #24]

	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000532:	193b      	adds	r3, r7, r4
 8000534:	0018      	movs	r0, r3
 8000536:	f001 fdab 	bl	8002090 <HAL_RCC_OscConfig>
 800053a:	1e03      	subs	r3, r0, #0
 800053c:	d001      	beq.n	8000542 <SystemClock_Config+0x56>
	{
		Error_Handler();
 800053e:	f001 f805 	bl	800154c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000542:	003b      	movs	r3, r7
 8000544:	2207      	movs	r2, #7
 8000546:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000548:	003b      	movs	r3, r7
 800054a:	2200      	movs	r2, #0
 800054c:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800054e:	003b      	movs	r3, r7
 8000550:	2200      	movs	r2, #0
 8000552:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000554:	003b      	movs	r3, r7
 8000556:	2200      	movs	r2, #0
 8000558:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800055a:	003b      	movs	r3, r7
 800055c:	2200      	movs	r2, #0
 800055e:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000560:	003b      	movs	r3, r7
 8000562:	2100      	movs	r1, #0
 8000564:	0018      	movs	r0, r3
 8000566:	f001 ff77 	bl	8002458 <HAL_RCC_ClockConfig>
 800056a:	1e03      	subs	r3, r0, #0
 800056c:	d001      	beq.n	8000572 <SystemClock_Config+0x86>
	{
		Error_Handler();
 800056e:	f000 ffed 	bl	800154c <Error_Handler>
	}
}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	46bd      	mov	sp, r7
 8000576:	b00d      	add	sp, #52	; 0x34
 8000578:	bd90      	pop	{r4, r7, pc}
	...

0800057c <MX_IWDG_Init>:
 * @brief IWDG Initialization Function
 * @param None
 * @retval None
 */
static void MX_IWDG_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
	/* USER CODE END IWDG_Init 0 */

	/* USER CODE BEGIN IWDG_Init 1 */

	/* USER CODE END IWDG_Init 1 */
	hiwdg.Instance = IWDG;
 8000580:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <MX_IWDG_Init+0x34>)
 8000582:	4a0c      	ldr	r2, [pc, #48]	; (80005b4 <MX_IWDG_Init+0x38>)
 8000584:	601a      	str	r2, [r3, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8000586:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <MX_IWDG_Init+0x34>)
 8000588:	2206      	movs	r2, #6
 800058a:	605a      	str	r2, [r3, #4]
	hiwdg.Init.Window = 4095;
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <MX_IWDG_Init+0x34>)
 800058e:	4a0a      	ldr	r2, [pc, #40]	; (80005b8 <MX_IWDG_Init+0x3c>)
 8000590:	60da      	str	r2, [r3, #12]
	hiwdg.Init.Reload = 4095;
 8000592:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <MX_IWDG_Init+0x34>)
 8000594:	4a08      	ldr	r2, [pc, #32]	; (80005b8 <MX_IWDG_Init+0x3c>)
 8000596:	609a      	str	r2, [r3, #8]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <MX_IWDG_Init+0x34>)
 800059a:	0018      	movs	r0, r3
 800059c:	f001 fd26 	bl	8001fec <HAL_IWDG_Init>
 80005a0:	1e03      	subs	r3, r0, #0
 80005a2:	d001      	beq.n	80005a8 <MX_IWDG_Init+0x2c>
	{
		Error_Handler();
 80005a4:	f000 ffd2 	bl	800154c <Error_Handler>
	}
	/* USER CODE BEGIN IWDG_Init 2 */

	/* USER CODE END IWDG_Init 2 */

}
 80005a8:	46c0      	nop			; (mov r8, r8)
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	20000044 	.word	0x20000044
 80005b4:	40003000 	.word	0x40003000
 80005b8:	00000fff 	.word	0x00000fff

080005bc <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80005c0:	4b23      	ldr	r3, [pc, #140]	; (8000650 <MX_USART1_UART_Init+0x94>)
 80005c2:	4a24      	ldr	r2, [pc, #144]	; (8000654 <MX_USART1_UART_Init+0x98>)
 80005c4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 80005c6:	4b22      	ldr	r3, [pc, #136]	; (8000650 <MX_USART1_UART_Init+0x94>)
 80005c8:	2296      	movs	r2, #150	; 0x96
 80005ca:	0192      	lsls	r2, r2, #6
 80005cc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ce:	4b20      	ldr	r3, [pc, #128]	; (8000650 <MX_USART1_UART_Init+0x94>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80005d4:	4b1e      	ldr	r3, [pc, #120]	; (8000650 <MX_USART1_UART_Init+0x94>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80005da:	4b1d      	ldr	r3, [pc, #116]	; (8000650 <MX_USART1_UART_Init+0x94>)
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80005e0:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <MX_USART1_UART_Init+0x94>)
 80005e2:	220c      	movs	r2, #12
 80005e4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005e6:	4b1a      	ldr	r3, [pc, #104]	; (8000650 <MX_USART1_UART_Init+0x94>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005ec:	4b18      	ldr	r3, [pc, #96]	; (8000650 <MX_USART1_UART_Init+0x94>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005f2:	4b17      	ldr	r3, [pc, #92]	; (8000650 <MX_USART1_UART_Init+0x94>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80005f8:	4b15      	ldr	r3, [pc, #84]	; (8000650 <MX_USART1_UART_Init+0x94>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005fe:	4b14      	ldr	r3, [pc, #80]	; (8000650 <MX_USART1_UART_Init+0x94>)
 8000600:	2200      	movs	r2, #0
 8000602:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <MX_USART1_UART_Init+0x94>)
 8000606:	0018      	movs	r0, r3
 8000608:	f002 f982 	bl	8002910 <HAL_UART_Init>
 800060c:	1e03      	subs	r3, r0, #0
 800060e:	d001      	beq.n	8000614 <MX_USART1_UART_Init+0x58>
	{
		Error_Handler();
 8000610:	f000 ff9c 	bl	800154c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000614:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_USART1_UART_Init+0x94>)
 8000616:	2100      	movs	r1, #0
 8000618:	0018      	movs	r0, r3
 800061a:	f003 f953 	bl	80038c4 <HAL_UARTEx_SetTxFifoThreshold>
 800061e:	1e03      	subs	r3, r0, #0
 8000620:	d001      	beq.n	8000626 <MX_USART1_UART_Init+0x6a>
	{
		Error_Handler();
 8000622:	f000 ff93 	bl	800154c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000626:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <MX_USART1_UART_Init+0x94>)
 8000628:	2100      	movs	r1, #0
 800062a:	0018      	movs	r0, r3
 800062c:	f003 f98a 	bl	8003944 <HAL_UARTEx_SetRxFifoThreshold>
 8000630:	1e03      	subs	r3, r0, #0
 8000632:	d001      	beq.n	8000638 <MX_USART1_UART_Init+0x7c>
	{
		Error_Handler();
 8000634:	f000 ff8a 	bl	800154c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <MX_USART1_UART_Init+0x94>)
 800063a:	0018      	movs	r0, r3
 800063c:	f003 f908 	bl	8003850 <HAL_UARTEx_DisableFifoMode>
 8000640:	1e03      	subs	r3, r0, #0
 8000642:	d001      	beq.n	8000648 <MX_USART1_UART_Init+0x8c>
	{
		Error_Handler();
 8000644:	f000 ff82 	bl	800154c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000648:	46c0      	nop			; (mov r8, r8)
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	20000054 	.word	0x20000054
 8000654:	40013800 	.word	0x40013800

08000658 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800065c:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <MX_USART2_UART_Init+0x60>)
 800065e:	4a17      	ldr	r2, [pc, #92]	; (80006bc <MX_USART2_UART_Init+0x64>)
 8000660:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8000662:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <MX_USART2_UART_Init+0x60>)
 8000664:	2296      	movs	r2, #150	; 0x96
 8000666:	0192      	lsls	r2, r2, #6
 8000668:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800066a:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <MX_USART2_UART_Init+0x60>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000670:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_USART2_UART_Init+0x60>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000676:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <MX_USART2_UART_Init+0x60>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800067c:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_USART2_UART_Init+0x60>)
 800067e:	220c      	movs	r2, #12
 8000680:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000682:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <MX_USART2_UART_Init+0x60>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000688:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <MX_USART2_UART_Init+0x60>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800068e:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <MX_USART2_UART_Init+0x60>)
 8000690:	2200      	movs	r2, #0
 8000692:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000694:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <MX_USART2_UART_Init+0x60>)
 8000696:	2200      	movs	r2, #0
 8000698:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800069a:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <MX_USART2_UART_Init+0x60>)
 800069c:	2200      	movs	r2, #0
 800069e:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80006a0:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <MX_USART2_UART_Init+0x60>)
 80006a2:	0018      	movs	r0, r3
 80006a4:	f002 f934 	bl	8002910 <HAL_UART_Init>
 80006a8:	1e03      	subs	r3, r0, #0
 80006aa:	d001      	beq.n	80006b0 <MX_USART2_UART_Init+0x58>
	{
		Error_Handler();
 80006ac:	f000 ff4e 	bl	800154c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80006b0:	46c0      	nop			; (mov r8, r8)
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	200000e8 	.word	0x200000e8
 80006bc:	40004400 	.word	0x40004400

080006c0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	b089      	sub	sp, #36	; 0x24
 80006c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	240c      	movs	r4, #12
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	0018      	movs	r0, r3
 80006cc:	2314      	movs	r3, #20
 80006ce:	001a      	movs	r2, r3
 80006d0:	2100      	movs	r1, #0
 80006d2:	f003 f9d7 	bl	8003a84 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80006d6:	4b6b      	ldr	r3, [pc, #428]	; (8000884 <MX_GPIO_Init+0x1c4>)
 80006d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006da:	4b6a      	ldr	r3, [pc, #424]	; (8000884 <MX_GPIO_Init+0x1c4>)
 80006dc:	2102      	movs	r1, #2
 80006de:	430a      	orrs	r2, r1
 80006e0:	635a      	str	r2, [r3, #52]	; 0x34
 80006e2:	4b68      	ldr	r3, [pc, #416]	; (8000884 <MX_GPIO_Init+0x1c4>)
 80006e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006e6:	2202      	movs	r2, #2
 80006e8:	4013      	ands	r3, r2
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006ee:	4b65      	ldr	r3, [pc, #404]	; (8000884 <MX_GPIO_Init+0x1c4>)
 80006f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006f2:	4b64      	ldr	r3, [pc, #400]	; (8000884 <MX_GPIO_Init+0x1c4>)
 80006f4:	2104      	movs	r1, #4
 80006f6:	430a      	orrs	r2, r1
 80006f8:	635a      	str	r2, [r3, #52]	; 0x34
 80006fa:	4b62      	ldr	r3, [pc, #392]	; (8000884 <MX_GPIO_Init+0x1c4>)
 80006fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006fe:	2204      	movs	r2, #4
 8000700:	4013      	ands	r3, r2
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	4b5f      	ldr	r3, [pc, #380]	; (8000884 <MX_GPIO_Init+0x1c4>)
 8000708:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800070a:	4b5e      	ldr	r3, [pc, #376]	; (8000884 <MX_GPIO_Init+0x1c4>)
 800070c:	2101      	movs	r1, #1
 800070e:	430a      	orrs	r2, r1
 8000710:	635a      	str	r2, [r3, #52]	; 0x34
 8000712:	4b5c      	ldr	r3, [pc, #368]	; (8000884 <MX_GPIO_Init+0x1c4>)
 8000714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000716:	2201      	movs	r2, #1
 8000718:	4013      	ands	r3, r2
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LEDK_GPIO_O_P_Pin|LCD_CS2_GPIO_O_P_Pin, GPIO_PIN_SET);
 800071e:	2381      	movs	r3, #129	; 0x81
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	4859      	ldr	r0, [pc, #356]	; (8000888 <MX_GPIO_Init+0x1c8>)
 8000724:	2201      	movs	r2, #1
 8000726:	0019      	movs	r1, r3
 8000728:	f001 fc43 	bl	8001fb2 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LCD_E_GPIO_O_P_Pin|LCD_RS_GPIO_O_P_Pin|LCD_CS1_GPIO_O_P_Pin, GPIO_PIN_SET);
 800072c:	4957      	ldr	r1, [pc, #348]	; (800088c <MX_GPIO_Init+0x1cc>)
 800072e:	4b58      	ldr	r3, [pc, #352]	; (8000890 <MX_GPIO_Init+0x1d0>)
 8000730:	2201      	movs	r2, #1
 8000732:	0018      	movs	r0, r3
 8000734:	f001 fc3d 	bl	8001fb2 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LCD_R_W_GPIO_O_P_Pin|DB0_GPIO_O_P_Pin|DB1_GPIO_O_P_Pin|DB2_GPIO_O_P_Pin
 8000738:	4956      	ldr	r1, [pc, #344]	; (8000894 <MX_GPIO_Init+0x1d4>)
 800073a:	23a0      	movs	r3, #160	; 0xa0
 800073c:	05db      	lsls	r3, r3, #23
 800073e:	2201      	movs	r2, #1
 8000740:	0018      	movs	r0, r3
 8000742:	f001 fc36 	bl	8001fb2 <HAL_GPIO_WritePin>
			|DB3_GPIO_O_P_Pin|DB4_GPIO_O_P_Pin|DB5_GPIO_O_P_Pin|DB6_GPIO_O_P_Pin
			|DB7_GPIO_O_P_Pin, GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_RST_GPIO_O_P_GPIO_Port, LCD_RST_GPIO_O_P_Pin, GPIO_PIN_RESET);
 8000746:	23a0      	movs	r3, #160	; 0xa0
 8000748:	05db      	lsls	r3, r3, #23
 800074a:	2200      	movs	r2, #0
 800074c:	2102      	movs	r1, #2
 800074e:	0018      	movs	r0, r3
 8000750:	f001 fc2f 	bl	8001fb2 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DISP_INT_GPIO_Port, DISP_INT_Pin, GPIO_PIN_RESET);
 8000754:	4b4c      	ldr	r3, [pc, #304]	; (8000888 <MX_GPIO_Init+0x1c8>)
 8000756:	2200      	movs	r2, #0
 8000758:	2101      	movs	r1, #1
 800075a:	0018      	movs	r0, r3
 800075c:	f001 fc29 	bl	8001fb2 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LEDK_GPIO_O_P_Pin LCD_CS2_GPIO_O_P_Pin */
	GPIO_InitStruct.Pin = LEDK_GPIO_O_P_Pin|LCD_CS2_GPIO_O_P_Pin;
 8000760:	193b      	adds	r3, r7, r4
 8000762:	2281      	movs	r2, #129	; 0x81
 8000764:	0092      	lsls	r2, r2, #2
 8000766:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000768:	193b      	adds	r3, r7, r4
 800076a:	2201      	movs	r2, #1
 800076c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	193b      	adds	r3, r7, r4
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000774:	193b      	adds	r3, r7, r4
 8000776:	2202      	movs	r2, #2
 8000778:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800077a:	193b      	adds	r3, r7, r4
 800077c:	4a42      	ldr	r2, [pc, #264]	; (8000888 <MX_GPIO_Init+0x1c8>)
 800077e:	0019      	movs	r1, r3
 8000780:	0010      	movs	r0, r2
 8000782:	f001 fa87 	bl	8001c94 <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_E_GPIO_O_P_Pin LCD_RS_GPIO_O_P_Pin */
	GPIO_InitStruct.Pin = LCD_E_GPIO_O_P_Pin|LCD_RS_GPIO_O_P_Pin;
 8000786:	0021      	movs	r1, r4
 8000788:	187b      	adds	r3, r7, r1
 800078a:	22c0      	movs	r2, #192	; 0xc0
 800078c:	0212      	lsls	r2, r2, #8
 800078e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000790:	000c      	movs	r4, r1
 8000792:	193b      	adds	r3, r7, r4
 8000794:	2201      	movs	r2, #1
 8000796:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	193b      	adds	r3, r7, r4
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	193b      	adds	r3, r7, r4
 80007a0:	2200      	movs	r2, #0
 80007a2:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007a4:	193b      	adds	r3, r7, r4
 80007a6:	4a3a      	ldr	r2, [pc, #232]	; (8000890 <MX_GPIO_Init+0x1d0>)
 80007a8:	0019      	movs	r1, r3
 80007aa:	0010      	movs	r0, r2
 80007ac:	f001 fa72 	bl	8001c94 <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_R_W_GPIO_O_P_Pin LCD_RST_GPIO_O_P_Pin DB0_GPIO_O_P_Pin DB1_GPIO_O_P_Pin
                           DB2_GPIO_O_P_Pin DB3_GPIO_O_P_Pin DB4_GPIO_O_P_Pin DB5_GPIO_O_P_Pin
                           DB6_GPIO_O_P_Pin DB7_GPIO_O_P_Pin */
	GPIO_InitStruct.Pin = LCD_R_W_GPIO_O_P_Pin|LCD_RST_GPIO_O_P_Pin|DB0_GPIO_O_P_Pin|DB1_GPIO_O_P_Pin
 80007b0:	193b      	adds	r3, r7, r4
 80007b2:	4a39      	ldr	r2, [pc, #228]	; (8000898 <MX_GPIO_Init+0x1d8>)
 80007b4:	601a      	str	r2, [r3, #0]
			|DB2_GPIO_O_P_Pin|DB3_GPIO_O_P_Pin|DB4_GPIO_O_P_Pin|DB5_GPIO_O_P_Pin
			|DB6_GPIO_O_P_Pin|DB7_GPIO_O_P_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b6:	193b      	adds	r3, r7, r4
 80007b8:	2201      	movs	r2, #1
 80007ba:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	193b      	adds	r3, r7, r4
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007c2:	193b      	adds	r3, r7, r4
 80007c4:	2202      	movs	r2, #2
 80007c6:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c8:	193a      	adds	r2, r7, r4
 80007ca:	23a0      	movs	r3, #160	; 0xa0
 80007cc:	05db      	lsls	r3, r3, #23
 80007ce:	0011      	movs	r1, r2
 80007d0:	0018      	movs	r0, r3
 80007d2:	f001 fa5f 	bl	8001c94 <HAL_GPIO_Init>

	/*Configure GPIO pin : DISP_INT_Pin */
	GPIO_InitStruct.Pin = DISP_INT_Pin;
 80007d6:	193b      	adds	r3, r7, r4
 80007d8:	2201      	movs	r2, #1
 80007da:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	193b      	adds	r3, r7, r4
 80007de:	2201      	movs	r2, #1
 80007e0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	193b      	adds	r3, r7, r4
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	193b      	adds	r3, r7, r4
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(DISP_INT_GPIO_Port, &GPIO_InitStruct);
 80007ee:	193b      	adds	r3, r7, r4
 80007f0:	4a25      	ldr	r2, [pc, #148]	; (8000888 <MX_GPIO_Init+0x1c8>)
 80007f2:	0019      	movs	r1, r3
 80007f4:	0010      	movs	r0, r2
 80007f6:	f001 fa4d 	bl	8001c94 <HAL_GPIO_Init>

	/*Configure GPIO pins : DISP_EN_Pin SW4_GPIO_I_P_Pin SW3_GPIO_I_P_Pin SW2_GPIO_I_P_Pin
                           SW1__GPIO_I_P_Pin */
	GPIO_InitStruct.Pin = DISP_EN_Pin|SW4_GPIO_I_P_Pin|SW3_GPIO_I_P_Pin|SW2_GPIO_I_P_Pin
 80007fa:	0021      	movs	r1, r4
 80007fc:	187b      	adds	r3, r7, r1
 80007fe:	229d      	movs	r2, #157	; 0x9d
 8000800:	0052      	lsls	r2, r2, #1
 8000802:	601a      	str	r2, [r3, #0]
			|SW1__GPIO_I_P_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000804:	000c      	movs	r4, r1
 8000806:	193b      	adds	r3, r7, r4
 8000808:	4a24      	ldr	r2, [pc, #144]	; (800089c <MX_GPIO_Init+0x1dc>)
 800080a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	193b      	adds	r3, r7, r4
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000812:	193b      	adds	r3, r7, r4
 8000814:	4a1c      	ldr	r2, [pc, #112]	; (8000888 <MX_GPIO_Init+0x1c8>)
 8000816:	0019      	movs	r1, r3
 8000818:	0010      	movs	r0, r2
 800081a:	f001 fa3b 	bl	8001c94 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_CS1_GPIO_O_P_Pin */
	GPIO_InitStruct.Pin = LCD_CS1_GPIO_O_P_Pin;
 800081e:	0021      	movs	r1, r4
 8000820:	187b      	adds	r3, r7, r1
 8000822:	2240      	movs	r2, #64	; 0x40
 8000824:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	187b      	adds	r3, r7, r1
 8000828:	2201      	movs	r2, #1
 800082a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	187b      	adds	r3, r7, r1
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000832:	187b      	adds	r3, r7, r1
 8000834:	2202      	movs	r2, #2
 8000836:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LCD_CS1_GPIO_O_P_GPIO_Port, &GPIO_InitStruct);
 8000838:	187b      	adds	r3, r7, r1
 800083a:	4a15      	ldr	r2, [pc, #84]	; (8000890 <MX_GPIO_Init+0x1d0>)
 800083c:	0019      	movs	r1, r3
 800083e:	0010      	movs	r0, r2
 8000840:	f001 fa28 	bl	8001c94 <HAL_GPIO_Init>

	/**/
	__HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 8000844:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <MX_GPIO_Init+0x1e0>)
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <MX_GPIO_Init+0x1e0>)
 800084a:	2180      	movs	r1, #128	; 0x80
 800084c:	0309      	lsls	r1, r1, #12
 800084e:	430a      	orrs	r2, r1
 8000850:	601a      	str	r2, [r3, #0]

	/**/
	__HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PC14);
 8000852:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <MX_GPIO_Init+0x1e0>)
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <MX_GPIO_Init+0x1e0>)
 8000858:	2180      	movs	r1, #128	; 0x80
 800085a:	0449      	lsls	r1, r1, #17
 800085c:	430a      	orrs	r2, r1
 800085e:	601a      	str	r2, [r3, #0]

	/**/
	__HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PA9);
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MX_GPIO_Init+0x1e0>)
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_GPIO_Init+0x1e0>)
 8000866:	2180      	movs	r1, #128	; 0x80
 8000868:	03c9      	lsls	r1, r1, #15
 800086a:	430a      	orrs	r2, r1
 800086c:	601a      	str	r2, [r3, #0]

	/**/
	__HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PA10);
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MX_GPIO_Init+0x1e0>)
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <MX_GPIO_Init+0x1e0>)
 8000874:	2180      	movs	r1, #128	; 0x80
 8000876:	0409      	lsls	r1, r1, #16
 8000878:	430a      	orrs	r2, r1
 800087a:	601a      	str	r2, [r3, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800087c:	46c0      	nop			; (mov r8, r8)
 800087e:	46bd      	mov	sp, r7
 8000880:	b009      	add	sp, #36	; 0x24
 8000882:	bd90      	pop	{r4, r7, pc}
 8000884:	40021000 	.word	0x40021000
 8000888:	50000400 	.word	0x50000400
 800088c:	0000c040 	.word	0x0000c040
 8000890:	50000800 	.word	0x50000800
 8000894:	00000ff1 	.word	0x00000ff1
 8000898:	00000ff3 	.word	0x00000ff3
 800089c:	10110000 	.word	0x10110000
 80008a0:	40010000 	.word	0x40010000

080008a4 <BusyL>:

/* USER CODE BEGIN 4 */
void BusyL(void) {
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
	uint8_t flag = 0xff;
 80008aa:	1dfb      	adds	r3, r7, #7
 80008ac:	22ff      	movs	r2, #255	; 0xff
 80008ae:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS1_GPIO_O_P_GPIO_Port, LCD_CS1_GPIO_O_P_Pin, GPIO_PIN_SET);  // CS1 = 1
 80008b0:	4b1e      	ldr	r3, [pc, #120]	; (800092c <BusyL+0x88>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	2140      	movs	r1, #64	; 0x40
 80008b6:	0018      	movs	r0, r3
 80008b8:	f001 fb7b 	bl	8001fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS2_GPIO_O_P_GPIO_Port, LCD_CS2_GPIO_O_P_Pin, GPIO_PIN_RESET); // CS2 = 0
 80008bc:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <BusyL+0x8c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	2104      	movs	r1, #4
 80008c2:	0018      	movs	r0, r3
 80008c4:	f001 fb75 	bl	8001fb2 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); // E = 0

	HAL_GPIO_WritePin(LCD_RS_GPIO_O_P_GPIO_Port, LCD_RS_GPIO_O_P_Pin, GPIO_PIN_RESET); // RS = 0
 80008c8:	2380      	movs	r3, #128	; 0x80
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	4817      	ldr	r0, [pc, #92]	; (800092c <BusyL+0x88>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	0019      	movs	r1, r3
 80008d2:	f001 fb6e 	bl	8001fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_R_W_GPIO_O_P_GPIO_Port, LCD_R_W_GPIO_O_P_Pin, GPIO_PIN_SET);   // RW = 1
 80008d6:	23a0      	movs	r3, #160	; 0xa0
 80008d8:	05db      	lsls	r3, r3, #23
 80008da:	2201      	movs	r2, #1
 80008dc:	2101      	movs	r1, #1
 80008de:	0018      	movs	r0, r3
 80008e0:	f001 fb67 	bl	8001fb2 <HAL_GPIO_WritePin>
	writePortSet();
 80008e4:	f000 fc8c 	bl	8001200 <writePortSet>
	while ((flag & 0x80) == 0x80) {
 80008e8:	e015      	b.n	8000916 <BusyL+0x72>
		HAL_GPIO_WritePin(LCD_E_GPIO_O_P_GPIO_Port, LCD_E_GPIO_O_P_Pin, GPIO_PIN_SET); // E = 1
 80008ea:	2380      	movs	r3, #128	; 0x80
 80008ec:	01db      	lsls	r3, r3, #7
 80008ee:	480f      	ldr	r0, [pc, #60]	; (800092c <BusyL+0x88>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	0019      	movs	r1, r3
 80008f4:	f001 fb5d 	bl	8001fb2 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80008f8:	2001      	movs	r0, #1
 80008fa:	f000 ffed 	bl	80018d8 <HAL_Delay>
		flag= ReadDataFromPins();
 80008fe:	1dfc      	adds	r4, r7, #7
 8000900:	f000 fcbf 	bl	8001282 <ReadDataFromPins>
 8000904:	0003      	movs	r3, r0
 8000906:	7023      	strb	r3, [r4, #0]
		HAL_GPIO_WritePin(LCD_E_GPIO_O_P_GPIO_Port, LCD_E_GPIO_O_P_Pin, GPIO_PIN_RESET); // E = 0
 8000908:	2380      	movs	r3, #128	; 0x80
 800090a:	01db      	lsls	r3, r3, #7
 800090c:	4807      	ldr	r0, [pc, #28]	; (800092c <BusyL+0x88>)
 800090e:	2200      	movs	r2, #0
 8000910:	0019      	movs	r1, r3
 8000912:	f001 fb4e 	bl	8001fb2 <HAL_GPIO_WritePin>
	while ((flag & 0x80) == 0x80) {
 8000916:	1dfb      	adds	r3, r7, #7
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	b25b      	sxtb	r3, r3
 800091c:	2b00      	cmp	r3, #0
 800091e:	dbe4      	blt.n	80008ea <BusyL+0x46>
	}
}
 8000920:	46c0      	nop			; (mov r8, r8)
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	46bd      	mov	sp, r7
 8000926:	b003      	add	sp, #12
 8000928:	bd90      	pop	{r4, r7, pc}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	50000800 	.word	0x50000800
 8000930:	50000400 	.word	0x50000400

08000934 <BusyR>:

void BusyR(void) {
 8000934:	b590      	push	{r4, r7, lr}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
	uint8_t flag = 0xff;
 800093a:	1dfb      	adds	r3, r7, #7
 800093c:	22ff      	movs	r2, #255	; 0xff
 800093e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS1_GPIO_O_P_GPIO_Port, LCD_CS1_GPIO_O_P_Pin, GPIO_PIN_RESET); // CS1 = 0
 8000940:	4b22      	ldr	r3, [pc, #136]	; (80009cc <BusyR+0x98>)
 8000942:	2200      	movs	r2, #0
 8000944:	2140      	movs	r1, #64	; 0x40
 8000946:	0018      	movs	r0, r3
 8000948:	f001 fb33 	bl	8001fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS2_GPIO_O_P_GPIO_Port, LCD_CS2_GPIO_O_P_Pin, GPIO_PIN_SET);   // CS2 = 1
 800094c:	4b20      	ldr	r3, [pc, #128]	; (80009d0 <BusyR+0x9c>)
 800094e:	2201      	movs	r2, #1
 8000950:	2104      	movs	r1, #4
 8000952:	0018      	movs	r0, r3
 8000954:	f001 fb2d 	bl	8001fb2 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); // E = 0

	HAL_GPIO_WritePin(LCD_RS_GPIO_O_P_GPIO_Port, LCD_RS_GPIO_O_P_Pin, GPIO_PIN_RESET); // RS = 0
 8000958:	2380      	movs	r3, #128	; 0x80
 800095a:	021b      	lsls	r3, r3, #8
 800095c:	481b      	ldr	r0, [pc, #108]	; (80009cc <BusyR+0x98>)
 800095e:	2200      	movs	r2, #0
 8000960:	0019      	movs	r1, r3
 8000962:	f001 fb26 	bl	8001fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_R_W_GPIO_O_P_GPIO_Port, LCD_R_W_GPIO_O_P_Pin, GPIO_PIN_SET);   // RW = 1
 8000966:	23a0      	movs	r3, #160	; 0xa0
 8000968:	05db      	lsls	r3, r3, #23
 800096a:	2201      	movs	r2, #1
 800096c:	2101      	movs	r1, #1
 800096e:	0018      	movs	r0, r3
 8000970:	f001 fb1f 	bl	8001fb2 <HAL_GPIO_WritePin>
	writePortSet();
 8000974:	f000 fc44 	bl	8001200 <writePortSet>
	while ((flag & 0x80) == 0x80) {
 8000978:	e01d      	b.n	80009b6 <BusyR+0x82>
		HAL_GPIO_WritePin(LCD_E_GPIO_O_P_GPIO_Port, LCD_E_GPIO_O_P_Pin, GPIO_PIN_SET); // E = 1
 800097a:	2380      	movs	r3, #128	; 0x80
 800097c:	01db      	lsls	r3, r3, #7
 800097e:	4813      	ldr	r0, [pc, #76]	; (80009cc <BusyR+0x98>)
 8000980:	2201      	movs	r2, #1
 8000982:	0019      	movs	r1, r3
 8000984:	f001 fb15 	bl	8001fb2 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000988:	2001      	movs	r0, #1
 800098a:	f000 ffa5 	bl	80018d8 <HAL_Delay>
		flag= ReadDataFromPins();
 800098e:	1dfc      	adds	r4, r7, #7
 8000990:	f000 fc77 	bl	8001282 <ReadDataFromPins>
 8000994:	0003      	movs	r3, r0
 8000996:	7023      	strb	r3, [r4, #0]
		flag = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6); // Read from the status pin
 8000998:	1dfc      	adds	r4, r7, #7
 800099a:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <BusyR+0x9c>)
 800099c:	2140      	movs	r1, #64	; 0x40
 800099e:	0018      	movs	r0, r3
 80009a0:	f001 faea 	bl	8001f78 <HAL_GPIO_ReadPin>
 80009a4:	0003      	movs	r3, r0
 80009a6:	7023      	strb	r3, [r4, #0]
		HAL_GPIO_WritePin(LCD_E_GPIO_O_P_GPIO_Port, LCD_E_GPIO_O_P_Pin, GPIO_PIN_RESET); // E = 0
 80009a8:	2380      	movs	r3, #128	; 0x80
 80009aa:	01db      	lsls	r3, r3, #7
 80009ac:	4807      	ldr	r0, [pc, #28]	; (80009cc <BusyR+0x98>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	0019      	movs	r1, r3
 80009b2:	f001 fafe 	bl	8001fb2 <HAL_GPIO_WritePin>
	while ((flag & 0x80) == 0x80) {
 80009b6:	1dfb      	adds	r3, r7, #7
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	b25b      	sxtb	r3, r3
 80009bc:	2b00      	cmp	r3, #0
 80009be:	dbdc      	blt.n	800097a <BusyR+0x46>
	}
}
 80009c0:	46c0      	nop			; (mov r8, r8)
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	46bd      	mov	sp, r7
 80009c6:	b003      	add	sp, #12
 80009c8:	bd90      	pop	{r4, r7, pc}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	50000800 	.word	0x50000800
 80009d0:	50000400 	.word	0x50000400

080009d4 <Locatexy>:

void Locatexy(void) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
	unsigned char x, y;
	uint8_t Col = 0x00;  // Replace with actual value or argument
 80009da:	1dfb      	adds	r3, r7, #7
 80009dc:	2200      	movs	r2, #0
 80009de:	701a      	strb	r2, [r3, #0]
	uint8_t Page = 0x00; // Replace with actual value or argument
 80009e0:	1dbb      	adds	r3, r7, #6
 80009e2:	2200      	movs	r2, #0
 80009e4:	701a      	strb	r2, [r3, #0]

	switch (Col & 0xc0) {
 80009e6:	1dfb      	adds	r3, r7, #7
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	22c0      	movs	r2, #192	; 0xc0
 80009ec:	4013      	ands	r3, r2
 80009ee:	d002      	beq.n	80009f6 <Locatexy+0x22>
 80009f0:	2b40      	cmp	r3, #64	; 0x40
 80009f2:	d003      	beq.n	80009fc <Locatexy+0x28>
 80009f4:	e005      	b.n	8000a02 <Locatexy+0x2e>
	case 0:
		BusyL();
 80009f6:	f7ff ff55 	bl	80008a4 <BusyL>
		break;
 80009fa:	e002      	b.n	8000a02 <Locatexy+0x2e>
	case 0x40:
		BusyR();
 80009fc:	f7ff ff9a 	bl	8000934 <BusyR>
		break;
 8000a00:	46c0      	nop			; (mov r8, r8)
	}

	x = (Col & 0x3F) | 0x40; // col.and.0x3f.or.Set X Address
 8000a02:	1dfb      	adds	r3, r7, #7
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	b25b      	sxtb	r3, r3
 8000a08:	223f      	movs	r2, #63	; 0x3f
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	b25b      	sxtb	r3, r3
 8000a0e:	2240      	movs	r2, #64	; 0x40
 8000a10:	4313      	orrs	r3, r2
 8000a12:	b25a      	sxtb	r2, r3
 8000a14:	1d7b      	adds	r3, r7, #5
 8000a16:	701a      	strb	r2, [r3, #0]
	y = (Page & 0x07) | 0xB8; // row.and.0x07.or.set Page
 8000a18:	1dbb      	adds	r3, r7, #6
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	b25b      	sxtb	r3, r3
 8000a1e:	2207      	movs	r2, #7
 8000a20:	4013      	ands	r3, r2
 8000a22:	b25b      	sxtb	r3, r3
 8000a24:	2248      	movs	r2, #72	; 0x48
 8000a26:	4252      	negs	r2, r2
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	b25a      	sxtb	r2, r3
 8000a2c:	1d3b      	adds	r3, r7, #4
 8000a2e:	701a      	strb	r2, [r3, #0]

	// Set RS and RW to 0
	HAL_GPIO_WritePin(LCD_RS_GPIO_O_P_GPIO_Port, LCD_RS_GPIO_O_P_Pin, GPIO_PIN_RESET); // RS = 0
 8000a30:	2380      	movs	r3, #128	; 0x80
 8000a32:	021b      	lsls	r3, r3, #8
 8000a34:	4827      	ldr	r0, [pc, #156]	; (8000ad4 <Locatexy+0x100>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	0019      	movs	r1, r3
 8000a3a:	f001 faba 	bl	8001fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_R_W_GPIO_O_P_GPIO_Port, LCD_R_W_GPIO_O_P_Pin, GPIO_PIN_RESET); // RW = 0
 8000a3e:	23a0      	movs	r3, #160	; 0xa0
 8000a40:	05db      	lsls	r3, r3, #23
 8000a42:	2200      	movs	r2, #0
 8000a44:	2101      	movs	r1, #1
 8000a46:	0018      	movs	r0, r3
 8000a48:	f001 fab3 	bl	8001fb2 <HAL_GPIO_WritePin>

	// Send Y Address
	Printdata(y);
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	0018      	movs	r0, r3
 8000a52:	f000 fcc9 	bl	80013e8 <Printdata>
	HAL_GPIO_WritePin(LCD_E_GPIO_O_P_GPIO_Port, LCD_E_GPIO_O_P_Pin, GPIO_PIN_SET);  // E = 1
 8000a56:	2380      	movs	r3, #128	; 0x80
 8000a58:	01db      	lsls	r3, r3, #7
 8000a5a:	481e      	ldr	r0, [pc, #120]	; (8000ad4 <Locatexy+0x100>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	0019      	movs	r1, r3
 8000a60:	f001 faa7 	bl	8001fb2 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000a64:	2001      	movs	r0, #1
 8000a66:	f000 ff37 	bl	80018d8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_O_P_GPIO_Port, LCD_E_GPIO_O_P_Pin, GPIO_PIN_RESET); // E = 0
 8000a6a:	2380      	movs	r3, #128	; 0x80
 8000a6c:	01db      	lsls	r3, r3, #7
 8000a6e:	4819      	ldr	r0, [pc, #100]	; (8000ad4 <Locatexy+0x100>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	0019      	movs	r1, r3
 8000a74:	f001 fa9d 	bl	8001fb2 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000a78:	2001      	movs	r0, #1
 8000a7a:	f000 ff2d 	bl	80018d8 <HAL_Delay>

	// Send X Address
	HAL_GPIO_WritePin(LCD_RS_GPIO_O_P_GPIO_Port, LCD_RS_GPIO_O_P_Pin, GPIO_PIN_RESET); // RS = 0
 8000a7e:	2380      	movs	r3, #128	; 0x80
 8000a80:	021b      	lsls	r3, r3, #8
 8000a82:	4814      	ldr	r0, [pc, #80]	; (8000ad4 <Locatexy+0x100>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	0019      	movs	r1, r3
 8000a88:	f001 fa93 	bl	8001fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_R_W_GPIO_O_P_GPIO_Port, LCD_R_W_GPIO_O_P_Pin, GPIO_PIN_RESET); // RW = 0
 8000a8c:	23a0      	movs	r3, #160	; 0xa0
 8000a8e:	05db      	lsls	r3, r3, #23
 8000a90:	2200      	movs	r2, #0
 8000a92:	2101      	movs	r1, #1
 8000a94:	0018      	movs	r0, r3
 8000a96:	f001 fa8c 	bl	8001fb2 <HAL_GPIO_WritePin>
	Printdata(x);
 8000a9a:	1d7b      	adds	r3, r7, #5
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f000 fca2 	bl	80013e8 <Printdata>
	HAL_GPIO_WritePin(LCD_E_GPIO_O_P_GPIO_Port, LCD_E_GPIO_O_P_Pin, GPIO_PIN_SET);  // E = 1
 8000aa4:	2380      	movs	r3, #128	; 0x80
 8000aa6:	01db      	lsls	r3, r3, #7
 8000aa8:	480a      	ldr	r0, [pc, #40]	; (8000ad4 <Locatexy+0x100>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	0019      	movs	r1, r3
 8000aae:	f001 fa80 	bl	8001fb2 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	f000 ff10 	bl	80018d8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_O_P_GPIO_Port, LCD_E_GPIO_O_P_Pin, GPIO_PIN_RESET); // E = 0
 8000ab8:	2380      	movs	r3, #128	; 0x80
 8000aba:	01db      	lsls	r3, r3, #7
 8000abc:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <Locatexy+0x100>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	0019      	movs	r1, r3
 8000ac2:	f001 fa76 	bl	8001fb2 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	f000 ff06 	bl	80018d8 <HAL_Delay>
}
 8000acc:	46c0      	nop			; (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	b002      	add	sp, #8
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	50000800 	.word	0x50000800

08000ad8 <WriteCommandL>:

void WriteCommandL(uint8_t CommandByte) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	0002      	movs	r2, r0
 8000ae0:	1dfb      	adds	r3, r7, #7
 8000ae2:	701a      	strb	r2, [r3, #0]
	BusyL();
 8000ae4:	f7ff fede 	bl	80008a4 <BusyL>
	Printdata(CommandByte);
 8000ae8:	1dfb      	adds	r3, r7, #7
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	0018      	movs	r0, r3
 8000aee:	f000 fc7b 	bl	80013e8 <Printdata>
	HAL_GPIO_WritePin(LCD_RS_GPIO_O_P_GPIO_Port, LCD_RS_GPIO_O_P_Pin, GPIO_PIN_RESET); // RS = 0
 8000af2:	2380      	movs	r3, #128	; 0x80
 8000af4:	021b      	lsls	r3, r3, #8
 8000af6:	4812      	ldr	r0, [pc, #72]	; (8000b40 <WriteCommandL+0x68>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	0019      	movs	r1, r3
 8000afc:	f001 fa59 	bl	8001fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_R_W_GPIO_O_P_GPIO_Port, LCD_R_W_GPIO_O_P_Pin, GPIO_PIN_RESET); // RW = 0
 8000b00:	23a0      	movs	r3, #160	; 0xa0
 8000b02:	05db      	lsls	r3, r3, #23
 8000b04:	2200      	movs	r2, #0
 8000b06:	2101      	movs	r1, #1
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f001 fa52 	bl	8001fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_E_GPIO_O_P_GPIO_Port, LCD_E_GPIO_O_P_Pin, GPIO_PIN_SET);  // E = 1
 8000b0e:	2380      	movs	r3, #128	; 0x80
 8000b10:	01db      	lsls	r3, r3, #7
 8000b12:	480b      	ldr	r0, [pc, #44]	; (8000b40 <WriteCommandL+0x68>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	0019      	movs	r1, r3
 8000b18:	f001 fa4b 	bl	8001fb2 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	f000 fedb 	bl	80018d8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_O_P_GPIO_Port, LCD_E_GPIO_O_P_Pin, GPIO_PIN_RESET); // E = 0
 8000b22:	2380      	movs	r3, #128	; 0x80
 8000b24:	01db      	lsls	r3, r3, #7
 8000b26:	4806      	ldr	r0, [pc, #24]	; (8000b40 <WriteCommandL+0x68>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	0019      	movs	r1, r3
 8000b2c:	f001 fa41 	bl	8001fb2 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000b30:	2001      	movs	r0, #1
 8000b32:	f000 fed1 	bl	80018d8 <HAL_Delay>
}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	b002      	add	sp, #8
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	50000800 	.word	0x50000800

08000b44 <WriteCommandR>:

void WriteCommandR(uint8_t CommandByte) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	0002      	movs	r2, r0
 8000b4c:	1dfb      	adds	r3, r7, #7
 8000b4e:	701a      	strb	r2, [r3, #0]
	BusyR();
 8000b50:	f7ff fef0 	bl	8000934 <BusyR>
	Printdata(CommandByte);
 8000b54:	1dfb      	adds	r3, r7, #7
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f000 fc45 	bl	80013e8 <Printdata>
	HAL_GPIO_WritePin(LCD_RS_GPIO_O_P_GPIO_Port, LCD_RS_GPIO_O_P_Pin, GPIO_PIN_RESET); // RS = 0
 8000b5e:	2380      	movs	r3, #128	; 0x80
 8000b60:	021b      	lsls	r3, r3, #8
 8000b62:	4812      	ldr	r0, [pc, #72]	; (8000bac <WriteCommandR+0x68>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	0019      	movs	r1, r3
 8000b68:	f001 fa23 	bl	8001fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_R_W_GPIO_O_P_GPIO_Port, LCD_R_W_GPIO_O_P_Pin, GPIO_PIN_RESET); // RW = 0
 8000b6c:	23a0      	movs	r3, #160	; 0xa0
 8000b6e:	05db      	lsls	r3, r3, #23
 8000b70:	2200      	movs	r2, #0
 8000b72:	2101      	movs	r1, #1
 8000b74:	0018      	movs	r0, r3
 8000b76:	f001 fa1c 	bl	8001fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_E_GPIO_O_P_GPIO_Port, LCD_E_GPIO_O_P_Pin, GPIO_PIN_SET);  // E = 1
 8000b7a:	2380      	movs	r3, #128	; 0x80
 8000b7c:	01db      	lsls	r3, r3, #7
 8000b7e:	480b      	ldr	r0, [pc, #44]	; (8000bac <WriteCommandR+0x68>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	0019      	movs	r1, r3
 8000b84:	f001 fa15 	bl	8001fb2 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000b88:	2001      	movs	r0, #1
 8000b8a:	f000 fea5 	bl	80018d8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_O_P_GPIO_Port, LCD_E_GPIO_O_P_Pin, GPIO_PIN_RESET); // E = 0
 8000b8e:	2380      	movs	r3, #128	; 0x80
 8000b90:	01db      	lsls	r3, r3, #7
 8000b92:	4806      	ldr	r0, [pc, #24]	; (8000bac <WriteCommandR+0x68>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	0019      	movs	r1, r3
 8000b98:	f001 fa0b 	bl	8001fb2 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	f000 fe9b 	bl	80018d8 <HAL_Delay>
}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	b002      	add	sp, #8
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	50000800 	.word	0x50000800

08000bb0 <WriteData>:
	HAL_GPIO_WritePin(LCD_CS2_GPIO_O_P_GPIO_Port, LCD_CS2_GPIO_O_P_Pin, GPIO_PIN_RESET);   // CS2 = 0

	return DataByte;
}

void WriteData(unsigned char DataByte) {
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b091      	sub	sp, #68	; 0x44
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	0002      	movs	r2, r0
 8000bb8:	1dfb      	adds	r3, r7, #7
 8000bba:	701a      	strb	r2, [r3, #0]
	Locatexy();
 8000bbc:	f7ff ff0a 	bl	80009d4 <Locatexy>
	HAL_GPIO_WritePin(LCD_RS_GPIO_O_P_GPIO_Port, LCD_RS_GPIO_O_P_Pin, GPIO_PIN_SET); // RS = 1
 8000bc0:	2380      	movs	r3, #128	; 0x80
 8000bc2:	021b      	lsls	r3, r3, #8
 8000bc4:	4831      	ldr	r0, [pc, #196]	; (8000c8c <WriteData+0xdc>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	0019      	movs	r1, r3
 8000bca:	f001 f9f2 	bl	8001fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_R_W_GPIO_O_P_GPIO_Port, LCD_R_W_GPIO_O_P_Pin, GPIO_PIN_RESET); // RW = 0
 8000bce:	23a0      	movs	r3, #160	; 0xa0
 8000bd0:	05db      	lsls	r3, r3, #23
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f001 f9eb 	bl	8001fb2 <HAL_GPIO_WritePin>

	// Define an array of GPIO pins corresponding to DB0 to DB7
	GPIO_TypeDef* dataPorts[8] = {
 8000bdc:	2318      	movs	r3, #24
 8000bde:	18fb      	adds	r3, r7, r3
 8000be0:	4a2b      	ldr	r2, [pc, #172]	; (8000c90 <WriteData+0xe0>)
 8000be2:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000be4:	c313      	stmia	r3!, {r0, r1, r4}
 8000be6:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000be8:	c313      	stmia	r3!, {r0, r1, r4}
 8000bea:	ca03      	ldmia	r2!, {r0, r1}
 8000bec:	c303      	stmia	r3!, {r0, r1}
			GPIOA, GPIOA, GPIOA, GPIOA, // Adjust this array to match your actual GPIO port setup
			GPIOA, GPIOA, GPIOA, GPIOA
	};
	uint16_t dataPins[8] = {
 8000bee:	2308      	movs	r3, #8
 8000bf0:	18fb      	adds	r3, r7, r3
 8000bf2:	4a28      	ldr	r2, [pc, #160]	; (8000c94 <WriteData+0xe4>)
 8000bf4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000bf6:	c313      	stmia	r3!, {r0, r1, r4}
 8000bf8:	6812      	ldr	r2, [r2, #0]
 8000bfa:	601a      	str	r2, [r3, #0]
			DB0_GPIO_O_P_Pin, DB1_GPIO_O_P_Pin, DB2_GPIO_O_P_Pin, DB3_GPIO_O_P_Pin,
			DB4_GPIO_O_P_Pin, DB5_GPIO_O_P_Pin, DB6_GPIO_O_P_Pin, DB7_GPIO_O_P_Pin
	};

	// Write each bit of DataByte to the corresponding data pin
	for (int i = 0; i < 8; i++) {
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c00:	e01c      	b.n	8000c3c <WriteData+0x8c>
		GPIO_PinState pinState = (DataByte & (1 << i)) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000c02:	1dfb      	adds	r3, r7, #7
 8000c04:	781a      	ldrb	r2, [r3, #0]
 8000c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c08:	411a      	asrs	r2, r3
 8000c0a:	0013      	movs	r3, r2
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	243b      	movs	r4, #59	; 0x3b
 8000c10:	193b      	adds	r3, r7, r4
 8000c12:	2101      	movs	r1, #1
 8000c14:	400a      	ands	r2, r1
 8000c16:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(dataPorts[i], dataPins[i], pinState);
 8000c18:	2318      	movs	r3, #24
 8000c1a:	18fb      	adds	r3, r7, r3
 8000c1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000c1e:	0092      	lsls	r2, r2, #2
 8000c20:	58d0      	ldr	r0, [r2, r3]
 8000c22:	2308      	movs	r3, #8
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000c28:	0052      	lsls	r2, r2, #1
 8000c2a:	5ad1      	ldrh	r1, [r2, r3]
 8000c2c:	193b      	adds	r3, r7, r4
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	001a      	movs	r2, r3
 8000c32:	f001 f9be 	bl	8001fb2 <HAL_GPIO_WritePin>
	for (int i = 0; i < 8; i++) {
 8000c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c38:	3301      	adds	r3, #1
 8000c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c3e:	2b07      	cmp	r3, #7
 8000c40:	dddf      	ble.n	8000c02 <WriteData+0x52>
	}

	HAL_GPIO_WritePin(LCD_E_GPIO_O_P_GPIO_Port, LCD_E_GPIO_O_P_Pin, GPIO_PIN_SET);  // E = 1
 8000c42:	2380      	movs	r3, #128	; 0x80
 8000c44:	01db      	lsls	r3, r3, #7
 8000c46:	4811      	ldr	r0, [pc, #68]	; (8000c8c <WriteData+0xdc>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	0019      	movs	r1, r3
 8000c4c:	f001 f9b1 	bl	8001fb2 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000c50:	2001      	movs	r0, #1
 8000c52:	f000 fe41 	bl	80018d8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_O_P_GPIO_Port, LCD_E_GPIO_O_P_Pin, GPIO_PIN_RESET); // E = 0
 8000c56:	2380      	movs	r3, #128	; 0x80
 8000c58:	01db      	lsls	r3, r3, #7
 8000c5a:	480c      	ldr	r0, [pc, #48]	; (8000c8c <WriteData+0xdc>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	0019      	movs	r1, r3
 8000c60:	f001 f9a7 	bl	8001fb2 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000c64:	2001      	movs	r0, #1
 8000c66:	f000 fe37 	bl	80018d8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS1_GPIO_O_P_GPIO_Port, LCD_CS1_GPIO_O_P_Pin, GPIO_PIN_RESET); // CS1 = 0
 8000c6a:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <WriteData+0xdc>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2140      	movs	r1, #64	; 0x40
 8000c70:	0018      	movs	r0, r3
 8000c72:	f001 f99e 	bl	8001fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS2_GPIO_O_P_GPIO_Port, LCD_CS2_GPIO_O_P_Pin, GPIO_PIN_RESET);   // CS2 = 0
 8000c76:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <WriteData+0xe8>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2104      	movs	r1, #4
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f001 f998 	bl	8001fb2 <HAL_GPIO_WritePin>
}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	46bd      	mov	sp, r7
 8000c86:	b011      	add	sp, #68	; 0x44
 8000c88:	bd90      	pop	{r4, r7, pc}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	50000800 	.word	0x50000800
 8000c90:	08003af4 	.word	0x08003af4
 8000c94:	08003b14 	.word	0x08003b14
 8000c98:	50000400 	.word	0x50000400

08000c9c <LcmClear>:

void LcmClear(void) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	for (Page = 0; Page < 8; Page++) {
 8000ca0:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <LcmClear+0x4c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	701a      	strb	r2, [r3, #0]
 8000ca6:	e017      	b.n	8000cd8 <LcmClear+0x3c>
		for (Col = 0; Col < 128; Col++) {
 8000ca8:	4b10      	ldr	r3, [pc, #64]	; (8000cec <LcmClear+0x50>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	701a      	strb	r2, [r3, #0]
 8000cae:	e008      	b.n	8000cc2 <LcmClear+0x26>
			WriteData(0);
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f7ff ff7d 	bl	8000bb0 <WriteData>
		for (Col = 0; Col < 128; Col++) {
 8000cb6:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <LcmClear+0x50>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <LcmClear+0x50>)
 8000cc0:	701a      	strb	r2, [r3, #0]
 8000cc2:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <LcmClear+0x50>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	b25b      	sxtb	r3, r3
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	daf1      	bge.n	8000cb0 <LcmClear+0x14>
	for (Page = 0; Page < 8; Page++) {
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <LcmClear+0x4c>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <LcmClear+0x4c>)
 8000cd6:	701a      	strb	r2, [r3, #0]
 8000cd8:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <LcmClear+0x4c>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b07      	cmp	r3, #7
 8000cde:	d9e3      	bls.n	8000ca8 <LcmClear+0xc>
		}
	}
}
 8000ce0:	46c0      	nop			; (mov r8, r8)
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000040 	.word	0x20000040
 8000cec:	20000041 	.word	0x20000041

08000cf0 <LcmInit>:

void LcmInit( void )
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0

	WriteCommandL(0x3f); //DISPALY ON
 8000cf4:	203f      	movs	r0, #63	; 0x3f
 8000cf6:	f7ff feef 	bl	8000ad8 <WriteCommandL>
	WriteCommandR(0x3f);
 8000cfa:	203f      	movs	r0, #63	; 0x3f
 8000cfc:	f7ff ff22 	bl	8000b44 <WriteCommandR>

	WriteCommandL(0xc0); //SET START ADDRESS
 8000d00:	20c0      	movs	r0, #192	; 0xc0
 8000d02:	f7ff fee9 	bl	8000ad8 <WriteCommandL>
	WriteCommandR(0xc0);
 8000d06:	20c0      	movs	r0, #192	; 0xc0
 8000d08:	f7ff ff1c 	bl	8000b44 <WriteCommandR>

	WriteCommandL(0x3f); //DISPLAY ON
 8000d0c:	203f      	movs	r0, #63	; 0x3f
 8000d0e:	f7ff fee3 	bl	8000ad8 <WriteCommandL>
	WriteCommandR(0x3f);
 8000d12:	203f      	movs	r0, #63	; 0x3f
 8000d14:	f7ff ff16 	bl	8000b44 <WriteCommandR>

}
 8000d18:	46c0      	nop			; (mov r8, r8)
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <LcmPutDots>:

void LcmPutDots( unsigned char DotByte,unsigned char DotByte1 )
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	0002      	movs	r2, r0
 8000d28:	1dfb      	adds	r3, r7, #7
 8000d2a:	701a      	strb	r2, [r3, #0]
 8000d2c:	1dbb      	adds	r3, r7, #6
 8000d2e:	1c0a      	adds	r2, r1, #0
 8000d30:	701a      	strb	r2, [r3, #0]
	Page = 0;
 8000d32:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <LcmPutDots+0x84>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
	Col  = 0;
 8000d38:	4b1b      	ldr	r3, [pc, #108]	; (8000da8 <LcmPutDots+0x88>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	701a      	strb	r2, [r3, #0]
	for(Page=0;Page<8;Page++)
 8000d3e:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <LcmPutDots+0x84>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
 8000d44:	e024      	b.n	8000d90 <LcmPutDots+0x70>
	{
		for(Col=0;Col<128;Col++)
 8000d46:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <LcmPutDots+0x88>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]
 8000d4c:	e015      	b.n	8000d7a <LcmPutDots+0x5a>
		{
			WriteData( DotByte );
 8000d4e:	1dfb      	adds	r3, r7, #7
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	0018      	movs	r0, r3
 8000d54:	f7ff ff2c 	bl	8000bb0 <WriteData>
			Col++;
 8000d58:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <LcmPutDots+0x88>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <LcmPutDots+0x88>)
 8000d62:	701a      	strb	r2, [r3, #0]
			WriteData( DotByte1 );
 8000d64:	1dbb      	adds	r3, r7, #6
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f7ff ff21 	bl	8000bb0 <WriteData>
		for(Col=0;Col<128;Col++)
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <LcmPutDots+0x88>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	3301      	adds	r3, #1
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <LcmPutDots+0x88>)
 8000d78:	701a      	strb	r2, [r3, #0]
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <LcmPutDots+0x88>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	b25b      	sxtb	r3, r3
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	dae4      	bge.n	8000d4e <LcmPutDots+0x2e>
	for(Page=0;Page<8;Page++)
 8000d84:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <LcmPutDots+0x84>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <LcmPutDots+0x84>)
 8000d8e:	701a      	strb	r2, [r3, #0]
 8000d90:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <LcmPutDots+0x84>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b07      	cmp	r3, #7
 8000d96:	d9d6      	bls.n	8000d46 <LcmPutDots+0x26>
		}

	}
}
 8000d98:	46c0      	nop			; (mov r8, r8)
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	b002      	add	sp, #8
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	20000040 	.word	0x20000040
 8000da8:	20000041 	.word	0x20000041

08000dac <LcmPutBMP>:

void LcmPutBMP(const uint8_t *puts)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	unsigned int X=0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
	Page = 0;
 8000db8:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <LcmPutBMP+0x70>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	701a      	strb	r2, [r3, #0]
	Col  = 0;
 8000dbe:	4b18      	ldr	r3, [pc, #96]	; (8000e20 <LcmPutBMP+0x74>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	701a      	strb	r2, [r3, #0]
	for(Page=0;Page<8;Page++)
 8000dc4:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <LcmPutBMP+0x70>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	701a      	strb	r2, [r3, #0]
 8000dca:	e01e      	b.n	8000e0a <LcmPutBMP+0x5e>
	{
		for(Col=0;Col<128;Col++)
 8000dcc:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <LcmPutBMP+0x74>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	701a      	strb	r2, [r3, #0]
 8000dd2:	e00f      	b.n	8000df4 <LcmPutBMP+0x48>
		{
			WriteData( puts[X] );
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	18d3      	adds	r3, r2, r3
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f7ff fee7 	bl	8000bb0 <WriteData>
			X++;
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	3301      	adds	r3, #1
 8000de6:	60fb      	str	r3, [r7, #12]
		for(Col=0;Col<128;Col++)
 8000de8:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <LcmPutBMP+0x74>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	3301      	adds	r3, #1
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <LcmPutBMP+0x74>)
 8000df2:	701a      	strb	r2, [r3, #0]
 8000df4:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <LcmPutBMP+0x74>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	b25b      	sxtb	r3, r3
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	daea      	bge.n	8000dd4 <LcmPutBMP+0x28>
	for(Page=0;Page<8;Page++)
 8000dfe:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <LcmPutBMP+0x70>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	3301      	adds	r3, #1
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <LcmPutBMP+0x70>)
 8000e08:	701a      	strb	r2, [r3, #0]
 8000e0a:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <LcmPutBMP+0x70>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2b07      	cmp	r3, #7
 8000e10:	d9dc      	bls.n	8000dcc <LcmPutBMP+0x20>
		}
	}
}
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	46c0      	nop			; (mov r8, r8)
 8000e16:	46bd      	mov	sp, r7
 8000e18:	b004      	add	sp, #16
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000040 	.word	0x20000040
 8000e20:	20000041 	.word	0x20000041

08000e24 <LcmReverseBMPP>:

void LcmReverseBMPP(const uint8_t *puts)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
	unsigned int X=0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
	Page = 0;
 8000e30:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <LcmReverseBMPP+0x74>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	701a      	strb	r2, [r3, #0]
	Col  = 0;
 8000e36:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <LcmReverseBMPP+0x78>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	701a      	strb	r2, [r3, #0]
	for(Page=0;Page<8;Page++)
 8000e3c:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <LcmReverseBMPP+0x74>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	701a      	strb	r2, [r3, #0]
 8000e42:	e020      	b.n	8000e86 <LcmReverseBMPP+0x62>
	{
		for(Col=0;Col<128;Col++)
 8000e44:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <LcmReverseBMPP+0x78>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	701a      	strb	r2, [r3, #0]
 8000e4a:	e011      	b.n	8000e70 <LcmReverseBMPP+0x4c>
		{
			WriteData(~puts[X] );
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	18d3      	adds	r3, r2, r3
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	43db      	mvns	r3, r3
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f7ff fea9 	bl	8000bb0 <WriteData>
			X++;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	3301      	adds	r3, #1
 8000e62:	60fb      	str	r3, [r7, #12]
		for(Col=0;Col<128;Col++)
 8000e64:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <LcmReverseBMPP+0x78>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <LcmReverseBMPP+0x78>)
 8000e6e:	701a      	strb	r2, [r3, #0]
 8000e70:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <LcmReverseBMPP+0x78>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	b25b      	sxtb	r3, r3
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	dae8      	bge.n	8000e4c <LcmReverseBMPP+0x28>
	for(Page=0;Page<8;Page++)
 8000e7a:	4b07      	ldr	r3, [pc, #28]	; (8000e98 <LcmReverseBMPP+0x74>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <LcmReverseBMPP+0x74>)
 8000e84:	701a      	strb	r2, [r3, #0]
 8000e86:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <LcmReverseBMPP+0x74>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b07      	cmp	r3, #7
 8000e8c:	d9da      	bls.n	8000e44 <LcmReverseBMPP+0x20>
		}
	}
}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	46c0      	nop			; (mov r8, r8)
 8000e92:	46bd      	mov	sp, r7
 8000e94:	b004      	add	sp, #16
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000040 	.word	0x20000040
 8000e9c:	20000041 	.word	0x20000041

08000ea0 <Display_8_8>:
//        Col += 1;  // Move to the next column
//    }
//}

void Display_8_8(const uint8_t *C, uint8_t i)
{
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	000a      	movs	r2, r1
 8000eaa:	1cfb      	adds	r3, r7, #3
 8000eac:	701a      	strb	r2, [r3, #0]
    uint8_t k;
    uint8_t num = i * 8;  // Calculate the starting index based on the character index
 8000eae:	230e      	movs	r3, #14
 8000eb0:	18fb      	adds	r3, r7, r3
 8000eb2:	1cfa      	adds	r2, r7, #3
 8000eb4:	7812      	ldrb	r2, [r2, #0]
 8000eb6:	00d2      	lsls	r2, r2, #3
 8000eb8:	701a      	strb	r2, [r3, #0]

    for (k = 0; k < 8; k++)
 8000eba:	230f      	movs	r3, #15
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	701a      	strb	r2, [r3, #0]
 8000ec2:	e018      	b.n	8000ef6 <Display_8_8+0x56>
    {
        WriteData(C[num + k]);  // Write data to the display
 8000ec4:	230e      	movs	r3, #14
 8000ec6:	18fb      	adds	r3, r7, r3
 8000ec8:	781a      	ldrb	r2, [r3, #0]
 8000eca:	240f      	movs	r4, #15
 8000ecc:	193b      	adds	r3, r7, r4
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	18d3      	adds	r3, r2, r3
 8000ed2:	001a      	movs	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	189b      	adds	r3, r3, r2
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	0018      	movs	r0, r3
 8000edc:	f7ff fe68 	bl	8000bb0 <WriteData>
        Col += 1;  // Move to the next column
 8000ee0:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <Display_8_8+0x6c>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <Display_8_8+0x6c>)
 8000eea:	701a      	strb	r2, [r3, #0]
    for (k = 0; k < 8; k++)
 8000eec:	193b      	adds	r3, r7, r4
 8000eee:	781a      	ldrb	r2, [r3, #0]
 8000ef0:	193b      	adds	r3, r7, r4
 8000ef2:	3201      	adds	r2, #1
 8000ef4:	701a      	strb	r2, [r3, #0]
 8000ef6:	230f      	movs	r3, #15
 8000ef8:	18fb      	adds	r3, r7, r3
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b07      	cmp	r3, #7
 8000efe:	d9e1      	bls.n	8000ec4 <Display_8_8+0x24>
    }
}
 8000f00:	46c0      	nop			; (mov r8, r8)
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	46bd      	mov	sp, r7
 8000f06:	b005      	add	sp, #20
 8000f08:	bd90      	pop	{r4, r7, pc}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	20000041 	.word	0x20000041

08000f10 <Display_16_16>:
//
//    HAL_Delay(80);  // Delay for visual effect
//}

void Display_16_16(const uint8_t *F, uint8_t i)
{
 8000f10:	b590      	push	{r4, r7, lr}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	000a      	movs	r2, r1
 8000f1a:	1cfb      	adds	r3, r7, #3
 8000f1c:	701a      	strb	r2, [r3, #0]
    uint8_t k;
    uint8_t num = i * 32;  // Calculate the starting index based on the character index
 8000f1e:	230e      	movs	r3, #14
 8000f20:	18fb      	adds	r3, r7, r3
 8000f22:	1cfa      	adds	r2, r7, #3
 8000f24:	7812      	ldrb	r2, [r2, #0]
 8000f26:	0152      	lsls	r2, r2, #5
 8000f28:	701a      	strb	r2, [r3, #0]

    // Display the first 16 rows
    for (k = 0; k < 16; k++)
 8000f2a:	230f      	movs	r3, #15
 8000f2c:	18fb      	adds	r3, r7, r3
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
 8000f32:	e018      	b.n	8000f66 <Display_16_16+0x56>
    {
        WriteData(F[num + k]);  // Write data to the display
 8000f34:	230e      	movs	r3, #14
 8000f36:	18fb      	adds	r3, r7, r3
 8000f38:	781a      	ldrb	r2, [r3, #0]
 8000f3a:	240f      	movs	r4, #15
 8000f3c:	193b      	adds	r3, r7, r4
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	18d3      	adds	r3, r2, r3
 8000f42:	001a      	movs	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	189b      	adds	r3, r3, r2
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f7ff fe30 	bl	8000bb0 <WriteData>
        Col += 1;  // Move to the next column
 8000f50:	4b25      	ldr	r3, [pc, #148]	; (8000fe8 <Display_16_16+0xd8>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	3301      	adds	r3, #1
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	4b23      	ldr	r3, [pc, #140]	; (8000fe8 <Display_16_16+0xd8>)
 8000f5a:	701a      	strb	r2, [r3, #0]
    for (k = 0; k < 16; k++)
 8000f5c:	193b      	adds	r3, r7, r4
 8000f5e:	781a      	ldrb	r2, [r3, #0]
 8000f60:	193b      	adds	r3, r7, r4
 8000f62:	3201      	adds	r2, #1
 8000f64:	701a      	strb	r2, [r3, #0]
 8000f66:	210f      	movs	r1, #15
 8000f68:	187b      	adds	r3, r7, r1
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b0f      	cmp	r3, #15
 8000f6e:	d9e1      	bls.n	8000f34 <Display_16_16+0x24>
    }
    Col -= 16;  // Move back to the beginning of the next page
 8000f70:	4b1d      	ldr	r3, [pc, #116]	; (8000fe8 <Display_16_16+0xd8>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	3b10      	subs	r3, #16
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <Display_16_16+0xd8>)
 8000f7a:	701a      	strb	r2, [r3, #0]
    Page += 1;  // Move to the next page
 8000f7c:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <Display_16_16+0xdc>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	3301      	adds	r3, #1
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	4b19      	ldr	r3, [pc, #100]	; (8000fec <Display_16_16+0xdc>)
 8000f86:	701a      	strb	r2, [r3, #0]

    // Display the next 16 rows
    for (k = 16; k < 32; k++)
 8000f88:	187b      	adds	r3, r7, r1
 8000f8a:	2210      	movs	r2, #16
 8000f8c:	701a      	strb	r2, [r3, #0]
 8000f8e:	e018      	b.n	8000fc2 <Display_16_16+0xb2>
    {
        WriteData(F[num + k]);  // Write data to the display
 8000f90:	230e      	movs	r3, #14
 8000f92:	18fb      	adds	r3, r7, r3
 8000f94:	781a      	ldrb	r2, [r3, #0]
 8000f96:	240f      	movs	r4, #15
 8000f98:	193b      	adds	r3, r7, r4
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	18d3      	adds	r3, r2, r3
 8000f9e:	001a      	movs	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	189b      	adds	r3, r3, r2
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f7ff fe02 	bl	8000bb0 <WriteData>
        Col += 1;  // Move to the next column
 8000fac:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <Display_16_16+0xd8>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <Display_16_16+0xd8>)
 8000fb6:	701a      	strb	r2, [r3, #0]
    for (k = 16; k < 32; k++)
 8000fb8:	193b      	adds	r3, r7, r4
 8000fba:	781a      	ldrb	r2, [r3, #0]
 8000fbc:	193b      	adds	r3, r7, r4
 8000fbe:	3201      	adds	r2, #1
 8000fc0:	701a      	strb	r2, [r3, #0]
 8000fc2:	230f      	movs	r3, #15
 8000fc4:	18fb      	adds	r3, r7, r3
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b1f      	cmp	r3, #31
 8000fca:	d9e1      	bls.n	8000f90 <Display_16_16+0x80>
    }
    Page -= 1;  // Move back to the original page
 8000fcc:	4b07      	ldr	r3, [pc, #28]	; (8000fec <Display_16_16+0xdc>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <Display_16_16+0xdc>)
 8000fd6:	701a      	strb	r2, [r3, #0]

    HAL_Delay(80);  // Delay for visual effect
 8000fd8:	2050      	movs	r0, #80	; 0x50
 8000fda:	f000 fc7d 	bl	80018d8 <HAL_Delay>
}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	b005      	add	sp, #20
 8000fe4:	bd90      	pop	{r4, r7, pc}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	20000041 	.word	0x20000041
 8000fec:	20000040 	.word	0x20000040

08000ff0 <Display_character>:

void Display_character()
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
    unsigned char k, c;

    Col = 0;  // Initialize the column position
 8000ff6:	4b43      	ldr	r3, [pc, #268]	; (8001104 <Display_character+0x114>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	701a      	strb	r2, [r3, #0]

    // Display character in mode 0
    for (c = 0; c < 8; c++)
 8000ffc:	1dbb      	adds	r3, r7, #6
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]
 8001002:	e01d      	b.n	8001040 <Display_character+0x50>
    {
        Page = c;  // Set the page
 8001004:	4b40      	ldr	r3, [pc, #256]	; (8001108 <Display_character+0x118>)
 8001006:	1dba      	adds	r2, r7, #6
 8001008:	7812      	ldrb	r2, [r2, #0]
 800100a:	701a      	strb	r2, [r3, #0]
        for (k = 0; k < 16; k++)
 800100c:	1dfb      	adds	r3, r7, #7
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]
 8001012:	e009      	b.n	8001028 <Display_character+0x38>
        {
            Display_8_8(character, 0);  // Display character in mode 0
 8001014:	4b3d      	ldr	r3, [pc, #244]	; (800110c <Display_character+0x11c>)
 8001016:	2100      	movs	r1, #0
 8001018:	0018      	movs	r0, r3
 800101a:	f7ff ff41 	bl	8000ea0 <Display_8_8>
        for (k = 0; k < 16; k++)
 800101e:	1dfb      	adds	r3, r7, #7
 8001020:	781a      	ldrb	r2, [r3, #0]
 8001022:	1dfb      	adds	r3, r7, #7
 8001024:	3201      	adds	r2, #1
 8001026:	701a      	strb	r2, [r3, #0]
 8001028:	1dfb      	adds	r3, r7, #7
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b0f      	cmp	r3, #15
 800102e:	d9f1      	bls.n	8001014 <Display_character+0x24>
        }
        Col = 0;  // Reset column position
 8001030:	4b34      	ldr	r3, [pc, #208]	; (8001104 <Display_character+0x114>)
 8001032:	2200      	movs	r2, #0
 8001034:	701a      	strb	r2, [r3, #0]
    for (c = 0; c < 8; c++)
 8001036:	1dbb      	adds	r3, r7, #6
 8001038:	781a      	ldrb	r2, [r3, #0]
 800103a:	1dbb      	adds	r3, r7, #6
 800103c:	3201      	adds	r2, #1
 800103e:	701a      	strb	r2, [r3, #0]
 8001040:	1dbb      	adds	r3, r7, #6
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b07      	cmp	r3, #7
 8001046:	d9dd      	bls.n	8001004 <Display_character+0x14>
    }
    HAL_Delay(1500);  // Delay before switching modes
 8001048:	4b31      	ldr	r3, [pc, #196]	; (8001110 <Display_character+0x120>)
 800104a:	0018      	movs	r0, r3
 800104c:	f000 fc44 	bl	80018d8 <HAL_Delay>

    // Display character in mode 1
    for (c = 0; c < 8; c++)
 8001050:	1dbb      	adds	r3, r7, #6
 8001052:	2200      	movs	r2, #0
 8001054:	701a      	strb	r2, [r3, #0]
 8001056:	e01d      	b.n	8001094 <Display_character+0xa4>
    {
        Page = c;  // Set the page
 8001058:	4b2b      	ldr	r3, [pc, #172]	; (8001108 <Display_character+0x118>)
 800105a:	1dba      	adds	r2, r7, #6
 800105c:	7812      	ldrb	r2, [r2, #0]
 800105e:	701a      	strb	r2, [r3, #0]
        for (k = 0; k < 16; k++)
 8001060:	1dfb      	adds	r3, r7, #7
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]
 8001066:	e009      	b.n	800107c <Display_character+0x8c>
        {
            Display_8_8(character, 1);  // Display character in mode 1
 8001068:	4b28      	ldr	r3, [pc, #160]	; (800110c <Display_character+0x11c>)
 800106a:	2101      	movs	r1, #1
 800106c:	0018      	movs	r0, r3
 800106e:	f7ff ff17 	bl	8000ea0 <Display_8_8>
        for (k = 0; k < 16; k++)
 8001072:	1dfb      	adds	r3, r7, #7
 8001074:	781a      	ldrb	r2, [r3, #0]
 8001076:	1dfb      	adds	r3, r7, #7
 8001078:	3201      	adds	r2, #1
 800107a:	701a      	strb	r2, [r3, #0]
 800107c:	1dfb      	adds	r3, r7, #7
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b0f      	cmp	r3, #15
 8001082:	d9f1      	bls.n	8001068 <Display_character+0x78>
        }
        Col = 0;  // Reset column position
 8001084:	4b1f      	ldr	r3, [pc, #124]	; (8001104 <Display_character+0x114>)
 8001086:	2200      	movs	r2, #0
 8001088:	701a      	strb	r2, [r3, #0]
    for (c = 0; c < 8; c++)
 800108a:	1dbb      	adds	r3, r7, #6
 800108c:	781a      	ldrb	r2, [r3, #0]
 800108e:	1dbb      	adds	r3, r7, #6
 8001090:	3201      	adds	r2, #1
 8001092:	701a      	strb	r2, [r3, #0]
 8001094:	1dbb      	adds	r3, r7, #6
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b07      	cmp	r3, #7
 800109a:	d9dd      	bls.n	8001058 <Display_character+0x68>
    }
    HAL_Delay(1500);  // Delay before switching modes
 800109c:	4b1c      	ldr	r3, [pc, #112]	; (8001110 <Display_character+0x120>)
 800109e:	0018      	movs	r0, r3
 80010a0:	f000 fc1a 	bl	80018d8 <HAL_Delay>

    // Display character in mode 2
    for (c = 0; c < 8; c++)
 80010a4:	1dbb      	adds	r3, r7, #6
 80010a6:	2200      	movs	r2, #0
 80010a8:	701a      	strb	r2, [r3, #0]
 80010aa:	e01d      	b.n	80010e8 <Display_character+0xf8>
    {
        Page = c;  // Set the page
 80010ac:	4b16      	ldr	r3, [pc, #88]	; (8001108 <Display_character+0x118>)
 80010ae:	1dba      	adds	r2, r7, #6
 80010b0:	7812      	ldrb	r2, [r2, #0]
 80010b2:	701a      	strb	r2, [r3, #0]
        for (k = 0; k < 16; k++)
 80010b4:	1dfb      	adds	r3, r7, #7
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]
 80010ba:	e009      	b.n	80010d0 <Display_character+0xe0>
        {
            Display_8_8(character, 2);  // Display character in mode 2
 80010bc:	4b13      	ldr	r3, [pc, #76]	; (800110c <Display_character+0x11c>)
 80010be:	2102      	movs	r1, #2
 80010c0:	0018      	movs	r0, r3
 80010c2:	f7ff feed 	bl	8000ea0 <Display_8_8>
        for (k = 0; k < 16; k++)
 80010c6:	1dfb      	adds	r3, r7, #7
 80010c8:	781a      	ldrb	r2, [r3, #0]
 80010ca:	1dfb      	adds	r3, r7, #7
 80010cc:	3201      	adds	r2, #1
 80010ce:	701a      	strb	r2, [r3, #0]
 80010d0:	1dfb      	adds	r3, r7, #7
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b0f      	cmp	r3, #15
 80010d6:	d9f1      	bls.n	80010bc <Display_character+0xcc>
        }
        Col = 0;  // Reset column position
 80010d8:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <Display_character+0x114>)
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
    for (c = 0; c < 8; c++)
 80010de:	1dbb      	adds	r3, r7, #6
 80010e0:	781a      	ldrb	r2, [r3, #0]
 80010e2:	1dbb      	adds	r3, r7, #6
 80010e4:	3201      	adds	r2, #1
 80010e6:	701a      	strb	r2, [r3, #0]
 80010e8:	1dbb      	adds	r3, r7, #6
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b07      	cmp	r3, #7
 80010ee:	d9dd      	bls.n	80010ac <Display_character+0xbc>
    }
    HAL_Delay(1000);  // Delay before ending the function
 80010f0:	23fa      	movs	r3, #250	; 0xfa
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	0018      	movs	r0, r3
 80010f6:	f000 fbef 	bl	80018d8 <HAL_Delay>
}
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	46bd      	mov	sp, r7
 80010fe:	b002      	add	sp, #8
 8001100:	bd80      	pop	{r7, pc}
 8001102:	46c0      	nop			; (mov r8, r8)
 8001104:	20000041 	.word	0x20000041
 8001108:	20000040 	.word	0x20000040
 800110c:	20000044 	.word	0x20000044
 8001110:	000005dc 	.word	0x000005dc

08001114 <Display_Chinese>:
//        Display_16_16(font, a);  // Display 16x16 font data
//    }
//}

void Display_Chinese()
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
    uint8_t a;

    // Display the first set of 16x16 Chinese characters
    Page = 0;
 800111a:	4b36      	ldr	r3, [pc, #216]	; (80011f4 <Display_Chinese+0xe0>)
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]
    Col = 0;
 8001120:	4b35      	ldr	r3, [pc, #212]	; (80011f8 <Display_Chinese+0xe4>)
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]
    for (a = 0; a < 8; a++)
 8001126:	1dfb      	adds	r3, r7, #7
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
 800112c:	e00b      	b.n	8001146 <Display_Chinese+0x32>
    {
        Display_16_16(font, a);  // Display 16x16 font data
 800112e:	1dfb      	adds	r3, r7, #7
 8001130:	781a      	ldrb	r2, [r3, #0]
 8001132:	4b32      	ldr	r3, [pc, #200]	; (80011fc <Display_Chinese+0xe8>)
 8001134:	0011      	movs	r1, r2
 8001136:	0018      	movs	r0, r3
 8001138:	f7ff feea 	bl	8000f10 <Display_16_16>
    for (a = 0; a < 8; a++)
 800113c:	1dfb      	adds	r3, r7, #7
 800113e:	781a      	ldrb	r2, [r3, #0]
 8001140:	1dfb      	adds	r3, r7, #7
 8001142:	3201      	adds	r2, #1
 8001144:	701a      	strb	r2, [r3, #0]
 8001146:	1dfb      	adds	r3, r7, #7
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b07      	cmp	r3, #7
 800114c:	d9ef      	bls.n	800112e <Display_Chinese+0x1a>
    }

    // Display the next set of 16x16 Chinese characters
    Page = 2;
 800114e:	4b29      	ldr	r3, [pc, #164]	; (80011f4 <Display_Chinese+0xe0>)
 8001150:	2202      	movs	r2, #2
 8001152:	701a      	strb	r2, [r3, #0]
    Col = 0;
 8001154:	4b28      	ldr	r3, [pc, #160]	; (80011f8 <Display_Chinese+0xe4>)
 8001156:	2200      	movs	r2, #0
 8001158:	701a      	strb	r2, [r3, #0]
    for (a = 8; a < 16; a++)
 800115a:	1dfb      	adds	r3, r7, #7
 800115c:	2208      	movs	r2, #8
 800115e:	701a      	strb	r2, [r3, #0]
 8001160:	e00b      	b.n	800117a <Display_Chinese+0x66>
    {
        Display_16_16(font, a);  // Display 16x16 font data
 8001162:	1dfb      	adds	r3, r7, #7
 8001164:	781a      	ldrb	r2, [r3, #0]
 8001166:	4b25      	ldr	r3, [pc, #148]	; (80011fc <Display_Chinese+0xe8>)
 8001168:	0011      	movs	r1, r2
 800116a:	0018      	movs	r0, r3
 800116c:	f7ff fed0 	bl	8000f10 <Display_16_16>
    for (a = 8; a < 16; a++)
 8001170:	1dfb      	adds	r3, r7, #7
 8001172:	781a      	ldrb	r2, [r3, #0]
 8001174:	1dfb      	adds	r3, r7, #7
 8001176:	3201      	adds	r2, #1
 8001178:	701a      	strb	r2, [r3, #0]
 800117a:	1dfb      	adds	r3, r7, #7
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b0f      	cmp	r3, #15
 8001180:	d9ef      	bls.n	8001162 <Display_Chinese+0x4e>
    }

    // Display the next set of 16x16 Chinese characters
    Page = 4;
 8001182:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <Display_Chinese+0xe0>)
 8001184:	2204      	movs	r2, #4
 8001186:	701a      	strb	r2, [r3, #0]
    Col = 0;
 8001188:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <Display_Chinese+0xe4>)
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
    for (a = 16; a < 24; a++)
 800118e:	1dfb      	adds	r3, r7, #7
 8001190:	2210      	movs	r2, #16
 8001192:	701a      	strb	r2, [r3, #0]
 8001194:	e00b      	b.n	80011ae <Display_Chinese+0x9a>
    {
        Display_16_16(font, a);  // Display 16x16 font data
 8001196:	1dfb      	adds	r3, r7, #7
 8001198:	781a      	ldrb	r2, [r3, #0]
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <Display_Chinese+0xe8>)
 800119c:	0011      	movs	r1, r2
 800119e:	0018      	movs	r0, r3
 80011a0:	f7ff feb6 	bl	8000f10 <Display_16_16>
    for (a = 16; a < 24; a++)
 80011a4:	1dfb      	adds	r3, r7, #7
 80011a6:	781a      	ldrb	r2, [r3, #0]
 80011a8:	1dfb      	adds	r3, r7, #7
 80011aa:	3201      	adds	r2, #1
 80011ac:	701a      	strb	r2, [r3, #0]
 80011ae:	1dfb      	adds	r3, r7, #7
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b17      	cmp	r3, #23
 80011b4:	d9ef      	bls.n	8001196 <Display_Chinese+0x82>
    }

    // Display the last set of 16x16 Chinese characters
    Page = 6;
 80011b6:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <Display_Chinese+0xe0>)
 80011b8:	2206      	movs	r2, #6
 80011ba:	701a      	strb	r2, [r3, #0]
    Col = 0;
 80011bc:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <Display_Chinese+0xe4>)
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]
    for (a = 24; a < 32; a++)
 80011c2:	1dfb      	adds	r3, r7, #7
 80011c4:	2218      	movs	r2, #24
 80011c6:	701a      	strb	r2, [r3, #0]
 80011c8:	e00b      	b.n	80011e2 <Display_Chinese+0xce>
    {
        Display_16_16(font, a);  // Display 16x16 font data
 80011ca:	1dfb      	adds	r3, r7, #7
 80011cc:	781a      	ldrb	r2, [r3, #0]
 80011ce:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <Display_Chinese+0xe8>)
 80011d0:	0011      	movs	r1, r2
 80011d2:	0018      	movs	r0, r3
 80011d4:	f7ff fe9c 	bl	8000f10 <Display_16_16>
    for (a = 24; a < 32; a++)
 80011d8:	1dfb      	adds	r3, r7, #7
 80011da:	781a      	ldrb	r2, [r3, #0]
 80011dc:	1dfb      	adds	r3, r7, #7
 80011de:	3201      	adds	r2, #1
 80011e0:	701a      	strb	r2, [r3, #0]
 80011e2:	1dfb      	adds	r3, r7, #7
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b1f      	cmp	r3, #31
 80011e8:	d9ef      	bls.n	80011ca <Display_Chinese+0xb6>
    }
}
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	46c0      	nop			; (mov r8, r8)
 80011ee:	46bd      	mov	sp, r7
 80011f0:	b002      	add	sp, #8
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000040 	.word	0x20000040
 80011f8:	20000041 	.word	0x20000041
 80011fc:	20000000 	.word	0x20000000

08001200 <writePortSet>:

void writePortSet(void)

{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	//  uint8_t RDFP_temp = 0;
	// Set each pin high individually

	HAL_GPIO_WritePin(GPIOA, DB0_GPIO_O_P_Pin, GPIO_PIN_SET);
 8001204:	23a0      	movs	r3, #160	; 0xa0
 8001206:	05db      	lsls	r3, r3, #23
 8001208:	2201      	movs	r2, #1
 800120a:	2110      	movs	r1, #16
 800120c:	0018      	movs	r0, r3
 800120e:	f000 fed0 	bl	8001fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, DB1_GPIO_O_P_Pin, GPIO_PIN_SET);
 8001212:	23a0      	movs	r3, #160	; 0xa0
 8001214:	05db      	lsls	r3, r3, #23
 8001216:	2201      	movs	r2, #1
 8001218:	2120      	movs	r1, #32
 800121a:	0018      	movs	r0, r3
 800121c:	f000 fec9 	bl	8001fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, DB2_GPIO_O_P_Pin, GPIO_PIN_SET);
 8001220:	23a0      	movs	r3, #160	; 0xa0
 8001222:	05db      	lsls	r3, r3, #23
 8001224:	2201      	movs	r2, #1
 8001226:	2140      	movs	r1, #64	; 0x40
 8001228:	0018      	movs	r0, r3
 800122a:	f000 fec2 	bl	8001fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, DB3_GPIO_O_P_Pin, GPIO_PIN_SET);
 800122e:	23a0      	movs	r3, #160	; 0xa0
 8001230:	05db      	lsls	r3, r3, #23
 8001232:	2201      	movs	r2, #1
 8001234:	2180      	movs	r1, #128	; 0x80
 8001236:	0018      	movs	r0, r3
 8001238:	f000 febb 	bl	8001fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, DB4_GPIO_O_P_Pin, GPIO_PIN_SET);
 800123c:	2380      	movs	r3, #128	; 0x80
 800123e:	0059      	lsls	r1, r3, #1
 8001240:	23a0      	movs	r3, #160	; 0xa0
 8001242:	05db      	lsls	r3, r3, #23
 8001244:	2201      	movs	r2, #1
 8001246:	0018      	movs	r0, r3
 8001248:	f000 feb3 	bl	8001fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, DB5_GPIO_O_P_Pin, GPIO_PIN_SET);
 800124c:	2380      	movs	r3, #128	; 0x80
 800124e:	0099      	lsls	r1, r3, #2
 8001250:	23a0      	movs	r3, #160	; 0xa0
 8001252:	05db      	lsls	r3, r3, #23
 8001254:	2201      	movs	r2, #1
 8001256:	0018      	movs	r0, r3
 8001258:	f000 feab 	bl	8001fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, DB6_GPIO_O_P_Pin, GPIO_PIN_SET);
 800125c:	2380      	movs	r3, #128	; 0x80
 800125e:	00d9      	lsls	r1, r3, #3
 8001260:	23a0      	movs	r3, #160	; 0xa0
 8001262:	05db      	lsls	r3, r3, #23
 8001264:	2201      	movs	r2, #1
 8001266:	0018      	movs	r0, r3
 8001268:	f000 fea3 	bl	8001fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, DB7_GPIO_O_P_Pin, GPIO_PIN_SET);
 800126c:	2380      	movs	r3, #128	; 0x80
 800126e:	0119      	lsls	r1, r3, #4
 8001270:	23a0      	movs	r3, #160	; 0xa0
 8001272:	05db      	lsls	r3, r3, #23
 8001274:	2201      	movs	r2, #1
 8001276:	0018      	movs	r0, r3
 8001278:	f000 fe9b 	bl	8001fb2 <HAL_GPIO_WritePin>
}
 800127c:	46c0      	nop			; (mov r8, r8)
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <ReadDataFromPins>:

uint8_t ReadDataFromPins(void)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
	uint8_t RDFP_temp = 0;
 8001288:	1dfb      	adds	r3, r7, #7
 800128a:	2200      	movs	r2, #0
 800128c:	701a      	strb	r2, [r3, #0]

	// Read each pin and combine the result
	RDFP_temp |= (HAL_GPIO_ReadPin(GPIOA, DB0_GPIO_O_P_Pin) == GPIO_PIN_SET) ? (1 << 0) : 0;
 800128e:	23a0      	movs	r3, #160	; 0xa0
 8001290:	05db      	lsls	r3, r3, #23
 8001292:	2110      	movs	r1, #16
 8001294:	0018      	movs	r0, r3
 8001296:	f000 fe6f 	bl	8001f78 <HAL_GPIO_ReadPin>
 800129a:	0003      	movs	r3, r0
 800129c:	3b01      	subs	r3, #1
 800129e:	425a      	negs	r2, r3
 80012a0:	4153      	adcs	r3, r2
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	b25a      	sxtb	r2, r3
 80012a6:	1dfb      	adds	r3, r7, #7
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	b25b      	sxtb	r3, r3
 80012ac:	4313      	orrs	r3, r2
 80012ae:	b25a      	sxtb	r2, r3
 80012b0:	1dfb      	adds	r3, r7, #7
 80012b2:	701a      	strb	r2, [r3, #0]
	RDFP_temp |= (HAL_GPIO_ReadPin(GPIOA, DB1_GPIO_O_P_Pin) == GPIO_PIN_SET) ? (1 << 1) : 0;
 80012b4:	23a0      	movs	r3, #160	; 0xa0
 80012b6:	05db      	lsls	r3, r3, #23
 80012b8:	2120      	movs	r1, #32
 80012ba:	0018      	movs	r0, r3
 80012bc:	f000 fe5c 	bl	8001f78 <HAL_GPIO_ReadPin>
 80012c0:	0003      	movs	r3, r0
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d101      	bne.n	80012ca <ReadDataFromPins+0x48>
 80012c6:	2302      	movs	r3, #2
 80012c8:	e000      	b.n	80012cc <ReadDataFromPins+0x4a>
 80012ca:	2300      	movs	r3, #0
 80012cc:	b25a      	sxtb	r2, r3
 80012ce:	1dfb      	adds	r3, r7, #7
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	b25b      	sxtb	r3, r3
 80012d4:	4313      	orrs	r3, r2
 80012d6:	b25a      	sxtb	r2, r3
 80012d8:	1dfb      	adds	r3, r7, #7
 80012da:	701a      	strb	r2, [r3, #0]
	RDFP_temp |= (HAL_GPIO_ReadPin(GPIOA, DB2_GPIO_O_P_Pin) == GPIO_PIN_SET) ? (1 << 2) : 0;
 80012dc:	23a0      	movs	r3, #160	; 0xa0
 80012de:	05db      	lsls	r3, r3, #23
 80012e0:	2140      	movs	r1, #64	; 0x40
 80012e2:	0018      	movs	r0, r3
 80012e4:	f000 fe48 	bl	8001f78 <HAL_GPIO_ReadPin>
 80012e8:	0003      	movs	r3, r0
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d101      	bne.n	80012f2 <ReadDataFromPins+0x70>
 80012ee:	2304      	movs	r3, #4
 80012f0:	e000      	b.n	80012f4 <ReadDataFromPins+0x72>
 80012f2:	2300      	movs	r3, #0
 80012f4:	b25a      	sxtb	r2, r3
 80012f6:	1dfb      	adds	r3, r7, #7
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	b25b      	sxtb	r3, r3
 80012fc:	4313      	orrs	r3, r2
 80012fe:	b25a      	sxtb	r2, r3
 8001300:	1dfb      	adds	r3, r7, #7
 8001302:	701a      	strb	r2, [r3, #0]
	RDFP_temp |= (HAL_GPIO_ReadPin(GPIOA, DB3_GPIO_O_P_Pin) == GPIO_PIN_SET) ? (1 << 3) : 0;
 8001304:	23a0      	movs	r3, #160	; 0xa0
 8001306:	05db      	lsls	r3, r3, #23
 8001308:	2180      	movs	r1, #128	; 0x80
 800130a:	0018      	movs	r0, r3
 800130c:	f000 fe34 	bl	8001f78 <HAL_GPIO_ReadPin>
 8001310:	0003      	movs	r3, r0
 8001312:	2b01      	cmp	r3, #1
 8001314:	d101      	bne.n	800131a <ReadDataFromPins+0x98>
 8001316:	2308      	movs	r3, #8
 8001318:	e000      	b.n	800131c <ReadDataFromPins+0x9a>
 800131a:	2300      	movs	r3, #0
 800131c:	b25a      	sxtb	r2, r3
 800131e:	1dfb      	adds	r3, r7, #7
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	b25b      	sxtb	r3, r3
 8001324:	4313      	orrs	r3, r2
 8001326:	b25a      	sxtb	r2, r3
 8001328:	1dfb      	adds	r3, r7, #7
 800132a:	701a      	strb	r2, [r3, #0]
	RDFP_temp |= (HAL_GPIO_ReadPin(GPIOA, DB4_GPIO_O_P_Pin) == GPIO_PIN_SET) ? (1 << 4) : 0;
 800132c:	2380      	movs	r3, #128	; 0x80
 800132e:	005a      	lsls	r2, r3, #1
 8001330:	23a0      	movs	r3, #160	; 0xa0
 8001332:	05db      	lsls	r3, r3, #23
 8001334:	0011      	movs	r1, r2
 8001336:	0018      	movs	r0, r3
 8001338:	f000 fe1e 	bl	8001f78 <HAL_GPIO_ReadPin>
 800133c:	0003      	movs	r3, r0
 800133e:	2b01      	cmp	r3, #1
 8001340:	d101      	bne.n	8001346 <ReadDataFromPins+0xc4>
 8001342:	2310      	movs	r3, #16
 8001344:	e000      	b.n	8001348 <ReadDataFromPins+0xc6>
 8001346:	2300      	movs	r3, #0
 8001348:	b25a      	sxtb	r2, r3
 800134a:	1dfb      	adds	r3, r7, #7
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	b25b      	sxtb	r3, r3
 8001350:	4313      	orrs	r3, r2
 8001352:	b25a      	sxtb	r2, r3
 8001354:	1dfb      	adds	r3, r7, #7
 8001356:	701a      	strb	r2, [r3, #0]
	RDFP_temp |= (HAL_GPIO_ReadPin(GPIOA, DB5_GPIO_O_P_Pin) == GPIO_PIN_SET) ? (1 << 5) : 0;
 8001358:	2380      	movs	r3, #128	; 0x80
 800135a:	009a      	lsls	r2, r3, #2
 800135c:	23a0      	movs	r3, #160	; 0xa0
 800135e:	05db      	lsls	r3, r3, #23
 8001360:	0011      	movs	r1, r2
 8001362:	0018      	movs	r0, r3
 8001364:	f000 fe08 	bl	8001f78 <HAL_GPIO_ReadPin>
 8001368:	0003      	movs	r3, r0
 800136a:	2b01      	cmp	r3, #1
 800136c:	d101      	bne.n	8001372 <ReadDataFromPins+0xf0>
 800136e:	2320      	movs	r3, #32
 8001370:	e000      	b.n	8001374 <ReadDataFromPins+0xf2>
 8001372:	2300      	movs	r3, #0
 8001374:	b25a      	sxtb	r2, r3
 8001376:	1dfb      	adds	r3, r7, #7
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	b25b      	sxtb	r3, r3
 800137c:	4313      	orrs	r3, r2
 800137e:	b25a      	sxtb	r2, r3
 8001380:	1dfb      	adds	r3, r7, #7
 8001382:	701a      	strb	r2, [r3, #0]
	RDFP_temp |= (HAL_GPIO_ReadPin(GPIOA, DB6_GPIO_O_P_Pin) == GPIO_PIN_SET) ? (1 << 6) : 0;
 8001384:	2380      	movs	r3, #128	; 0x80
 8001386:	00da      	lsls	r2, r3, #3
 8001388:	23a0      	movs	r3, #160	; 0xa0
 800138a:	05db      	lsls	r3, r3, #23
 800138c:	0011      	movs	r1, r2
 800138e:	0018      	movs	r0, r3
 8001390:	f000 fdf2 	bl	8001f78 <HAL_GPIO_ReadPin>
 8001394:	0003      	movs	r3, r0
 8001396:	2b01      	cmp	r3, #1
 8001398:	d101      	bne.n	800139e <ReadDataFromPins+0x11c>
 800139a:	2340      	movs	r3, #64	; 0x40
 800139c:	e000      	b.n	80013a0 <ReadDataFromPins+0x11e>
 800139e:	2300      	movs	r3, #0
 80013a0:	b25a      	sxtb	r2, r3
 80013a2:	1dfb      	adds	r3, r7, #7
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	b25b      	sxtb	r3, r3
 80013a8:	4313      	orrs	r3, r2
 80013aa:	b25a      	sxtb	r2, r3
 80013ac:	1dfb      	adds	r3, r7, #7
 80013ae:	701a      	strb	r2, [r3, #0]
	RDFP_temp |= (HAL_GPIO_ReadPin(GPIOA, DB7_GPIO_O_P_Pin) == GPIO_PIN_SET) ? (1 << 7) : 0;
 80013b0:	2380      	movs	r3, #128	; 0x80
 80013b2:	011a      	lsls	r2, r3, #4
 80013b4:	23a0      	movs	r3, #160	; 0xa0
 80013b6:	05db      	lsls	r3, r3, #23
 80013b8:	0011      	movs	r1, r2
 80013ba:	0018      	movs	r0, r3
 80013bc:	f000 fddc 	bl	8001f78 <HAL_GPIO_ReadPin>
 80013c0:	0003      	movs	r3, r0
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d101      	bne.n	80013ca <ReadDataFromPins+0x148>
 80013c6:	2380      	movs	r3, #128	; 0x80
 80013c8:	e000      	b.n	80013cc <ReadDataFromPins+0x14a>
 80013ca:	2300      	movs	r3, #0
 80013cc:	b25a      	sxtb	r2, r3
 80013ce:	1dfb      	adds	r3, r7, #7
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	b25b      	sxtb	r3, r3
 80013d4:	4313      	orrs	r3, r2
 80013d6:	b25a      	sxtb	r2, r3
 80013d8:	1dfb      	adds	r3, r7, #7
 80013da:	701a      	strb	r2, [r3, #0]

	return RDFP_temp;
 80013dc:	1dfb      	adds	r3, r7, #7
 80013de:	781b      	ldrb	r3, [r3, #0]
}
 80013e0:	0018      	movs	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	b002      	add	sp, #8
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <Printdata>:

void Printdata(unsigned char data)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	0002      	movs	r2, r0
 80013f0:	1dfb      	adds	r3, r7, #7
 80013f2:	701a      	strb	r2, [r3, #0]

	if((data&0x01)==0x01)
 80013f4:	1dfb      	adds	r3, r7, #7
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2201      	movs	r2, #1
 80013fa:	4013      	ands	r3, r2
 80013fc:	d007      	beq.n	800140e <Printdata+0x26>
	{
		HAL_GPIO_WritePin(GPIOA, DB0_GPIO_O_P_Pin, GPIO_PIN_SET);
 80013fe:	23a0      	movs	r3, #160	; 0xa0
 8001400:	05db      	lsls	r3, r3, #23
 8001402:	2201      	movs	r2, #1
 8001404:	2110      	movs	r1, #16
 8001406:	0018      	movs	r0, r3
 8001408:	f000 fdd3 	bl	8001fb2 <HAL_GPIO_WritePin>
 800140c:	e006      	b.n	800141c <Printdata+0x34>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, DB0_GPIO_O_P_Pin, GPIO_PIN_RESET);
 800140e:	23a0      	movs	r3, #160	; 0xa0
 8001410:	05db      	lsls	r3, r3, #23
 8001412:	2200      	movs	r2, #0
 8001414:	2110      	movs	r1, #16
 8001416:	0018      	movs	r0, r3
 8001418:	f000 fdcb 	bl	8001fb2 <HAL_GPIO_WritePin>
	}

	if((data&0x02)==0x02)
 800141c:	1dfb      	adds	r3, r7, #7
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2202      	movs	r2, #2
 8001422:	4013      	ands	r3, r2
 8001424:	d007      	beq.n	8001436 <Printdata+0x4e>
	{
		HAL_GPIO_WritePin(GPIOA, DB1_GPIO_O_P_Pin, GPIO_PIN_SET);
 8001426:	23a0      	movs	r3, #160	; 0xa0
 8001428:	05db      	lsls	r3, r3, #23
 800142a:	2201      	movs	r2, #1
 800142c:	2120      	movs	r1, #32
 800142e:	0018      	movs	r0, r3
 8001430:	f000 fdbf 	bl	8001fb2 <HAL_GPIO_WritePin>
 8001434:	e006      	b.n	8001444 <Printdata+0x5c>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, DB1_GPIO_O_P_Pin, GPIO_PIN_RESET);
 8001436:	23a0      	movs	r3, #160	; 0xa0
 8001438:	05db      	lsls	r3, r3, #23
 800143a:	2200      	movs	r2, #0
 800143c:	2120      	movs	r1, #32
 800143e:	0018      	movs	r0, r3
 8001440:	f000 fdb7 	bl	8001fb2 <HAL_GPIO_WritePin>
	}

	if((data&0x04)==0x04)
 8001444:	1dfb      	adds	r3, r7, #7
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2204      	movs	r2, #4
 800144a:	4013      	ands	r3, r2
 800144c:	d007      	beq.n	800145e <Printdata+0x76>
	{
		HAL_GPIO_WritePin(GPIOA, DB2_GPIO_O_P_Pin, GPIO_PIN_SET);
 800144e:	23a0      	movs	r3, #160	; 0xa0
 8001450:	05db      	lsls	r3, r3, #23
 8001452:	2201      	movs	r2, #1
 8001454:	2140      	movs	r1, #64	; 0x40
 8001456:	0018      	movs	r0, r3
 8001458:	f000 fdab 	bl	8001fb2 <HAL_GPIO_WritePin>
 800145c:	e006      	b.n	800146c <Printdata+0x84>
	}
	else{HAL_GPIO_WritePin(GPIOA, DB2_GPIO_O_P_Pin, GPIO_PIN_RESET);}
 800145e:	23a0      	movs	r3, #160	; 0xa0
 8001460:	05db      	lsls	r3, r3, #23
 8001462:	2200      	movs	r2, #0
 8001464:	2140      	movs	r1, #64	; 0x40
 8001466:	0018      	movs	r0, r3
 8001468:	f000 fda3 	bl	8001fb2 <HAL_GPIO_WritePin>

	if((data&0x08)==0x08)
 800146c:	1dfb      	adds	r3, r7, #7
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2208      	movs	r2, #8
 8001472:	4013      	ands	r3, r2
 8001474:	d007      	beq.n	8001486 <Printdata+0x9e>
	{
		HAL_GPIO_WritePin(GPIOA, DB3_GPIO_O_P_Pin, GPIO_PIN_SET);
 8001476:	23a0      	movs	r3, #160	; 0xa0
 8001478:	05db      	lsls	r3, r3, #23
 800147a:	2201      	movs	r2, #1
 800147c:	2180      	movs	r1, #128	; 0x80
 800147e:	0018      	movs	r0, r3
 8001480:	f000 fd97 	bl	8001fb2 <HAL_GPIO_WritePin>
 8001484:	e006      	b.n	8001494 <Printdata+0xac>
	}
	else{HAL_GPIO_WritePin(GPIOA, DB3_GPIO_O_P_Pin, GPIO_PIN_RESET);}
 8001486:	23a0      	movs	r3, #160	; 0xa0
 8001488:	05db      	lsls	r3, r3, #23
 800148a:	2200      	movs	r2, #0
 800148c:	2180      	movs	r1, #128	; 0x80
 800148e:	0018      	movs	r0, r3
 8001490:	f000 fd8f 	bl	8001fb2 <HAL_GPIO_WritePin>

	if((data&0x10)==0x10)
 8001494:	1dfb      	adds	r3, r7, #7
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2210      	movs	r2, #16
 800149a:	4013      	ands	r3, r2
 800149c:	d008      	beq.n	80014b0 <Printdata+0xc8>
	{
		HAL_GPIO_WritePin(GPIOA, DB4_GPIO_O_P_Pin, GPIO_PIN_SET);
 800149e:	2380      	movs	r3, #128	; 0x80
 80014a0:	0059      	lsls	r1, r3, #1
 80014a2:	23a0      	movs	r3, #160	; 0xa0
 80014a4:	05db      	lsls	r3, r3, #23
 80014a6:	2201      	movs	r2, #1
 80014a8:	0018      	movs	r0, r3
 80014aa:	f000 fd82 	bl	8001fb2 <HAL_GPIO_WritePin>
 80014ae:	e007      	b.n	80014c0 <Printdata+0xd8>
	}
	else{HAL_GPIO_WritePin(GPIOA, DB4_GPIO_O_P_Pin, GPIO_PIN_RESET);}
 80014b0:	2380      	movs	r3, #128	; 0x80
 80014b2:	0059      	lsls	r1, r3, #1
 80014b4:	23a0      	movs	r3, #160	; 0xa0
 80014b6:	05db      	lsls	r3, r3, #23
 80014b8:	2200      	movs	r2, #0
 80014ba:	0018      	movs	r0, r3
 80014bc:	f000 fd79 	bl	8001fb2 <HAL_GPIO_WritePin>

	if((data&0x20)==0x20)
 80014c0:	1dfb      	adds	r3, r7, #7
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2220      	movs	r2, #32
 80014c6:	4013      	ands	r3, r2
 80014c8:	d008      	beq.n	80014dc <Printdata+0xf4>
	{
		HAL_GPIO_WritePin(GPIOA, DB5_GPIO_O_P_Pin, GPIO_PIN_SET);
 80014ca:	2380      	movs	r3, #128	; 0x80
 80014cc:	0099      	lsls	r1, r3, #2
 80014ce:	23a0      	movs	r3, #160	; 0xa0
 80014d0:	05db      	lsls	r3, r3, #23
 80014d2:	2201      	movs	r2, #1
 80014d4:	0018      	movs	r0, r3
 80014d6:	f000 fd6c 	bl	8001fb2 <HAL_GPIO_WritePin>
 80014da:	e007      	b.n	80014ec <Printdata+0x104>
	}
	else{HAL_GPIO_WritePin(GPIOA, DB5_GPIO_O_P_Pin, GPIO_PIN_RESET);}
 80014dc:	2380      	movs	r3, #128	; 0x80
 80014de:	0099      	lsls	r1, r3, #2
 80014e0:	23a0      	movs	r3, #160	; 0xa0
 80014e2:	05db      	lsls	r3, r3, #23
 80014e4:	2200      	movs	r2, #0
 80014e6:	0018      	movs	r0, r3
 80014e8:	f000 fd63 	bl	8001fb2 <HAL_GPIO_WritePin>

	if((data&0x40)==0x40)
 80014ec:	1dfb      	adds	r3, r7, #7
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2240      	movs	r2, #64	; 0x40
 80014f2:	4013      	ands	r3, r2
 80014f4:	d008      	beq.n	8001508 <Printdata+0x120>
	{
		HAL_GPIO_WritePin(GPIOA, DB6_GPIO_O_P_Pin, GPIO_PIN_SET);
 80014f6:	2380      	movs	r3, #128	; 0x80
 80014f8:	00d9      	lsls	r1, r3, #3
 80014fa:	23a0      	movs	r3, #160	; 0xa0
 80014fc:	05db      	lsls	r3, r3, #23
 80014fe:	2201      	movs	r2, #1
 8001500:	0018      	movs	r0, r3
 8001502:	f000 fd56 	bl	8001fb2 <HAL_GPIO_WritePin>
 8001506:	e007      	b.n	8001518 <Printdata+0x130>
	}
	else{HAL_GPIO_WritePin(GPIOA, DB6_GPIO_O_P_Pin, GPIO_PIN_RESET);}
 8001508:	2380      	movs	r3, #128	; 0x80
 800150a:	00d9      	lsls	r1, r3, #3
 800150c:	23a0      	movs	r3, #160	; 0xa0
 800150e:	05db      	lsls	r3, r3, #23
 8001510:	2200      	movs	r2, #0
 8001512:	0018      	movs	r0, r3
 8001514:	f000 fd4d 	bl	8001fb2 <HAL_GPIO_WritePin>

	if((data&0x80)==0x80)
 8001518:	1dfb      	adds	r3, r7, #7
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	b25b      	sxtb	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	da08      	bge.n	8001534 <Printdata+0x14c>
	{
		HAL_GPIO_WritePin(GPIOA, DB7_GPIO_O_P_Pin, GPIO_PIN_SET);
 8001522:	2380      	movs	r3, #128	; 0x80
 8001524:	0119      	lsls	r1, r3, #4
 8001526:	23a0      	movs	r3, #160	; 0xa0
 8001528:	05db      	lsls	r3, r3, #23
 800152a:	2201      	movs	r2, #1
 800152c:	0018      	movs	r0, r3
 800152e:	f000 fd40 	bl	8001fb2 <HAL_GPIO_WritePin>
	}
	else{HAL_GPIO_WritePin(GPIOA, DB7_GPIO_O_P_Pin, GPIO_PIN_RESET);}


}
 8001532:	e007      	b.n	8001544 <Printdata+0x15c>
	else{HAL_GPIO_WritePin(GPIOA, DB7_GPIO_O_P_Pin, GPIO_PIN_RESET);}
 8001534:	2380      	movs	r3, #128	; 0x80
 8001536:	0119      	lsls	r1, r3, #4
 8001538:	23a0      	movs	r3, #160	; 0xa0
 800153a:	05db      	lsls	r3, r3, #23
 800153c:	2200      	movs	r2, #0
 800153e:	0018      	movs	r0, r3
 8001540:	f000 fd37 	bl	8001fb2 <HAL_GPIO_WritePin>
}
 8001544:	46c0      	nop			; (mov r8, r8)
 8001546:	46bd      	mov	sp, r7
 8001548:	b002      	add	sp, #8
 800154a:	bd80      	pop	{r7, pc}

0800154c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001550:	b672      	cpsid	i
}
 8001552:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001554:	e7fe      	b.n	8001554 <Error_Handler+0x8>
	...

08001558 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155e:	4b0f      	ldr	r3, [pc, #60]	; (800159c <HAL_MspInit+0x44>)
 8001560:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001562:	4b0e      	ldr	r3, [pc, #56]	; (800159c <HAL_MspInit+0x44>)
 8001564:	2101      	movs	r1, #1
 8001566:	430a      	orrs	r2, r1
 8001568:	641a      	str	r2, [r3, #64]	; 0x40
 800156a:	4b0c      	ldr	r3, [pc, #48]	; (800159c <HAL_MspInit+0x44>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	2201      	movs	r2, #1
 8001570:	4013      	ands	r3, r2
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001576:	4b09      	ldr	r3, [pc, #36]	; (800159c <HAL_MspInit+0x44>)
 8001578:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800157a:	4b08      	ldr	r3, [pc, #32]	; (800159c <HAL_MspInit+0x44>)
 800157c:	2180      	movs	r1, #128	; 0x80
 800157e:	0549      	lsls	r1, r1, #21
 8001580:	430a      	orrs	r2, r1
 8001582:	63da      	str	r2, [r3, #60]	; 0x3c
 8001584:	4b05      	ldr	r3, [pc, #20]	; (800159c <HAL_MspInit+0x44>)
 8001586:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001588:	2380      	movs	r3, #128	; 0x80
 800158a:	055b      	lsls	r3, r3, #21
 800158c:	4013      	ands	r3, r2
 800158e:	603b      	str	r3, [r7, #0]
 8001590:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001592:	46c0      	nop			; (mov r8, r8)
 8001594:	46bd      	mov	sp, r7
 8001596:	b002      	add	sp, #8
 8001598:	bd80      	pop	{r7, pc}
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	40021000 	.word	0x40021000

080015a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015a0:	b590      	push	{r4, r7, lr}
 80015a2:	b093      	sub	sp, #76	; 0x4c
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a8:	2334      	movs	r3, #52	; 0x34
 80015aa:	18fb      	adds	r3, r7, r3
 80015ac:	0018      	movs	r0, r3
 80015ae:	2314      	movs	r3, #20
 80015b0:	001a      	movs	r2, r3
 80015b2:	2100      	movs	r1, #0
 80015b4:	f002 fa66 	bl	8003a84 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015b8:	2418      	movs	r4, #24
 80015ba:	193b      	adds	r3, r7, r4
 80015bc:	0018      	movs	r0, r3
 80015be:	231c      	movs	r3, #28
 80015c0:	001a      	movs	r2, r3
 80015c2:	2100      	movs	r1, #0
 80015c4:	f002 fa5e 	bl	8003a84 <memset>
  if(huart->Instance==USART1)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a4c      	ldr	r2, [pc, #304]	; (8001700 <HAL_UART_MspInit+0x160>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d154      	bne.n	800167c <HAL_UART_MspInit+0xdc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80015d2:	193b      	adds	r3, r7, r4
 80015d4:	2201      	movs	r2, #1
 80015d6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80015d8:	193b      	adds	r3, r7, r4
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015de:	193b      	adds	r3, r7, r4
 80015e0:	0018      	movs	r0, r3
 80015e2:	f001 f8a7 	bl	8002734 <HAL_RCCEx_PeriphCLKConfig>
 80015e6:	1e03      	subs	r3, r0, #0
 80015e8:	d001      	beq.n	80015ee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80015ea:	f7ff ffaf 	bl	800154c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015ee:	4b45      	ldr	r3, [pc, #276]	; (8001704 <HAL_UART_MspInit+0x164>)
 80015f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015f2:	4b44      	ldr	r3, [pc, #272]	; (8001704 <HAL_UART_MspInit+0x164>)
 80015f4:	2180      	movs	r1, #128	; 0x80
 80015f6:	01c9      	lsls	r1, r1, #7
 80015f8:	430a      	orrs	r2, r1
 80015fa:	641a      	str	r2, [r3, #64]	; 0x40
 80015fc:	4b41      	ldr	r3, [pc, #260]	; (8001704 <HAL_UART_MspInit+0x164>)
 80015fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001600:	2380      	movs	r3, #128	; 0x80
 8001602:	01db      	lsls	r3, r3, #7
 8001604:	4013      	ands	r3, r2
 8001606:	617b      	str	r3, [r7, #20]
 8001608:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800160a:	4b3e      	ldr	r3, [pc, #248]	; (8001704 <HAL_UART_MspInit+0x164>)
 800160c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800160e:	4b3d      	ldr	r3, [pc, #244]	; (8001704 <HAL_UART_MspInit+0x164>)
 8001610:	2102      	movs	r1, #2
 8001612:	430a      	orrs	r2, r1
 8001614:	635a      	str	r2, [r3, #52]	; 0x34
 8001616:	4b3b      	ldr	r3, [pc, #236]	; (8001704 <HAL_UART_MspInit+0x164>)
 8001618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800161a:	2202      	movs	r2, #2
 800161c:	4013      	ands	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001622:	2134      	movs	r1, #52	; 0x34
 8001624:	187b      	adds	r3, r7, r1
 8001626:	22c0      	movs	r2, #192	; 0xc0
 8001628:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162a:	187b      	adds	r3, r7, r1
 800162c:	2202      	movs	r2, #2
 800162e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	187b      	adds	r3, r7, r1
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001636:	187b      	adds	r3, r7, r1
 8001638:	2200      	movs	r2, #0
 800163a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 800163c:	187b      	adds	r3, r7, r1
 800163e:	2200      	movs	r2, #0
 8001640:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001642:	187b      	adds	r3, r7, r1
 8001644:	4a30      	ldr	r2, [pc, #192]	; (8001708 <HAL_UART_MspInit+0x168>)
 8001646:	0019      	movs	r1, r3
 8001648:	0010      	movs	r0, r2
 800164a:	f000 fb23 	bl	8001c94 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 800164e:	4b2f      	ldr	r3, [pc, #188]	; (800170c <HAL_UART_MspInit+0x16c>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	4b2e      	ldr	r3, [pc, #184]	; (800170c <HAL_UART_MspInit+0x16c>)
 8001654:	2180      	movs	r1, #128	; 0x80
 8001656:	0249      	lsls	r1, r1, #9
 8001658:	430a      	orrs	r2, r1
 800165a:	601a      	str	r2, [r3, #0]

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 800165c:	4b2b      	ldr	r3, [pc, #172]	; (800170c <HAL_UART_MspInit+0x16c>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4b2a      	ldr	r3, [pc, #168]	; (800170c <HAL_UART_MspInit+0x16c>)
 8001662:	2180      	movs	r1, #128	; 0x80
 8001664:	0289      	lsls	r1, r1, #10
 8001666:	430a      	orrs	r2, r1
 8001668:	601a      	str	r2, [r3, #0]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800166a:	2200      	movs	r2, #0
 800166c:	2100      	movs	r1, #0
 800166e:	201b      	movs	r0, #27
 8001670:	f000 fa02 	bl	8001a78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001674:	201b      	movs	r0, #27
 8001676:	f000 fa14 	bl	8001aa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800167a:	e03d      	b.n	80016f8 <HAL_UART_MspInit+0x158>
  else if(huart->Instance==USART2)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a23      	ldr	r2, [pc, #140]	; (8001710 <HAL_UART_MspInit+0x170>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d138      	bne.n	80016f8 <HAL_UART_MspInit+0x158>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001686:	4b1f      	ldr	r3, [pc, #124]	; (8001704 <HAL_UART_MspInit+0x164>)
 8001688:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800168a:	4b1e      	ldr	r3, [pc, #120]	; (8001704 <HAL_UART_MspInit+0x164>)
 800168c:	2180      	movs	r1, #128	; 0x80
 800168e:	0289      	lsls	r1, r1, #10
 8001690:	430a      	orrs	r2, r1
 8001692:	63da      	str	r2, [r3, #60]	; 0x3c
 8001694:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <HAL_UART_MspInit+0x164>)
 8001696:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001698:	2380      	movs	r3, #128	; 0x80
 800169a:	029b      	lsls	r3, r3, #10
 800169c:	4013      	ands	r3, r2
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a2:	4b18      	ldr	r3, [pc, #96]	; (8001704 <HAL_UART_MspInit+0x164>)
 80016a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016a6:	4b17      	ldr	r3, [pc, #92]	; (8001704 <HAL_UART_MspInit+0x164>)
 80016a8:	2101      	movs	r1, #1
 80016aa:	430a      	orrs	r2, r1
 80016ac:	635a      	str	r2, [r3, #52]	; 0x34
 80016ae:	4b15      	ldr	r3, [pc, #84]	; (8001704 <HAL_UART_MspInit+0x164>)
 80016b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016b2:	2201      	movs	r2, #1
 80016b4:	4013      	ands	r3, r2
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016ba:	2134      	movs	r1, #52	; 0x34
 80016bc:	187b      	adds	r3, r7, r1
 80016be:	220c      	movs	r2, #12
 80016c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c2:	187b      	adds	r3, r7, r1
 80016c4:	2202      	movs	r2, #2
 80016c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	187b      	adds	r3, r7, r1
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ce:	187b      	adds	r3, r7, r1
 80016d0:	2203      	movs	r2, #3
 80016d2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80016d4:	187b      	adds	r3, r7, r1
 80016d6:	2201      	movs	r2, #1
 80016d8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016da:	187a      	adds	r2, r7, r1
 80016dc:	23a0      	movs	r3, #160	; 0xa0
 80016de:	05db      	lsls	r3, r3, #23
 80016e0:	0011      	movs	r1, r2
 80016e2:	0018      	movs	r0, r3
 80016e4:	f000 fad6 	bl	8001c94 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80016e8:	2200      	movs	r2, #0
 80016ea:	2100      	movs	r1, #0
 80016ec:	201c      	movs	r0, #28
 80016ee:	f000 f9c3 	bl	8001a78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016f2:	201c      	movs	r0, #28
 80016f4:	f000 f9d5 	bl	8001aa2 <HAL_NVIC_EnableIRQ>
}
 80016f8:	46c0      	nop			; (mov r8, r8)
 80016fa:	46bd      	mov	sp, r7
 80016fc:	b013      	add	sp, #76	; 0x4c
 80016fe:	bd90      	pop	{r4, r7, pc}
 8001700:	40013800 	.word	0x40013800
 8001704:	40021000 	.word	0x40021000
 8001708:	50000400 	.word	0x50000400
 800170c:	40010000 	.word	0x40010000
 8001710:	40004400 	.word	0x40004400

08001714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <NMI_Handler+0x4>

0800171a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800171e:	e7fe      	b.n	800171e <HardFault_Handler+0x4>

08001720 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001724:	46c0      	nop			; (mov r8, r8)
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800172e:	46c0      	nop			; (mov r8, r8)
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001738:	f000 f8b2 	bl	80018a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800173c:	46c0      	nop			; (mov r8, r8)
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001748:	4b03      	ldr	r3, [pc, #12]	; (8001758 <USART1_IRQHandler+0x14>)
 800174a:	0018      	movs	r0, r3
 800174c:	f001 f936 	bl	80029bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001750:	46c0      	nop			; (mov r8, r8)
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	46c0      	nop			; (mov r8, r8)
 8001758:	20000054 	.word	0x20000054

0800175c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 interrupt.
  */
void USART2_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001760:	4b03      	ldr	r3, [pc, #12]	; (8001770 <USART2_IRQHandler+0x14>)
 8001762:	0018      	movs	r0, r3
 8001764:	f001 f92a 	bl	80029bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001768:	46c0      	nop			; (mov r8, r8)
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	46c0      	nop			; (mov r8, r8)
 8001770:	200000e8 	.word	0x200000e8

08001774 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001778:	4b03      	ldr	r3, [pc, #12]	; (8001788 <SystemInit+0x14>)
 800177a:	2280      	movs	r2, #128	; 0x80
 800177c:	0512      	lsls	r2, r2, #20
 800177e:	609a      	str	r2, [r3, #8]
#endif
}
 8001780:	46c0      	nop			; (mov r8, r8)
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800178c:	480d      	ldr	r0, [pc, #52]	; (80017c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800178e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001790:	f7ff fff0 	bl	8001774 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001794:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001796:	e003      	b.n	80017a0 <LoopCopyDataInit>

08001798 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001798:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800179a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800179c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800179e:	3104      	adds	r1, #4

080017a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80017a0:	480a      	ldr	r0, [pc, #40]	; (80017cc <LoopForever+0xa>)
  ldr r3, =_edata
 80017a2:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <LoopForever+0xe>)
  adds r2, r0, r1
 80017a4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80017a6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80017a8:	d3f6      	bcc.n	8001798 <CopyDataInit>
  ldr r2, =_sbss
 80017aa:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <LoopForever+0x12>)
  b LoopFillZerobss
 80017ac:	e002      	b.n	80017b4 <LoopFillZerobss>

080017ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80017ae:	2300      	movs	r3, #0
  str  r3, [r2]
 80017b0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b2:	3204      	adds	r2, #4

080017b4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80017b4:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <LoopForever+0x16>)
  cmp r2, r3
 80017b6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80017b8:	d3f9      	bcc.n	80017ae <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80017ba:	f002 f96b 	bl	8003a94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017be:	f7fe fe19 	bl	80003f4 <main>

080017c2 <LoopForever>:

LoopForever:
    b LoopForever
 80017c2:	e7fe      	b.n	80017c2 <LoopForever>
  ldr   r0, =_estack
 80017c4:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 80017c8:	08003bb4 	.word	0x08003bb4
  ldr r0, =_sdata
 80017cc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80017d0:	20000024 	.word	0x20000024
  ldr r2, =_sbss
 80017d4:	20000024 	.word	0x20000024
  ldr r3, = _ebss
 80017d8:	20000180 	.word	0x20000180

080017dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017dc:	e7fe      	b.n	80017dc <ADC1_IRQHandler>

080017de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017e4:	1dfb      	adds	r3, r7, #7
 80017e6:	2200      	movs	r2, #0
 80017e8:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017ea:	2003      	movs	r0, #3
 80017ec:	f000 f80e 	bl	800180c <HAL_InitTick>
 80017f0:	1e03      	subs	r3, r0, #0
 80017f2:	d003      	beq.n	80017fc <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80017f4:	1dfb      	adds	r3, r7, #7
 80017f6:	2201      	movs	r2, #1
 80017f8:	701a      	strb	r2, [r3, #0]
 80017fa:	e001      	b.n	8001800 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017fc:	f7ff feac 	bl	8001558 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001800:	1dfb      	adds	r3, r7, #7
 8001802:	781b      	ldrb	r3, [r3, #0]
}
 8001804:	0018      	movs	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	b002      	add	sp, #8
 800180a:	bd80      	pop	{r7, pc}

0800180c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800180c:	b590      	push	{r4, r7, lr}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001814:	230f      	movs	r3, #15
 8001816:	18fb      	adds	r3, r7, r3
 8001818:	2200      	movs	r2, #0
 800181a:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 800181c:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <HAL_InitTick+0x88>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d02b      	beq.n	800187c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8001824:	4b1c      	ldr	r3, [pc, #112]	; (8001898 <HAL_InitTick+0x8c>)
 8001826:	681c      	ldr	r4, [r3, #0]
 8001828:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <HAL_InitTick+0x88>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	0019      	movs	r1, r3
 800182e:	23fa      	movs	r3, #250	; 0xfa
 8001830:	0098      	lsls	r0, r3, #2
 8001832:	f7fe fc69 	bl	8000108 <__udivsi3>
 8001836:	0003      	movs	r3, r0
 8001838:	0019      	movs	r1, r3
 800183a:	0020      	movs	r0, r4
 800183c:	f7fe fc64 	bl	8000108 <__udivsi3>
 8001840:	0003      	movs	r3, r0
 8001842:	0018      	movs	r0, r3
 8001844:	f000 f93d 	bl	8001ac2 <HAL_SYSTICK_Config>
 8001848:	1e03      	subs	r3, r0, #0
 800184a:	d112      	bne.n	8001872 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b03      	cmp	r3, #3
 8001850:	d80a      	bhi.n	8001868 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	2301      	movs	r3, #1
 8001856:	425b      	negs	r3, r3
 8001858:	2200      	movs	r2, #0
 800185a:	0018      	movs	r0, r3
 800185c:	f000 f90c 	bl	8001a78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001860:	4b0e      	ldr	r3, [pc, #56]	; (800189c <HAL_InitTick+0x90>)
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	e00d      	b.n	8001884 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001868:	230f      	movs	r3, #15
 800186a:	18fb      	adds	r3, r7, r3
 800186c:	2201      	movs	r2, #1
 800186e:	701a      	strb	r2, [r3, #0]
 8001870:	e008      	b.n	8001884 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001872:	230f      	movs	r3, #15
 8001874:	18fb      	adds	r3, r7, r3
 8001876:	2201      	movs	r2, #1
 8001878:	701a      	strb	r2, [r3, #0]
 800187a:	e003      	b.n	8001884 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800187c:	230f      	movs	r3, #15
 800187e:	18fb      	adds	r3, r7, r3
 8001880:	2201      	movs	r2, #1
 8001882:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001884:	230f      	movs	r3, #15
 8001886:	18fb      	adds	r3, r7, r3
 8001888:	781b      	ldrb	r3, [r3, #0]
}
 800188a:	0018      	movs	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	b005      	add	sp, #20
 8001890:	bd90      	pop	{r4, r7, pc}
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	20000020 	.word	0x20000020
 8001898:	20000018 	.word	0x20000018
 800189c:	2000001c 	.word	0x2000001c

080018a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018a4:	4b05      	ldr	r3, [pc, #20]	; (80018bc <HAL_IncTick+0x1c>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	001a      	movs	r2, r3
 80018aa:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <HAL_IncTick+0x20>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	18d2      	adds	r2, r2, r3
 80018b0:	4b03      	ldr	r3, [pc, #12]	; (80018c0 <HAL_IncTick+0x20>)
 80018b2:	601a      	str	r2, [r3, #0]
}
 80018b4:	46c0      	nop			; (mov r8, r8)
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	46c0      	nop			; (mov r8, r8)
 80018bc:	20000020 	.word	0x20000020
 80018c0:	2000017c 	.word	0x2000017c

080018c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  return uwTick;
 80018c8:	4b02      	ldr	r3, [pc, #8]	; (80018d4 <HAL_GetTick+0x10>)
 80018ca:	681b      	ldr	r3, [r3, #0]
}
 80018cc:	0018      	movs	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	46c0      	nop			; (mov r8, r8)
 80018d4:	2000017c 	.word	0x2000017c

080018d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018e0:	f7ff fff0 	bl	80018c4 <HAL_GetTick>
 80018e4:	0003      	movs	r3, r0
 80018e6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	3301      	adds	r3, #1
 80018f0:	d005      	beq.n	80018fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018f2:	4b0a      	ldr	r3, [pc, #40]	; (800191c <HAL_Delay+0x44>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	001a      	movs	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	189b      	adds	r3, r3, r2
 80018fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018fe:	46c0      	nop			; (mov r8, r8)
 8001900:	f7ff ffe0 	bl	80018c4 <HAL_GetTick>
 8001904:	0002      	movs	r2, r0
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	429a      	cmp	r2, r3
 800190e:	d8f7      	bhi.n	8001900 <HAL_Delay+0x28>
  {
  }
}
 8001910:	46c0      	nop			; (mov r8, r8)
 8001912:	46c0      	nop			; (mov r8, r8)
 8001914:	46bd      	mov	sp, r7
 8001916:	b004      	add	sp, #16
 8001918:	bd80      	pop	{r7, pc}
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	20000020 	.word	0x20000020

08001920 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	0002      	movs	r2, r0
 8001928:	1dfb      	adds	r3, r7, #7
 800192a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800192c:	1dfb      	adds	r3, r7, #7
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b7f      	cmp	r3, #127	; 0x7f
 8001932:	d809      	bhi.n	8001948 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001934:	1dfb      	adds	r3, r7, #7
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	001a      	movs	r2, r3
 800193a:	231f      	movs	r3, #31
 800193c:	401a      	ands	r2, r3
 800193e:	4b04      	ldr	r3, [pc, #16]	; (8001950 <__NVIC_EnableIRQ+0x30>)
 8001940:	2101      	movs	r1, #1
 8001942:	4091      	lsls	r1, r2
 8001944:	000a      	movs	r2, r1
 8001946:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001948:	46c0      	nop			; (mov r8, r8)
 800194a:	46bd      	mov	sp, r7
 800194c:	b002      	add	sp, #8
 800194e:	bd80      	pop	{r7, pc}
 8001950:	e000e100 	.word	0xe000e100

08001954 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001954:	b590      	push	{r4, r7, lr}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	0002      	movs	r2, r0
 800195c:	6039      	str	r1, [r7, #0]
 800195e:	1dfb      	adds	r3, r7, #7
 8001960:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001962:	1dfb      	adds	r3, r7, #7
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b7f      	cmp	r3, #127	; 0x7f
 8001968:	d828      	bhi.n	80019bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800196a:	4a2f      	ldr	r2, [pc, #188]	; (8001a28 <__NVIC_SetPriority+0xd4>)
 800196c:	1dfb      	adds	r3, r7, #7
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	b25b      	sxtb	r3, r3
 8001972:	089b      	lsrs	r3, r3, #2
 8001974:	33c0      	adds	r3, #192	; 0xc0
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	589b      	ldr	r3, [r3, r2]
 800197a:	1dfa      	adds	r2, r7, #7
 800197c:	7812      	ldrb	r2, [r2, #0]
 800197e:	0011      	movs	r1, r2
 8001980:	2203      	movs	r2, #3
 8001982:	400a      	ands	r2, r1
 8001984:	00d2      	lsls	r2, r2, #3
 8001986:	21ff      	movs	r1, #255	; 0xff
 8001988:	4091      	lsls	r1, r2
 800198a:	000a      	movs	r2, r1
 800198c:	43d2      	mvns	r2, r2
 800198e:	401a      	ands	r2, r3
 8001990:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	019b      	lsls	r3, r3, #6
 8001996:	22ff      	movs	r2, #255	; 0xff
 8001998:	401a      	ands	r2, r3
 800199a:	1dfb      	adds	r3, r7, #7
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	0018      	movs	r0, r3
 80019a0:	2303      	movs	r3, #3
 80019a2:	4003      	ands	r3, r0
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019a8:	481f      	ldr	r0, [pc, #124]	; (8001a28 <__NVIC_SetPriority+0xd4>)
 80019aa:	1dfb      	adds	r3, r7, #7
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	b25b      	sxtb	r3, r3
 80019b0:	089b      	lsrs	r3, r3, #2
 80019b2:	430a      	orrs	r2, r1
 80019b4:	33c0      	adds	r3, #192	; 0xc0
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80019ba:	e031      	b.n	8001a20 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019bc:	4a1b      	ldr	r2, [pc, #108]	; (8001a2c <__NVIC_SetPriority+0xd8>)
 80019be:	1dfb      	adds	r3, r7, #7
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	0019      	movs	r1, r3
 80019c4:	230f      	movs	r3, #15
 80019c6:	400b      	ands	r3, r1
 80019c8:	3b08      	subs	r3, #8
 80019ca:	089b      	lsrs	r3, r3, #2
 80019cc:	3306      	adds	r3, #6
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	18d3      	adds	r3, r2, r3
 80019d2:	3304      	adds	r3, #4
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	1dfa      	adds	r2, r7, #7
 80019d8:	7812      	ldrb	r2, [r2, #0]
 80019da:	0011      	movs	r1, r2
 80019dc:	2203      	movs	r2, #3
 80019de:	400a      	ands	r2, r1
 80019e0:	00d2      	lsls	r2, r2, #3
 80019e2:	21ff      	movs	r1, #255	; 0xff
 80019e4:	4091      	lsls	r1, r2
 80019e6:	000a      	movs	r2, r1
 80019e8:	43d2      	mvns	r2, r2
 80019ea:	401a      	ands	r2, r3
 80019ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	019b      	lsls	r3, r3, #6
 80019f2:	22ff      	movs	r2, #255	; 0xff
 80019f4:	401a      	ands	r2, r3
 80019f6:	1dfb      	adds	r3, r7, #7
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	0018      	movs	r0, r3
 80019fc:	2303      	movs	r3, #3
 80019fe:	4003      	ands	r3, r0
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a04:	4809      	ldr	r0, [pc, #36]	; (8001a2c <__NVIC_SetPriority+0xd8>)
 8001a06:	1dfb      	adds	r3, r7, #7
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	001c      	movs	r4, r3
 8001a0c:	230f      	movs	r3, #15
 8001a0e:	4023      	ands	r3, r4
 8001a10:	3b08      	subs	r3, #8
 8001a12:	089b      	lsrs	r3, r3, #2
 8001a14:	430a      	orrs	r2, r1
 8001a16:	3306      	adds	r3, #6
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	18c3      	adds	r3, r0, r3
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	601a      	str	r2, [r3, #0]
}
 8001a20:	46c0      	nop			; (mov r8, r8)
 8001a22:	46bd      	mov	sp, r7
 8001a24:	b003      	add	sp, #12
 8001a26:	bd90      	pop	{r4, r7, pc}
 8001a28:	e000e100 	.word	0xe000e100
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	1e5a      	subs	r2, r3, #1
 8001a3c:	2380      	movs	r3, #128	; 0x80
 8001a3e:	045b      	lsls	r3, r3, #17
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d301      	bcc.n	8001a48 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a44:	2301      	movs	r3, #1
 8001a46:	e010      	b.n	8001a6a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a48:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <SysTick_Config+0x44>)
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	3a01      	subs	r2, #1
 8001a4e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a50:	2301      	movs	r3, #1
 8001a52:	425b      	negs	r3, r3
 8001a54:	2103      	movs	r1, #3
 8001a56:	0018      	movs	r0, r3
 8001a58:	f7ff ff7c 	bl	8001954 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a5c:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <SysTick_Config+0x44>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a62:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <SysTick_Config+0x44>)
 8001a64:	2207      	movs	r2, #7
 8001a66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	b002      	add	sp, #8
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	e000e010 	.word	0xe000e010

08001a78 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60b9      	str	r1, [r7, #8]
 8001a80:	607a      	str	r2, [r7, #4]
 8001a82:	210f      	movs	r1, #15
 8001a84:	187b      	adds	r3, r7, r1
 8001a86:	1c02      	adds	r2, r0, #0
 8001a88:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	187b      	adds	r3, r7, r1
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	b25b      	sxtb	r3, r3
 8001a92:	0011      	movs	r1, r2
 8001a94:	0018      	movs	r0, r3
 8001a96:	f7ff ff5d 	bl	8001954 <__NVIC_SetPriority>
}
 8001a9a:	46c0      	nop			; (mov r8, r8)
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	b004      	add	sp, #16
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	0002      	movs	r2, r0
 8001aaa:	1dfb      	adds	r3, r7, #7
 8001aac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aae:	1dfb      	adds	r3, r7, #7
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	b25b      	sxtb	r3, r3
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f7ff ff33 	bl	8001920 <__NVIC_EnableIRQ>
}
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	46bd      	mov	sp, r7
 8001abe:	b002      	add	sp, #8
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	0018      	movs	r0, r3
 8001ace:	f7ff ffaf 	bl	8001a30 <SysTick_Config>
 8001ad2:	0003      	movs	r3, r0
}
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	b002      	add	sp, #8
 8001ada:	bd80      	pop	{r7, pc}

08001adc <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e050      	b.n	8001b90 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2225      	movs	r2, #37	; 0x25
 8001af2:	5c9b      	ldrb	r3, [r3, r2]
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d008      	beq.n	8001b0c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2204      	movs	r2, #4
 8001afe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2224      	movs	r2, #36	; 0x24
 8001b04:	2100      	movs	r1, #0
 8001b06:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e041      	b.n	8001b90 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	210e      	movs	r1, #14
 8001b18:	438a      	bics	r2, r1
 8001b1a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b26:	491c      	ldr	r1, [pc, #112]	; (8001b98 <HAL_DMA_Abort+0xbc>)
 8001b28:	400a      	ands	r2, r1
 8001b2a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2101      	movs	r1, #1
 8001b38:	438a      	bics	r2, r1
 8001b3a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8001b3c:	4b17      	ldr	r3, [pc, #92]	; (8001b9c <HAL_DMA_Abort+0xc0>)
 8001b3e:	6859      	ldr	r1, [r3, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b44:	221c      	movs	r2, #28
 8001b46:	4013      	ands	r3, r2
 8001b48:	2201      	movs	r2, #1
 8001b4a:	409a      	lsls	r2, r3
 8001b4c:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <HAL_DMA_Abort+0xc0>)
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001b5a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d00c      	beq.n	8001b7e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b6e:	490a      	ldr	r1, [pc, #40]	; (8001b98 <HAL_DMA_Abort+0xbc>)
 8001b70:	400a      	ands	r2, r1
 8001b72:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001b7c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2225      	movs	r2, #37	; 0x25
 8001b82:	2101      	movs	r1, #1
 8001b84:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2224      	movs	r2, #36	; 0x24
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	0018      	movs	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	b002      	add	sp, #8
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	fffffeff 	.word	0xfffffeff
 8001b9c:	40020000 	.word	0x40020000

08001ba0 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ba8:	230f      	movs	r3, #15
 8001baa:	18fb      	adds	r3, r7, r3
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2224      	movs	r2, #36	; 0x24
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2224      	movs	r2, #36	; 0x24
 8001bbc:	5c9b      	ldrb	r3, [r3, r2]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d101      	bne.n	8001bc6 <HAL_DMA_Abort_IT+0x26>
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	e05e      	b.n	8001c84 <HAL_DMA_Abort_IT+0xe4>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2224      	movs	r2, #36	; 0x24
 8001bca:	2101      	movs	r1, #1
 8001bcc:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2225      	movs	r2, #37	; 0x25
 8001bd2:	5c9b      	ldrb	r3, [r3, r2]
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d007      	beq.n	8001bea <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2204      	movs	r2, #4
 8001bde:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001be0:	230f      	movs	r3, #15
 8001be2:	18fb      	adds	r3, r7, r3
 8001be4:	2201      	movs	r2, #1
 8001be6:	701a      	strb	r2, [r3, #0]
 8001be8:	e049      	b.n	8001c7e <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	210e      	movs	r1, #14
 8001bf6:	438a      	bics	r2, r1
 8001bf8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2101      	movs	r1, #1
 8001c06:	438a      	bics	r2, r1
 8001c08:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c14:	491d      	ldr	r1, [pc, #116]	; (8001c8c <HAL_DMA_Abort_IT+0xec>)
 8001c16:	400a      	ands	r2, r1
 8001c18:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8001c1a:	4b1d      	ldr	r3, [pc, #116]	; (8001c90 <HAL_DMA_Abort_IT+0xf0>)
 8001c1c:	6859      	ldr	r1, [r3, #4]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	221c      	movs	r2, #28
 8001c24:	4013      	ands	r3, r2
 8001c26:	2201      	movs	r2, #1
 8001c28:	409a      	lsls	r2, r3
 8001c2a:	4b19      	ldr	r3, [pc, #100]	; (8001c90 <HAL_DMA_Abort_IT+0xf0>)
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001c38:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00c      	beq.n	8001c5c <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c4c:	490f      	ldr	r1, [pc, #60]	; (8001c8c <HAL_DMA_Abort_IT+0xec>)
 8001c4e:	400a      	ands	r2, r1
 8001c50:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001c5a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2225      	movs	r2, #37	; 0x25
 8001c60:	2101      	movs	r1, #1
 8001c62:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2224      	movs	r2, #36	; 0x24
 8001c68:	2100      	movs	r1, #0
 8001c6a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d004      	beq.n	8001c7e <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	0010      	movs	r0, r2
 8001c7c:	4798      	blx	r3
    }
  }
  return status;
 8001c7e:	230f      	movs	r3, #15
 8001c80:	18fb      	adds	r3, r7, r3
 8001c82:	781b      	ldrb	r3, [r3, #0]
}
 8001c84:	0018      	movs	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	b004      	add	sp, #16
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	fffffeff 	.word	0xfffffeff
 8001c90:	40020000 	.word	0x40020000

08001c94 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001ca2:	e153      	b.n	8001f4c <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2101      	movs	r1, #1
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	4091      	lsls	r1, r2
 8001cae:	000a      	movs	r2, r1
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d100      	bne.n	8001cbc <HAL_GPIO_Init+0x28>
 8001cba:	e144      	b.n	8001f46 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d003      	beq.n	8001ccc <HAL_GPIO_Init+0x38>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	2b12      	cmp	r3, #18
 8001cca:	d125      	bne.n	8001d18 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	08da      	lsrs	r2, r3, #3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3208      	adds	r2, #8
 8001cd4:	0092      	lsls	r2, r2, #2
 8001cd6:	58d3      	ldr	r3, [r2, r3]
 8001cd8:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	2207      	movs	r2, #7
 8001cde:	4013      	ands	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	220f      	movs	r2, #15
 8001ce4:	409a      	lsls	r2, r3
 8001ce6:	0013      	movs	r3, r2
 8001ce8:	43da      	mvns	r2, r3
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	4013      	ands	r3, r2
 8001cee:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	220f      	movs	r2, #15
 8001cf6:	401a      	ands	r2, r3
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	2107      	movs	r1, #7
 8001cfc:	400b      	ands	r3, r1
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	409a      	lsls	r2, r3
 8001d02:	0013      	movs	r3, r2
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	08da      	lsrs	r2, r3, #3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	3208      	adds	r2, #8
 8001d12:	0092      	lsls	r2, r2, #2
 8001d14:	6979      	ldr	r1, [r7, #20]
 8001d16:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	2203      	movs	r2, #3
 8001d24:	409a      	lsls	r2, r3
 8001d26:	0013      	movs	r3, r2
 8001d28:	43da      	mvns	r2, r3
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	2203      	movs	r2, #3
 8001d36:	401a      	ands	r2, r3
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	409a      	lsls	r2, r3
 8001d3e:	0013      	movs	r3, r2
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d00b      	beq.n	8001d6c <HAL_GPIO_Init+0xd8>
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d007      	beq.n	8001d6c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d60:	2b11      	cmp	r3, #17
 8001d62:	d003      	beq.n	8001d6c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b12      	cmp	r3, #18
 8001d6a:	d130      	bne.n	8001dce <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	2203      	movs	r2, #3
 8001d78:	409a      	lsls	r2, r3
 8001d7a:	0013      	movs	r3, r2
 8001d7c:	43da      	mvns	r2, r3
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	4013      	ands	r3, r2
 8001d82:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	68da      	ldr	r2, [r3, #12]
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	409a      	lsls	r2, r3
 8001d8e:	0013      	movs	r3, r2
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001da2:	2201      	movs	r2, #1
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	409a      	lsls	r2, r3
 8001da8:	0013      	movs	r3, r2
 8001daa:	43da      	mvns	r2, r3
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	4013      	ands	r3, r2
 8001db0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	091b      	lsrs	r3, r3, #4
 8001db8:	2201      	movs	r2, #1
 8001dba:	401a      	ands	r2, r3
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	409a      	lsls	r2, r3
 8001dc0:	0013      	movs	r3, r2
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b03      	cmp	r3, #3
 8001dd4:	d017      	beq.n	8001e06 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	2203      	movs	r2, #3
 8001de2:	409a      	lsls	r2, r3
 8001de4:	0013      	movs	r3, r2
 8001de6:	43da      	mvns	r2, r3
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	4013      	ands	r3, r2
 8001dec:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	409a      	lsls	r2, r3
 8001df8:	0013      	movs	r3, r2
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	2380      	movs	r3, #128	; 0x80
 8001e0c:	055b      	lsls	r3, r3, #21
 8001e0e:	4013      	ands	r3, r2
 8001e10:	d100      	bne.n	8001e14 <HAL_GPIO_Init+0x180>
 8001e12:	e098      	b.n	8001f46 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001e14:	4a53      	ldr	r2, [pc, #332]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	089b      	lsrs	r3, r3, #2
 8001e1a:	3318      	adds	r3, #24
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	589b      	ldr	r3, [r3, r2]
 8001e20:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	2203      	movs	r2, #3
 8001e26:	4013      	ands	r3, r2
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	220f      	movs	r2, #15
 8001e2c:	409a      	lsls	r2, r3
 8001e2e:	0013      	movs	r3, r2
 8001e30:	43da      	mvns	r2, r3
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	4013      	ands	r3, r2
 8001e36:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	23a0      	movs	r3, #160	; 0xa0
 8001e3c:	05db      	lsls	r3, r3, #23
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d019      	beq.n	8001e76 <HAL_GPIO_Init+0x1e2>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a48      	ldr	r2, [pc, #288]	; (8001f68 <HAL_GPIO_Init+0x2d4>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d013      	beq.n	8001e72 <HAL_GPIO_Init+0x1de>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a47      	ldr	r2, [pc, #284]	; (8001f6c <HAL_GPIO_Init+0x2d8>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d00d      	beq.n	8001e6e <HAL_GPIO_Init+0x1da>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a46      	ldr	r2, [pc, #280]	; (8001f70 <HAL_GPIO_Init+0x2dc>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d007      	beq.n	8001e6a <HAL_GPIO_Init+0x1d6>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a45      	ldr	r2, [pc, #276]	; (8001f74 <HAL_GPIO_Init+0x2e0>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d101      	bne.n	8001e66 <HAL_GPIO_Init+0x1d2>
 8001e62:	2305      	movs	r3, #5
 8001e64:	e008      	b.n	8001e78 <HAL_GPIO_Init+0x1e4>
 8001e66:	2306      	movs	r3, #6
 8001e68:	e006      	b.n	8001e78 <HAL_GPIO_Init+0x1e4>
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e004      	b.n	8001e78 <HAL_GPIO_Init+0x1e4>
 8001e6e:	2302      	movs	r3, #2
 8001e70:	e002      	b.n	8001e78 <HAL_GPIO_Init+0x1e4>
 8001e72:	2301      	movs	r3, #1
 8001e74:	e000      	b.n	8001e78 <HAL_GPIO_Init+0x1e4>
 8001e76:	2300      	movs	r3, #0
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	2103      	movs	r1, #3
 8001e7c:	400a      	ands	r2, r1
 8001e7e:	00d2      	lsls	r2, r2, #3
 8001e80:	4093      	lsls	r3, r2
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001e88:	4936      	ldr	r1, [pc, #216]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	089b      	lsrs	r3, r3, #2
 8001e8e:	3318      	adds	r3, #24
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001e96:	4a33      	ldr	r2, [pc, #204]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001e98:	2380      	movs	r3, #128	; 0x80
 8001e9a:	58d3      	ldr	r3, [r2, r3]
 8001e9c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	43da      	mvns	r2, r3
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	2380      	movs	r3, #128	; 0x80
 8001eae:	025b      	lsls	r3, r3, #9
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d003      	beq.n	8001ebc <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001ebc:	4929      	ldr	r1, [pc, #164]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001ebe:	2280      	movs	r2, #128	; 0x80
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001ec4:	4a27      	ldr	r2, [pc, #156]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001ec6:	2384      	movs	r3, #132	; 0x84
 8001ec8:	58d3      	ldr	r3, [r2, r3]
 8001eca:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	43da      	mvns	r2, r3
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	2380      	movs	r3, #128	; 0x80
 8001edc:	029b      	lsls	r3, r3, #10
 8001ede:	4013      	ands	r3, r2
 8001ee0:	d003      	beq.n	8001eea <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001eea:	491e      	ldr	r1, [pc, #120]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001eec:	2284      	movs	r2, #132	; 0x84
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001ef2:	4b1c      	ldr	r3, [pc, #112]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	43da      	mvns	r2, r3
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	4013      	ands	r3, r2
 8001f00:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	2380      	movs	r3, #128	; 0x80
 8001f08:	035b      	lsls	r3, r3, #13
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	d003      	beq.n	8001f16 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001f16:	4b13      	ldr	r3, [pc, #76]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001f1c:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	43da      	mvns	r2, r3
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	2380      	movs	r3, #128	; 0x80
 8001f32:	039b      	lsls	r3, r3, #14
 8001f34:	4013      	ands	r3, r2
 8001f36:	d003      	beq.n	8001f40 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001f40:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	40da      	lsrs	r2, r3
 8001f54:	1e13      	subs	r3, r2, #0
 8001f56:	d000      	beq.n	8001f5a <HAL_GPIO_Init+0x2c6>
 8001f58:	e6a4      	b.n	8001ca4 <HAL_GPIO_Init+0x10>
  }
}
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	46c0      	nop			; (mov r8, r8)
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	b006      	add	sp, #24
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40021800 	.word	0x40021800
 8001f68:	50000400 	.word	0x50000400
 8001f6c:	50000800 	.word	0x50000800
 8001f70:	50000c00 	.word	0x50000c00
 8001f74:	50001400 	.word	0x50001400

08001f78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	000a      	movs	r2, r1
 8001f82:	1cbb      	adds	r3, r7, #2
 8001f84:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	1cba      	adds	r2, r7, #2
 8001f8c:	8812      	ldrh	r2, [r2, #0]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d004      	beq.n	8001f9c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001f92:	230f      	movs	r3, #15
 8001f94:	18fb      	adds	r3, r7, r3
 8001f96:	2201      	movs	r2, #1
 8001f98:	701a      	strb	r2, [r3, #0]
 8001f9a:	e003      	b.n	8001fa4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f9c:	230f      	movs	r3, #15
 8001f9e:	18fb      	adds	r3, r7, r3
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001fa4:	230f      	movs	r3, #15
 8001fa6:	18fb      	adds	r3, r7, r3
 8001fa8:	781b      	ldrb	r3, [r3, #0]
}
 8001faa:	0018      	movs	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	b004      	add	sp, #16
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
 8001fba:	0008      	movs	r0, r1
 8001fbc:	0011      	movs	r1, r2
 8001fbe:	1cbb      	adds	r3, r7, #2
 8001fc0:	1c02      	adds	r2, r0, #0
 8001fc2:	801a      	strh	r2, [r3, #0]
 8001fc4:	1c7b      	adds	r3, r7, #1
 8001fc6:	1c0a      	adds	r2, r1, #0
 8001fc8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fca:	1c7b      	adds	r3, r7, #1
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d004      	beq.n	8001fdc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fd2:	1cbb      	adds	r3, r7, #2
 8001fd4:	881a      	ldrh	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fda:	e003      	b.n	8001fe4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fdc:	1cbb      	adds	r3, r7, #2
 8001fde:	881a      	ldrh	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fe4:	46c0      	nop			; (mov r8, r8)
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	b002      	add	sp, #8
 8001fea:	bd80      	pop	{r7, pc}

08001fec <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e03d      	b.n	800207a <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a20      	ldr	r2, [pc, #128]	; (8002084 <HAL_IWDG_Init+0x98>)
 8002004:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a1f      	ldr	r2, [pc, #124]	; (8002088 <HAL_IWDG_Init+0x9c>)
 800200c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6852      	ldr	r2, [r2, #4]
 8002016:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6892      	ldr	r2, [r2, #8]
 8002020:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002022:	f7ff fc4f 	bl	80018c4 <HAL_GetTick>
 8002026:	0003      	movs	r3, r0
 8002028:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800202a:	e00e      	b.n	800204a <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800202c:	f7ff fc4a 	bl	80018c4 <HAL_GetTick>
 8002030:	0002      	movs	r2, r0
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b31      	cmp	r3, #49	; 0x31
 8002038:	d907      	bls.n	800204a <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	2207      	movs	r2, #7
 8002042:	4013      	ands	r3, r2
 8002044:	d001      	beq.n	800204a <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e017      	b.n	800207a <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	2207      	movs	r2, #7
 8002052:	4013      	ands	r3, r2
 8002054:	d1ea      	bne.n	800202c <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	691a      	ldr	r2, [r3, #16]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	429a      	cmp	r2, r3
 8002062:	d005      	beq.n	8002070 <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	68d2      	ldr	r2, [r2, #12]
 800206c:	611a      	str	r2, [r3, #16]
 800206e:	e003      	b.n	8002078 <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a05      	ldr	r2, [pc, #20]	; (800208c <HAL_IWDG_Init+0xa0>)
 8002076:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	0018      	movs	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	b004      	add	sp, #16
 8002080:	bd80      	pop	{r7, pc}
 8002082:	46c0      	nop			; (mov r8, r8)
 8002084:	0000cccc 	.word	0x0000cccc
 8002088:	00005555 	.word	0x00005555
 800208c:	0000aaaa 	.word	0x0000aaaa

08002090 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e1d0      	b.n	8002444 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2201      	movs	r2, #1
 80020a8:	4013      	ands	r3, r2
 80020aa:	d100      	bne.n	80020ae <HAL_RCC_OscConfig+0x1e>
 80020ac:	e069      	b.n	8002182 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020ae:	4bc8      	ldr	r3, [pc, #800]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	2238      	movs	r2, #56	; 0x38
 80020b4:	4013      	ands	r3, r2
 80020b6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	2b08      	cmp	r3, #8
 80020bc:	d105      	bne.n	80020ca <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d15d      	bne.n	8002182 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e1bc      	b.n	8002444 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	2380      	movs	r3, #128	; 0x80
 80020d0:	025b      	lsls	r3, r3, #9
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d107      	bne.n	80020e6 <HAL_RCC_OscConfig+0x56>
 80020d6:	4bbe      	ldr	r3, [pc, #760]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	4bbd      	ldr	r3, [pc, #756]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 80020dc:	2180      	movs	r1, #128	; 0x80
 80020de:	0249      	lsls	r1, r1, #9
 80020e0:	430a      	orrs	r2, r1
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	e020      	b.n	8002128 <HAL_RCC_OscConfig+0x98>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	23a0      	movs	r3, #160	; 0xa0
 80020ec:	02db      	lsls	r3, r3, #11
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d10e      	bne.n	8002110 <HAL_RCC_OscConfig+0x80>
 80020f2:	4bb7      	ldr	r3, [pc, #732]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	4bb6      	ldr	r3, [pc, #728]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 80020f8:	2180      	movs	r1, #128	; 0x80
 80020fa:	02c9      	lsls	r1, r1, #11
 80020fc:	430a      	orrs	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	4bb3      	ldr	r3, [pc, #716]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	4bb2      	ldr	r3, [pc, #712]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 8002106:	2180      	movs	r1, #128	; 0x80
 8002108:	0249      	lsls	r1, r1, #9
 800210a:	430a      	orrs	r2, r1
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	e00b      	b.n	8002128 <HAL_RCC_OscConfig+0x98>
 8002110:	4baf      	ldr	r3, [pc, #700]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	4bae      	ldr	r3, [pc, #696]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 8002116:	49af      	ldr	r1, [pc, #700]	; (80023d4 <HAL_RCC_OscConfig+0x344>)
 8002118:	400a      	ands	r2, r1
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	4bac      	ldr	r3, [pc, #688]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	4bab      	ldr	r3, [pc, #684]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 8002122:	49ad      	ldr	r1, [pc, #692]	; (80023d8 <HAL_RCC_OscConfig+0x348>)
 8002124:	400a      	ands	r2, r1
 8002126:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d014      	beq.n	800215a <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002130:	f7ff fbc8 	bl	80018c4 <HAL_GetTick>
 8002134:	0003      	movs	r3, r0
 8002136:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800213a:	f7ff fbc3 	bl	80018c4 <HAL_GetTick>
 800213e:	0002      	movs	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b64      	cmp	r3, #100	; 0x64
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e17b      	b.n	8002444 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800214c:	4ba0      	ldr	r3, [pc, #640]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	2380      	movs	r3, #128	; 0x80
 8002152:	029b      	lsls	r3, r3, #10
 8002154:	4013      	ands	r3, r2
 8002156:	d0f0      	beq.n	800213a <HAL_RCC_OscConfig+0xaa>
 8002158:	e013      	b.n	8002182 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215a:	f7ff fbb3 	bl	80018c4 <HAL_GetTick>
 800215e:	0003      	movs	r3, r0
 8002160:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002164:	f7ff fbae 	bl	80018c4 <HAL_GetTick>
 8002168:	0002      	movs	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b64      	cmp	r3, #100	; 0x64
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e166      	b.n	8002444 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002176:	4b96      	ldr	r3, [pc, #600]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	2380      	movs	r3, #128	; 0x80
 800217c:	029b      	lsls	r3, r3, #10
 800217e:	4013      	ands	r3, r2
 8002180:	d1f0      	bne.n	8002164 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2202      	movs	r2, #2
 8002188:	4013      	ands	r3, r2
 800218a:	d100      	bne.n	800218e <HAL_RCC_OscConfig+0xfe>
 800218c:	e086      	b.n	800229c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800218e:	4b90      	ldr	r3, [pc, #576]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	2238      	movs	r2, #56	; 0x38
 8002194:	4013      	ands	r3, r2
 8002196:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d12f      	bne.n	80021fe <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e14c      	b.n	8002444 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021aa:	4b89      	ldr	r3, [pc, #548]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	4a8b      	ldr	r2, [pc, #556]	; (80023dc <HAL_RCC_OscConfig+0x34c>)
 80021b0:	4013      	ands	r3, r2
 80021b2:	0019      	movs	r1, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	021a      	lsls	r2, r3, #8
 80021ba:	4b85      	ldr	r3, [pc, #532]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 80021bc:	430a      	orrs	r2, r1
 80021be:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d112      	bne.n	80021ec <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80021c6:	4b82      	ldr	r3, [pc, #520]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a85      	ldr	r2, [pc, #532]	; (80023e0 <HAL_RCC_OscConfig+0x350>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	0019      	movs	r1, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	691a      	ldr	r2, [r3, #16]
 80021d4:	4b7e      	ldr	r3, [pc, #504]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 80021d6:	430a      	orrs	r2, r1
 80021d8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80021da:	4b7d      	ldr	r3, [pc, #500]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	0adb      	lsrs	r3, r3, #11
 80021e0:	2207      	movs	r2, #7
 80021e2:	4013      	ands	r3, r2
 80021e4:	4a7f      	ldr	r2, [pc, #508]	; (80023e4 <HAL_RCC_OscConfig+0x354>)
 80021e6:	40da      	lsrs	r2, r3
 80021e8:	4b7f      	ldr	r3, [pc, #508]	; (80023e8 <HAL_RCC_OscConfig+0x358>)
 80021ea:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80021ec:	4b7f      	ldr	r3, [pc, #508]	; (80023ec <HAL_RCC_OscConfig+0x35c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	0018      	movs	r0, r3
 80021f2:	f7ff fb0b 	bl	800180c <HAL_InitTick>
 80021f6:	1e03      	subs	r3, r0, #0
 80021f8:	d050      	beq.n	800229c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e122      	b.n	8002444 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d030      	beq.n	8002268 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002206:	4b72      	ldr	r3, [pc, #456]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a75      	ldr	r2, [pc, #468]	; (80023e0 <HAL_RCC_OscConfig+0x350>)
 800220c:	4013      	ands	r3, r2
 800220e:	0019      	movs	r1, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691a      	ldr	r2, [r3, #16]
 8002214:	4b6e      	ldr	r3, [pc, #440]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 8002216:	430a      	orrs	r2, r1
 8002218:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800221a:	4b6d      	ldr	r3, [pc, #436]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	4b6c      	ldr	r3, [pc, #432]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 8002220:	2180      	movs	r1, #128	; 0x80
 8002222:	0049      	lsls	r1, r1, #1
 8002224:	430a      	orrs	r2, r1
 8002226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002228:	f7ff fb4c 	bl	80018c4 <HAL_GetTick>
 800222c:	0003      	movs	r3, r0
 800222e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002232:	f7ff fb47 	bl	80018c4 <HAL_GetTick>
 8002236:	0002      	movs	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e0ff      	b.n	8002444 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002244:	4b62      	ldr	r3, [pc, #392]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	2380      	movs	r3, #128	; 0x80
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	4013      	ands	r3, r2
 800224e:	d0f0      	beq.n	8002232 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002250:	4b5f      	ldr	r3, [pc, #380]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	4a61      	ldr	r2, [pc, #388]	; (80023dc <HAL_RCC_OscConfig+0x34c>)
 8002256:	4013      	ands	r3, r2
 8002258:	0019      	movs	r1, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	021a      	lsls	r2, r3, #8
 8002260:	4b5b      	ldr	r3, [pc, #364]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 8002262:	430a      	orrs	r2, r1
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	e019      	b.n	800229c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8002268:	4b59      	ldr	r3, [pc, #356]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	4b58      	ldr	r3, [pc, #352]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 800226e:	4960      	ldr	r1, [pc, #384]	; (80023f0 <HAL_RCC_OscConfig+0x360>)
 8002270:	400a      	ands	r2, r1
 8002272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002274:	f7ff fb26 	bl	80018c4 <HAL_GetTick>
 8002278:	0003      	movs	r3, r0
 800227a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800227e:	f7ff fb21 	bl	80018c4 <HAL_GetTick>
 8002282:	0002      	movs	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e0d9      	b.n	8002444 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002290:	4b4f      	ldr	r3, [pc, #316]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	2380      	movs	r3, #128	; 0x80
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	4013      	ands	r3, r2
 800229a:	d1f0      	bne.n	800227e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2208      	movs	r2, #8
 80022a2:	4013      	ands	r3, r2
 80022a4:	d042      	beq.n	800232c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80022a6:	4b4a      	ldr	r3, [pc, #296]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	2238      	movs	r2, #56	; 0x38
 80022ac:	4013      	ands	r3, r2
 80022ae:	2b18      	cmp	r3, #24
 80022b0:	d105      	bne.n	80022be <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d138      	bne.n	800232c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e0c2      	b.n	8002444 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d019      	beq.n	80022fa <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80022c6:	4b42      	ldr	r3, [pc, #264]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 80022c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022ca:	4b41      	ldr	r3, [pc, #260]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 80022cc:	2101      	movs	r1, #1
 80022ce:	430a      	orrs	r2, r1
 80022d0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d2:	f7ff faf7 	bl	80018c4 <HAL_GetTick>
 80022d6:	0003      	movs	r3, r0
 80022d8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80022dc:	f7ff faf2 	bl	80018c4 <HAL_GetTick>
 80022e0:	0002      	movs	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e0aa      	b.n	8002444 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80022ee:	4b38      	ldr	r3, [pc, #224]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 80022f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f2:	2202      	movs	r2, #2
 80022f4:	4013      	ands	r3, r2
 80022f6:	d0f1      	beq.n	80022dc <HAL_RCC_OscConfig+0x24c>
 80022f8:	e018      	b.n	800232c <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80022fa:	4b35      	ldr	r3, [pc, #212]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 80022fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022fe:	4b34      	ldr	r3, [pc, #208]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 8002300:	2101      	movs	r1, #1
 8002302:	438a      	bics	r2, r1
 8002304:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002306:	f7ff fadd 	bl	80018c4 <HAL_GetTick>
 800230a:	0003      	movs	r3, r0
 800230c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002310:	f7ff fad8 	bl	80018c4 <HAL_GetTick>
 8002314:	0002      	movs	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e090      	b.n	8002444 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002322:	4b2b      	ldr	r3, [pc, #172]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 8002324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002326:	2202      	movs	r2, #2
 8002328:	4013      	ands	r3, r2
 800232a:	d1f1      	bne.n	8002310 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2204      	movs	r2, #4
 8002332:	4013      	ands	r3, r2
 8002334:	d100      	bne.n	8002338 <HAL_RCC_OscConfig+0x2a8>
 8002336:	e084      	b.n	8002442 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002338:	230f      	movs	r3, #15
 800233a:	18fb      	adds	r3, r7, r3
 800233c:	2200      	movs	r2, #0
 800233e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002340:	4b23      	ldr	r3, [pc, #140]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	2238      	movs	r2, #56	; 0x38
 8002346:	4013      	ands	r3, r2
 8002348:	2b20      	cmp	r3, #32
 800234a:	d106      	bne.n	800235a <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d000      	beq.n	8002356 <HAL_RCC_OscConfig+0x2c6>
 8002354:	e075      	b.n	8002442 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e074      	b.n	8002444 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d106      	bne.n	8002370 <HAL_RCC_OscConfig+0x2e0>
 8002362:	4b1b      	ldr	r3, [pc, #108]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 8002364:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002366:	4b1a      	ldr	r3, [pc, #104]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 8002368:	2101      	movs	r1, #1
 800236a:	430a      	orrs	r2, r1
 800236c:	65da      	str	r2, [r3, #92]	; 0x5c
 800236e:	e01c      	b.n	80023aa <HAL_RCC_OscConfig+0x31a>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2b05      	cmp	r3, #5
 8002376:	d10c      	bne.n	8002392 <HAL_RCC_OscConfig+0x302>
 8002378:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 800237a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800237c:	4b14      	ldr	r3, [pc, #80]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 800237e:	2104      	movs	r1, #4
 8002380:	430a      	orrs	r2, r1
 8002382:	65da      	str	r2, [r3, #92]	; 0x5c
 8002384:	4b12      	ldr	r3, [pc, #72]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 8002386:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002388:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 800238a:	2101      	movs	r1, #1
 800238c:	430a      	orrs	r2, r1
 800238e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002390:	e00b      	b.n	80023aa <HAL_RCC_OscConfig+0x31a>
 8002392:	4b0f      	ldr	r3, [pc, #60]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 8002394:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002396:	4b0e      	ldr	r3, [pc, #56]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 8002398:	2101      	movs	r1, #1
 800239a:	438a      	bics	r2, r1
 800239c:	65da      	str	r2, [r3, #92]	; 0x5c
 800239e:	4b0c      	ldr	r3, [pc, #48]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 80023a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80023a2:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <HAL_RCC_OscConfig+0x340>)
 80023a4:	2104      	movs	r1, #4
 80023a6:	438a      	bics	r2, r1
 80023a8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d028      	beq.n	8002404 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b2:	f7ff fa87 	bl	80018c4 <HAL_GetTick>
 80023b6:	0003      	movs	r3, r0
 80023b8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80023ba:	e01d      	b.n	80023f8 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023bc:	f7ff fa82 	bl	80018c4 <HAL_GetTick>
 80023c0:	0002      	movs	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	4a0b      	ldr	r2, [pc, #44]	; (80023f4 <HAL_RCC_OscConfig+0x364>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d915      	bls.n	80023f8 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e039      	b.n	8002444 <HAL_RCC_OscConfig+0x3b4>
 80023d0:	40021000 	.word	0x40021000
 80023d4:	fffeffff 	.word	0xfffeffff
 80023d8:	fffbffff 	.word	0xfffbffff
 80023dc:	ffff80ff 	.word	0xffff80ff
 80023e0:	ffffc7ff 	.word	0xffffc7ff
 80023e4:	02dc6c00 	.word	0x02dc6c00
 80023e8:	20000018 	.word	0x20000018
 80023ec:	2000001c 	.word	0x2000001c
 80023f0:	fffffeff 	.word	0xfffffeff
 80023f4:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80023f8:	4b14      	ldr	r3, [pc, #80]	; (800244c <HAL_RCC_OscConfig+0x3bc>)
 80023fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fc:	2202      	movs	r2, #2
 80023fe:	4013      	ands	r3, r2
 8002400:	d0dc      	beq.n	80023bc <HAL_RCC_OscConfig+0x32c>
 8002402:	e013      	b.n	800242c <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002404:	f7ff fa5e 	bl	80018c4 <HAL_GetTick>
 8002408:	0003      	movs	r3, r0
 800240a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800240c:	e009      	b.n	8002422 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800240e:	f7ff fa59 	bl	80018c4 <HAL_GetTick>
 8002412:	0002      	movs	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	4a0d      	ldr	r2, [pc, #52]	; (8002450 <HAL_RCC_OscConfig+0x3c0>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e010      	b.n	8002444 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002422:	4b0a      	ldr	r3, [pc, #40]	; (800244c <HAL_RCC_OscConfig+0x3bc>)
 8002424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002426:	2202      	movs	r2, #2
 8002428:	4013      	ands	r3, r2
 800242a:	d1f0      	bne.n	800240e <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800242c:	230f      	movs	r3, #15
 800242e:	18fb      	adds	r3, r7, r3
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d105      	bne.n	8002442 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002436:	4b05      	ldr	r3, [pc, #20]	; (800244c <HAL_RCC_OscConfig+0x3bc>)
 8002438:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800243a:	4b04      	ldr	r3, [pc, #16]	; (800244c <HAL_RCC_OscConfig+0x3bc>)
 800243c:	4905      	ldr	r1, [pc, #20]	; (8002454 <HAL_RCC_OscConfig+0x3c4>)
 800243e:	400a      	ands	r2, r1
 8002440:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	0018      	movs	r0, r3
 8002446:	46bd      	mov	sp, r7
 8002448:	b006      	add	sp, #24
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40021000 	.word	0x40021000
 8002450:	00001388 	.word	0x00001388
 8002454:	efffffff 	.word	0xefffffff

08002458 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d101      	bne.n	800246c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e0e9      	b.n	8002640 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800246c:	4b76      	ldr	r3, [pc, #472]	; (8002648 <HAL_RCC_ClockConfig+0x1f0>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2207      	movs	r2, #7
 8002472:	4013      	ands	r3, r2
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d91e      	bls.n	80024b8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247a:	4b73      	ldr	r3, [pc, #460]	; (8002648 <HAL_RCC_ClockConfig+0x1f0>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2207      	movs	r2, #7
 8002480:	4393      	bics	r3, r2
 8002482:	0019      	movs	r1, r3
 8002484:	4b70      	ldr	r3, [pc, #448]	; (8002648 <HAL_RCC_ClockConfig+0x1f0>)
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800248c:	f7ff fa1a 	bl	80018c4 <HAL_GetTick>
 8002490:	0003      	movs	r3, r0
 8002492:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002494:	e009      	b.n	80024aa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002496:	f7ff fa15 	bl	80018c4 <HAL_GetTick>
 800249a:	0002      	movs	r2, r0
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	4a6a      	ldr	r2, [pc, #424]	; (800264c <HAL_RCC_ClockConfig+0x1f4>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e0ca      	b.n	8002640 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024aa:	4b67      	ldr	r3, [pc, #412]	; (8002648 <HAL_RCC_ClockConfig+0x1f0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2207      	movs	r2, #7
 80024b0:	4013      	ands	r3, r2
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d1ee      	bne.n	8002496 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2202      	movs	r2, #2
 80024be:	4013      	ands	r3, r2
 80024c0:	d017      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2204      	movs	r2, #4
 80024c8:	4013      	ands	r3, r2
 80024ca:	d008      	beq.n	80024de <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80024cc:	4b60      	ldr	r3, [pc, #384]	; (8002650 <HAL_RCC_ClockConfig+0x1f8>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	4a60      	ldr	r2, [pc, #384]	; (8002654 <HAL_RCC_ClockConfig+0x1fc>)
 80024d2:	401a      	ands	r2, r3
 80024d4:	4b5e      	ldr	r3, [pc, #376]	; (8002650 <HAL_RCC_ClockConfig+0x1f8>)
 80024d6:	21b0      	movs	r1, #176	; 0xb0
 80024d8:	0109      	lsls	r1, r1, #4
 80024da:	430a      	orrs	r2, r1
 80024dc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024de:	4b5c      	ldr	r3, [pc, #368]	; (8002650 <HAL_RCC_ClockConfig+0x1f8>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	4a5d      	ldr	r2, [pc, #372]	; (8002658 <HAL_RCC_ClockConfig+0x200>)
 80024e4:	4013      	ands	r3, r2
 80024e6:	0019      	movs	r1, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	4b58      	ldr	r3, [pc, #352]	; (8002650 <HAL_RCC_ClockConfig+0x1f8>)
 80024ee:	430a      	orrs	r2, r1
 80024f0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2201      	movs	r2, #1
 80024f8:	4013      	ands	r3, r2
 80024fa:	d055      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80024fc:	4b54      	ldr	r3, [pc, #336]	; (8002650 <HAL_RCC_ClockConfig+0x1f8>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	221c      	movs	r2, #28
 8002502:	4393      	bics	r3, r2
 8002504:	0019      	movs	r1, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689a      	ldr	r2, [r3, #8]
 800250a:	4b51      	ldr	r3, [pc, #324]	; (8002650 <HAL_RCC_ClockConfig+0x1f8>)
 800250c:	430a      	orrs	r2, r1
 800250e:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d107      	bne.n	8002528 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002518:	4b4d      	ldr	r3, [pc, #308]	; (8002650 <HAL_RCC_ClockConfig+0x1f8>)
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	2380      	movs	r3, #128	; 0x80
 800251e:	029b      	lsls	r3, r3, #10
 8002520:	4013      	ands	r3, r2
 8002522:	d11f      	bne.n	8002564 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e08b      	b.n	8002640 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d107      	bne.n	8002540 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002530:	4b47      	ldr	r3, [pc, #284]	; (8002650 <HAL_RCC_ClockConfig+0x1f8>)
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	2380      	movs	r3, #128	; 0x80
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	4013      	ands	r3, r2
 800253a:	d113      	bne.n	8002564 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e07f      	b.n	8002640 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b03      	cmp	r3, #3
 8002546:	d106      	bne.n	8002556 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002548:	4b41      	ldr	r3, [pc, #260]	; (8002650 <HAL_RCC_ClockConfig+0x1f8>)
 800254a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800254c:	2202      	movs	r2, #2
 800254e:	4013      	ands	r3, r2
 8002550:	d108      	bne.n	8002564 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e074      	b.n	8002640 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002556:	4b3e      	ldr	r3, [pc, #248]	; (8002650 <HAL_RCC_ClockConfig+0x1f8>)
 8002558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800255a:	2202      	movs	r2, #2
 800255c:	4013      	ands	r3, r2
 800255e:	d101      	bne.n	8002564 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e06d      	b.n	8002640 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002564:	4b3a      	ldr	r3, [pc, #232]	; (8002650 <HAL_RCC_ClockConfig+0x1f8>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	2207      	movs	r2, #7
 800256a:	4393      	bics	r3, r2
 800256c:	0019      	movs	r1, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	4b37      	ldr	r3, [pc, #220]	; (8002650 <HAL_RCC_ClockConfig+0x1f8>)
 8002574:	430a      	orrs	r2, r1
 8002576:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002578:	f7ff f9a4 	bl	80018c4 <HAL_GetTick>
 800257c:	0003      	movs	r3, r0
 800257e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002580:	e009      	b.n	8002596 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002582:	f7ff f99f 	bl	80018c4 <HAL_GetTick>
 8002586:	0002      	movs	r2, r0
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	4a2f      	ldr	r2, [pc, #188]	; (800264c <HAL_RCC_ClockConfig+0x1f4>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e054      	b.n	8002640 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002596:	4b2e      	ldr	r3, [pc, #184]	; (8002650 <HAL_RCC_ClockConfig+0x1f8>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	2238      	movs	r2, #56	; 0x38
 800259c:	401a      	ands	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d1ec      	bne.n	8002582 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025a8:	4b27      	ldr	r3, [pc, #156]	; (8002648 <HAL_RCC_ClockConfig+0x1f0>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2207      	movs	r2, #7
 80025ae:	4013      	ands	r3, r2
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d21e      	bcs.n	80025f4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b6:	4b24      	ldr	r3, [pc, #144]	; (8002648 <HAL_RCC_ClockConfig+0x1f0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2207      	movs	r2, #7
 80025bc:	4393      	bics	r3, r2
 80025be:	0019      	movs	r1, r3
 80025c0:	4b21      	ldr	r3, [pc, #132]	; (8002648 <HAL_RCC_ClockConfig+0x1f0>)
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025c8:	f7ff f97c 	bl	80018c4 <HAL_GetTick>
 80025cc:	0003      	movs	r3, r0
 80025ce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025d0:	e009      	b.n	80025e6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80025d2:	f7ff f977 	bl	80018c4 <HAL_GetTick>
 80025d6:	0002      	movs	r2, r0
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	4a1b      	ldr	r2, [pc, #108]	; (800264c <HAL_RCC_ClockConfig+0x1f4>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e02c      	b.n	8002640 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025e6:	4b18      	ldr	r3, [pc, #96]	; (8002648 <HAL_RCC_ClockConfig+0x1f0>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2207      	movs	r2, #7
 80025ec:	4013      	ands	r3, r2
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d1ee      	bne.n	80025d2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2204      	movs	r2, #4
 80025fa:	4013      	ands	r3, r2
 80025fc:	d009      	beq.n	8002612 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80025fe:	4b14      	ldr	r3, [pc, #80]	; (8002650 <HAL_RCC_ClockConfig+0x1f8>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	4a16      	ldr	r2, [pc, #88]	; (800265c <HAL_RCC_ClockConfig+0x204>)
 8002604:	4013      	ands	r3, r2
 8002606:	0019      	movs	r1, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	691a      	ldr	r2, [r3, #16]
 800260c:	4b10      	ldr	r3, [pc, #64]	; (8002650 <HAL_RCC_ClockConfig+0x1f8>)
 800260e:	430a      	orrs	r2, r1
 8002610:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002612:	f000 f82b 	bl	800266c <HAL_RCC_GetSysClockFreq>
 8002616:	0001      	movs	r1, r0
 8002618:	4b0d      	ldr	r3, [pc, #52]	; (8002650 <HAL_RCC_ClockConfig+0x1f8>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	0a1b      	lsrs	r3, r3, #8
 800261e:	220f      	movs	r2, #15
 8002620:	401a      	ands	r2, r3
 8002622:	4b0f      	ldr	r3, [pc, #60]	; (8002660 <HAL_RCC_ClockConfig+0x208>)
 8002624:	0092      	lsls	r2, r2, #2
 8002626:	58d3      	ldr	r3, [r2, r3]
 8002628:	221f      	movs	r2, #31
 800262a:	4013      	ands	r3, r2
 800262c:	000a      	movs	r2, r1
 800262e:	40da      	lsrs	r2, r3
 8002630:	4b0c      	ldr	r3, [pc, #48]	; (8002664 <HAL_RCC_ClockConfig+0x20c>)
 8002632:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002634:	4b0c      	ldr	r3, [pc, #48]	; (8002668 <HAL_RCC_ClockConfig+0x210>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	0018      	movs	r0, r3
 800263a:	f7ff f8e7 	bl	800180c <HAL_InitTick>
 800263e:	0003      	movs	r3, r0
}
 8002640:	0018      	movs	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	b004      	add	sp, #16
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40022000 	.word	0x40022000
 800264c:	00001388 	.word	0x00001388
 8002650:	40021000 	.word	0x40021000
 8002654:	ffff84ff 	.word	0xffff84ff
 8002658:	fffff0ff 	.word	0xfffff0ff
 800265c:	ffff8fff 	.word	0xffff8fff
 8002660:	08003b24 	.word	0x08003b24
 8002664:	20000018 	.word	0x20000018
 8002668:	2000001c 	.word	0x2000001c

0800266c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002672:	4b1c      	ldr	r3, [pc, #112]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x78>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	2238      	movs	r2, #56	; 0x38
 8002678:	4013      	ands	r3, r2
 800267a:	d10f      	bne.n	800269c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800267c:	4b19      	ldr	r3, [pc, #100]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x78>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	0adb      	lsrs	r3, r3, #11
 8002682:	2207      	movs	r2, #7
 8002684:	4013      	ands	r3, r2
 8002686:	2201      	movs	r2, #1
 8002688:	409a      	lsls	r2, r3
 800268a:	0013      	movs	r3, r2
 800268c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800268e:	6839      	ldr	r1, [r7, #0]
 8002690:	4815      	ldr	r0, [pc, #84]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x7c>)
 8002692:	f7fd fd39 	bl	8000108 <__udivsi3>
 8002696:	0003      	movs	r3, r0
 8002698:	607b      	str	r3, [r7, #4]
 800269a:	e01e      	b.n	80026da <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800269c:	4b11      	ldr	r3, [pc, #68]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x78>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	2238      	movs	r2, #56	; 0x38
 80026a2:	4013      	ands	r3, r2
 80026a4:	2b08      	cmp	r3, #8
 80026a6:	d102      	bne.n	80026ae <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026a8:	4b10      	ldr	r3, [pc, #64]	; (80026ec <HAL_RCC_GetSysClockFreq+0x80>)
 80026aa:	607b      	str	r3, [r7, #4]
 80026ac:	e015      	b.n	80026da <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80026ae:	4b0d      	ldr	r3, [pc, #52]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x78>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	2238      	movs	r2, #56	; 0x38
 80026b4:	4013      	ands	r3, r2
 80026b6:	2b20      	cmp	r3, #32
 80026b8:	d103      	bne.n	80026c2 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80026ba:	2380      	movs	r3, #128	; 0x80
 80026bc:	021b      	lsls	r3, r3, #8
 80026be:	607b      	str	r3, [r7, #4]
 80026c0:	e00b      	b.n	80026da <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80026c2:	4b08      	ldr	r3, [pc, #32]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x78>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	2238      	movs	r2, #56	; 0x38
 80026c8:	4013      	ands	r3, r2
 80026ca:	2b18      	cmp	r3, #24
 80026cc:	d103      	bne.n	80026d6 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80026ce:	23fa      	movs	r3, #250	; 0xfa
 80026d0:	01db      	lsls	r3, r3, #7
 80026d2:	607b      	str	r3, [r7, #4]
 80026d4:	e001      	b.n	80026da <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 80026da:	687b      	ldr	r3, [r7, #4]
}
 80026dc:	0018      	movs	r0, r3
 80026de:	46bd      	mov	sp, r7
 80026e0:	b002      	add	sp, #8
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40021000 	.word	0x40021000
 80026e8:	02dc6c00 	.word	0x02dc6c00
 80026ec:	007a1200 	.word	0x007a1200

080026f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026f4:	4b02      	ldr	r3, [pc, #8]	; (8002700 <HAL_RCC_GetHCLKFreq+0x10>)
 80026f6:	681b      	ldr	r3, [r3, #0]
}
 80026f8:	0018      	movs	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	46c0      	nop			; (mov r8, r8)
 8002700:	20000018 	.word	0x20000018

08002704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8002708:	f7ff fff2 	bl	80026f0 <HAL_RCC_GetHCLKFreq>
 800270c:	0001      	movs	r1, r0
 800270e:	4b07      	ldr	r3, [pc, #28]	; (800272c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	0b1b      	lsrs	r3, r3, #12
 8002714:	2207      	movs	r2, #7
 8002716:	401a      	ands	r2, r3
 8002718:	4b05      	ldr	r3, [pc, #20]	; (8002730 <HAL_RCC_GetPCLK1Freq+0x2c>)
 800271a:	0092      	lsls	r2, r2, #2
 800271c:	58d3      	ldr	r3, [r2, r3]
 800271e:	221f      	movs	r2, #31
 8002720:	4013      	ands	r3, r2
 8002722:	40d9      	lsrs	r1, r3
 8002724:	000b      	movs	r3, r1
}
 8002726:	0018      	movs	r0, r3
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40021000 	.word	0x40021000
 8002730:	08003b64 	.word	0x08003b64

08002734 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800273c:	2313      	movs	r3, #19
 800273e:	18fb      	adds	r3, r7, r3
 8002740:	2200      	movs	r2, #0
 8002742:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002744:	2312      	movs	r3, #18
 8002746:	18fb      	adds	r3, r7, r3
 8002748:	2200      	movs	r2, #0
 800274a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	2380      	movs	r3, #128	; 0x80
 8002752:	029b      	lsls	r3, r3, #10
 8002754:	4013      	ands	r3, r2
 8002756:	d100      	bne.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002758:	e079      	b.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800275a:	2011      	movs	r0, #17
 800275c:	183b      	adds	r3, r7, r0
 800275e:	2200      	movs	r2, #0
 8002760:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002762:	4b64      	ldr	r3, [pc, #400]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002764:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002766:	2380      	movs	r3, #128	; 0x80
 8002768:	055b      	lsls	r3, r3, #21
 800276a:	4013      	ands	r3, r2
 800276c:	d110      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800276e:	4b61      	ldr	r3, [pc, #388]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002770:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002772:	4b60      	ldr	r3, [pc, #384]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002774:	2180      	movs	r1, #128	; 0x80
 8002776:	0549      	lsls	r1, r1, #21
 8002778:	430a      	orrs	r2, r1
 800277a:	63da      	str	r2, [r3, #60]	; 0x3c
 800277c:	4b5d      	ldr	r3, [pc, #372]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800277e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002780:	2380      	movs	r3, #128	; 0x80
 8002782:	055b      	lsls	r3, r3, #21
 8002784:	4013      	ands	r3, r2
 8002786:	60bb      	str	r3, [r7, #8]
 8002788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800278a:	183b      	adds	r3, r7, r0
 800278c:	2201      	movs	r2, #1
 800278e:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8002790:	4b58      	ldr	r3, [pc, #352]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002792:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002794:	23c0      	movs	r3, #192	; 0xc0
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4013      	ands	r3, r2
 800279a:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d019      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d014      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 80027ac:	4b51      	ldr	r3, [pc, #324]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80027ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b0:	4a51      	ldr	r2, [pc, #324]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80027b2:	4013      	ands	r3, r2
 80027b4:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027b6:	4b4f      	ldr	r3, [pc, #316]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80027b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027ba:	4b4e      	ldr	r3, [pc, #312]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80027bc:	2180      	movs	r1, #128	; 0x80
 80027be:	0249      	lsls	r1, r1, #9
 80027c0:	430a      	orrs	r2, r1
 80027c2:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027c4:	4b4b      	ldr	r3, [pc, #300]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80027c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027c8:	4b4a      	ldr	r3, [pc, #296]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80027ca:	494c      	ldr	r1, [pc, #304]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80027cc:	400a      	ands	r2, r1
 80027ce:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 80027d0:	4b48      	ldr	r3, [pc, #288]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	2201      	movs	r2, #1
 80027da:	4013      	ands	r3, r2
 80027dc:	d016      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027de:	f7ff f871 	bl	80018c4 <HAL_GetTick>
 80027e2:	0003      	movs	r3, r0
 80027e4:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80027e6:	e00c      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027e8:	f7ff f86c 	bl	80018c4 <HAL_GetTick>
 80027ec:	0002      	movs	r2, r0
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	4a43      	ldr	r2, [pc, #268]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d904      	bls.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 80027f8:	2313      	movs	r3, #19
 80027fa:	18fb      	adds	r3, r7, r3
 80027fc:	2203      	movs	r2, #3
 80027fe:	701a      	strb	r2, [r3, #0]
          break;
 8002800:	e004      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002802:	4b3c      	ldr	r3, [pc, #240]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002806:	2202      	movs	r2, #2
 8002808:	4013      	ands	r3, r2
 800280a:	d0ed      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 800280c:	2313      	movs	r3, #19
 800280e:	18fb      	adds	r3, r7, r3
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10a      	bne.n	800282c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002816:	4b37      	ldr	r3, [pc, #220]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281a:	4a37      	ldr	r2, [pc, #220]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800281c:	4013      	ands	r3, r2
 800281e:	0019      	movs	r1, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	699a      	ldr	r2, [r3, #24]
 8002824:	4b33      	ldr	r3, [pc, #204]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002826:	430a      	orrs	r2, r1
 8002828:	65da      	str	r2, [r3, #92]	; 0x5c
 800282a:	e005      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800282c:	2312      	movs	r3, #18
 800282e:	18fb      	adds	r3, r7, r3
 8002830:	2213      	movs	r2, #19
 8002832:	18ba      	adds	r2, r7, r2
 8002834:	7812      	ldrb	r2, [r2, #0]
 8002836:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002838:	2311      	movs	r3, #17
 800283a:	18fb      	adds	r3, r7, r3
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d105      	bne.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002842:	4b2c      	ldr	r3, [pc, #176]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002844:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002846:	4b2b      	ldr	r3, [pc, #172]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002848:	492e      	ldr	r1, [pc, #184]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800284a:	400a      	ands	r2, r1
 800284c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2201      	movs	r2, #1
 8002854:	4013      	ands	r3, r2
 8002856:	d009      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002858:	4b26      	ldr	r3, [pc, #152]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800285a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285c:	2203      	movs	r2, #3
 800285e:	4393      	bics	r3, r2
 8002860:	0019      	movs	r1, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	4b23      	ldr	r3, [pc, #140]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002868:	430a      	orrs	r2, r1
 800286a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2240      	movs	r2, #64	; 0x40
 8002872:	4013      	ands	r3, r2
 8002874:	d009      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002876:	4b1f      	ldr	r3, [pc, #124]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287a:	4a23      	ldr	r2, [pc, #140]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800287c:	4013      	ands	r3, r2
 800287e:	0019      	movs	r1, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68da      	ldr	r2, [r3, #12]
 8002884:	4b1b      	ldr	r3, [pc, #108]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002886:	430a      	orrs	r2, r1
 8002888:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	2380      	movs	r3, #128	; 0x80
 8002890:	01db      	lsls	r3, r3, #7
 8002892:	4013      	ands	r3, r2
 8002894:	d008      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002896:	4b17      	ldr	r3, [pc, #92]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	0899      	lsrs	r1, r3, #2
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	695a      	ldr	r2, [r3, #20]
 80028a2:	4b14      	ldr	r3, [pc, #80]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028a4:	430a      	orrs	r2, r1
 80028a6:	655a      	str	r2, [r3, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	2380      	movs	r3, #128	; 0x80
 80028ae:	011b      	lsls	r3, r3, #4
 80028b0:	4013      	ands	r3, r2
 80028b2:	d009      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80028b4:	4b0f      	ldr	r3, [pc, #60]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b8:	4a14      	ldr	r2, [pc, #80]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	0019      	movs	r1, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691a      	ldr	r2, [r3, #16]
 80028c2:	4b0c      	ldr	r3, [pc, #48]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028c4:	430a      	orrs	r2, r1
 80028c6:	655a      	str	r2, [r3, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	da09      	bge.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 80028d0:	4b08      	ldr	r3, [pc, #32]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	22e0      	movs	r2, #224	; 0xe0
 80028d6:	4393      	bics	r3, r2
 80028d8:	0019      	movs	r1, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028e0:	430a      	orrs	r2, r1
 80028e2:	601a      	str	r2, [r3, #0]
  }
  return status;
 80028e4:	2312      	movs	r3, #18
 80028e6:	18fb      	adds	r3, r7, r3
 80028e8:	781b      	ldrb	r3, [r3, #0]
}
 80028ea:	0018      	movs	r0, r3
 80028ec:	46bd      	mov	sp, r7
 80028ee:	b006      	add	sp, #24
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	46c0      	nop			; (mov r8, r8)
 80028f4:	40021000 	.word	0x40021000
 80028f8:	fffffcff 	.word	0xfffffcff
 80028fc:	fffeffff 	.word	0xfffeffff
 8002900:	00001388 	.word	0x00001388
 8002904:	efffffff 	.word	0xefffffff
 8002908:	ffffcfff 	.word	0xffffcfff
 800290c:	ffff3fff 	.word	0xffff3fff

08002910 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e046      	b.n	80029b0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2288      	movs	r2, #136	; 0x88
 8002926:	589b      	ldr	r3, [r3, r2]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d107      	bne.n	800293c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2284      	movs	r2, #132	; 0x84
 8002930:	2100      	movs	r1, #0
 8002932:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	0018      	movs	r0, r3
 8002938:	f7fe fe32 	bl	80015a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2288      	movs	r2, #136	; 0x88
 8002940:	2124      	movs	r1, #36	; 0x24
 8002942:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2101      	movs	r1, #1
 8002950:	438a      	bics	r2, r1
 8002952:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002958:	2b00      	cmp	r3, #0
 800295a:	d003      	beq.n	8002964 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	0018      	movs	r0, r3
 8002960:	f000 fcec 	bl	800333c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	0018      	movs	r0, r3
 8002968:	f000 fb6a 	bl	8003040 <UART_SetConfig>
 800296c:	0003      	movs	r3, r0
 800296e:	2b01      	cmp	r3, #1
 8002970:	d101      	bne.n	8002976 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e01c      	b.n	80029b0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	490d      	ldr	r1, [pc, #52]	; (80029b8 <HAL_UART_Init+0xa8>)
 8002982:	400a      	ands	r2, r1
 8002984:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	212a      	movs	r1, #42	; 0x2a
 8002992:	438a      	bics	r2, r1
 8002994:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2101      	movs	r1, #1
 80029a2:	430a      	orrs	r2, r1
 80029a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	0018      	movs	r0, r3
 80029aa:	f000 fd7b 	bl	80034a4 <UART_CheckIdleState>
 80029ae:	0003      	movs	r3, r0
}
 80029b0:	0018      	movs	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	b002      	add	sp, #8
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	ffffb7ff 	.word	0xffffb7ff

080029bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029bc:	b5b0      	push	{r4, r5, r7, lr}
 80029be:	b0aa      	sub	sp, #168	; 0xa8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	22a4      	movs	r2, #164	; 0xa4
 80029cc:	18b9      	adds	r1, r7, r2
 80029ce:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	20a0      	movs	r0, #160	; 0xa0
 80029d8:	1839      	adds	r1, r7, r0
 80029da:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	249c      	movs	r4, #156	; 0x9c
 80029e4:	1939      	adds	r1, r7, r4
 80029e6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80029e8:	0011      	movs	r1, r2
 80029ea:	18bb      	adds	r3, r7, r2
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4aa2      	ldr	r2, [pc, #648]	; (8002c78 <HAL_UART_IRQHandler+0x2bc>)
 80029f0:	4013      	ands	r3, r2
 80029f2:	2298      	movs	r2, #152	; 0x98
 80029f4:	18bd      	adds	r5, r7, r2
 80029f6:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80029f8:	18bb      	adds	r3, r7, r2
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d11a      	bne.n	8002a36 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a00:	187b      	adds	r3, r7, r1
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2220      	movs	r2, #32
 8002a06:	4013      	ands	r3, r2
 8002a08:	d015      	beq.n	8002a36 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a0a:	183b      	adds	r3, r7, r0
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	4013      	ands	r3, r2
 8002a12:	d105      	bne.n	8002a20 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002a14:	193b      	adds	r3, r7, r4
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	2380      	movs	r3, #128	; 0x80
 8002a1a:	055b      	lsls	r3, r3, #21
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	d00a      	beq.n	8002a36 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d100      	bne.n	8002a2a <HAL_UART_IRQHandler+0x6e>
 8002a28:	e2dc      	b.n	8002fe4 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	0010      	movs	r0, r2
 8002a32:	4798      	blx	r3
      }
      return;
 8002a34:	e2d6      	b.n	8002fe4 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002a36:	2398      	movs	r3, #152	; 0x98
 8002a38:	18fb      	adds	r3, r7, r3
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d100      	bne.n	8002a42 <HAL_UART_IRQHandler+0x86>
 8002a40:	e122      	b.n	8002c88 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002a42:	239c      	movs	r3, #156	; 0x9c
 8002a44:	18fb      	adds	r3, r7, r3
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a8c      	ldr	r2, [pc, #560]	; (8002c7c <HAL_UART_IRQHandler+0x2c0>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d106      	bne.n	8002a5c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002a4e:	23a0      	movs	r3, #160	; 0xa0
 8002a50:	18fb      	adds	r3, r7, r3
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a8a      	ldr	r2, [pc, #552]	; (8002c80 <HAL_UART_IRQHandler+0x2c4>)
 8002a56:	4013      	ands	r3, r2
 8002a58:	d100      	bne.n	8002a5c <HAL_UART_IRQHandler+0xa0>
 8002a5a:	e115      	b.n	8002c88 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002a5c:	23a4      	movs	r3, #164	; 0xa4
 8002a5e:	18fb      	adds	r3, r7, r3
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2201      	movs	r2, #1
 8002a64:	4013      	ands	r3, r2
 8002a66:	d012      	beq.n	8002a8e <HAL_UART_IRQHandler+0xd2>
 8002a68:	23a0      	movs	r3, #160	; 0xa0
 8002a6a:	18fb      	adds	r3, r7, r3
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	2380      	movs	r3, #128	; 0x80
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	4013      	ands	r3, r2
 8002a74:	d00b      	beq.n	8002a8e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2290      	movs	r2, #144	; 0x90
 8002a82:	589b      	ldr	r3, [r3, r2]
 8002a84:	2201      	movs	r2, #1
 8002a86:	431a      	orrs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2190      	movs	r1, #144	; 0x90
 8002a8c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a8e:	23a4      	movs	r3, #164	; 0xa4
 8002a90:	18fb      	adds	r3, r7, r3
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2202      	movs	r2, #2
 8002a96:	4013      	ands	r3, r2
 8002a98:	d011      	beq.n	8002abe <HAL_UART_IRQHandler+0x102>
 8002a9a:	239c      	movs	r3, #156	; 0x9c
 8002a9c:	18fb      	adds	r3, r7, r3
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	d00b      	beq.n	8002abe <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2290      	movs	r2, #144	; 0x90
 8002ab2:	589b      	ldr	r3, [r3, r2]
 8002ab4:	2204      	movs	r2, #4
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2190      	movs	r1, #144	; 0x90
 8002abc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002abe:	23a4      	movs	r3, #164	; 0xa4
 8002ac0:	18fb      	adds	r3, r7, r3
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2204      	movs	r2, #4
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	d011      	beq.n	8002aee <HAL_UART_IRQHandler+0x132>
 8002aca:	239c      	movs	r3, #156	; 0x9c
 8002acc:	18fb      	adds	r3, r7, r3
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	d00b      	beq.n	8002aee <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2204      	movs	r2, #4
 8002adc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2290      	movs	r2, #144	; 0x90
 8002ae2:	589b      	ldr	r3, [r3, r2]
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2190      	movs	r1, #144	; 0x90
 8002aec:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002aee:	23a4      	movs	r3, #164	; 0xa4
 8002af0:	18fb      	adds	r3, r7, r3
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2208      	movs	r2, #8
 8002af6:	4013      	ands	r3, r2
 8002af8:	d017      	beq.n	8002b2a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002afa:	23a0      	movs	r3, #160	; 0xa0
 8002afc:	18fb      	adds	r3, r7, r3
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2220      	movs	r2, #32
 8002b02:	4013      	ands	r3, r2
 8002b04:	d105      	bne.n	8002b12 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002b06:	239c      	movs	r3, #156	; 0x9c
 8002b08:	18fb      	adds	r3, r7, r3
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a5b      	ldr	r2, [pc, #364]	; (8002c7c <HAL_UART_IRQHandler+0x2c0>)
 8002b0e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002b10:	d00b      	beq.n	8002b2a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2208      	movs	r2, #8
 8002b18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2290      	movs	r2, #144	; 0x90
 8002b1e:	589b      	ldr	r3, [r3, r2]
 8002b20:	2208      	movs	r2, #8
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2190      	movs	r1, #144	; 0x90
 8002b28:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002b2a:	23a4      	movs	r3, #164	; 0xa4
 8002b2c:	18fb      	adds	r3, r7, r3
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	2380      	movs	r3, #128	; 0x80
 8002b32:	011b      	lsls	r3, r3, #4
 8002b34:	4013      	ands	r3, r2
 8002b36:	d013      	beq.n	8002b60 <HAL_UART_IRQHandler+0x1a4>
 8002b38:	23a0      	movs	r3, #160	; 0xa0
 8002b3a:	18fb      	adds	r3, r7, r3
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	2380      	movs	r3, #128	; 0x80
 8002b40:	04db      	lsls	r3, r3, #19
 8002b42:	4013      	ands	r3, r2
 8002b44:	d00c      	beq.n	8002b60 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2280      	movs	r2, #128	; 0x80
 8002b4c:	0112      	lsls	r2, r2, #4
 8002b4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2290      	movs	r2, #144	; 0x90
 8002b54:	589b      	ldr	r3, [r3, r2]
 8002b56:	2220      	movs	r2, #32
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2190      	movs	r1, #144	; 0x90
 8002b5e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2290      	movs	r2, #144	; 0x90
 8002b64:	589b      	ldr	r3, [r3, r2]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d100      	bne.n	8002b6c <HAL_UART_IRQHandler+0x1b0>
 8002b6a:	e23d      	b.n	8002fe8 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002b6c:	23a4      	movs	r3, #164	; 0xa4
 8002b6e:	18fb      	adds	r3, r7, r3
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2220      	movs	r2, #32
 8002b74:	4013      	ands	r3, r2
 8002b76:	d015      	beq.n	8002ba4 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002b78:	23a0      	movs	r3, #160	; 0xa0
 8002b7a:	18fb      	adds	r3, r7, r3
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	4013      	ands	r3, r2
 8002b82:	d106      	bne.n	8002b92 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002b84:	239c      	movs	r3, #156	; 0x9c
 8002b86:	18fb      	adds	r3, r7, r3
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	2380      	movs	r3, #128	; 0x80
 8002b8c:	055b      	lsls	r3, r3, #21
 8002b8e:	4013      	ands	r3, r2
 8002b90:	d008      	beq.n	8002ba4 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d004      	beq.n	8002ba4 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	0010      	movs	r0, r2
 8002ba2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2290      	movs	r2, #144	; 0x90
 8002ba8:	589b      	ldr	r3, [r3, r2]
 8002baa:	2194      	movs	r1, #148	; 0x94
 8002bac:	187a      	adds	r2, r7, r1
 8002bae:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	2240      	movs	r2, #64	; 0x40
 8002bb8:	4013      	ands	r3, r2
 8002bba:	2b40      	cmp	r3, #64	; 0x40
 8002bbc:	d004      	beq.n	8002bc8 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002bbe:	187b      	adds	r3, r7, r1
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2228      	movs	r2, #40	; 0x28
 8002bc4:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002bc6:	d04c      	beq.n	8002c62 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	0018      	movs	r0, r3
 8002bcc:	f000 fd7e 	bl	80036cc <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	2240      	movs	r2, #64	; 0x40
 8002bd8:	4013      	ands	r3, r2
 8002bda:	2b40      	cmp	r3, #64	; 0x40
 8002bdc:	d13c      	bne.n	8002c58 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002bde:	f3ef 8310 	mrs	r3, PRIMASK
 8002be2:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002be4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002be6:	2090      	movs	r0, #144	; 0x90
 8002be8:	183a      	adds	r2, r7, r0
 8002bea:	6013      	str	r3, [r2, #0]
 8002bec:	2301      	movs	r3, #1
 8002bee:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bf2:	f383 8810 	msr	PRIMASK, r3
}
 8002bf6:	46c0      	nop			; (mov r8, r8)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689a      	ldr	r2, [r3, #8]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2140      	movs	r1, #64	; 0x40
 8002c04:	438a      	bics	r2, r1
 8002c06:	609a      	str	r2, [r3, #8]
 8002c08:	183b      	adds	r3, r7, r0
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c10:	f383 8810 	msr	PRIMASK, r3
}
 8002c14:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2280      	movs	r2, #128	; 0x80
 8002c1a:	589b      	ldr	r3, [r3, r2]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d016      	beq.n	8002c4e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2280      	movs	r2, #128	; 0x80
 8002c24:	589b      	ldr	r3, [r3, r2]
 8002c26:	4a17      	ldr	r2, [pc, #92]	; (8002c84 <HAL_UART_IRQHandler+0x2c8>)
 8002c28:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2280      	movs	r2, #128	; 0x80
 8002c2e:	589b      	ldr	r3, [r3, r2]
 8002c30:	0018      	movs	r0, r3
 8002c32:	f7fe ffb5 	bl	8001ba0 <HAL_DMA_Abort_IT>
 8002c36:	1e03      	subs	r3, r0, #0
 8002c38:	d01c      	beq.n	8002c74 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2280      	movs	r2, #128	; 0x80
 8002c3e:	589b      	ldr	r3, [r3, r2]
 8002c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	2180      	movs	r1, #128	; 0x80
 8002c46:	5852      	ldr	r2, [r2, r1]
 8002c48:	0010      	movs	r0, r2
 8002c4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c4c:	e012      	b.n	8002c74 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	0018      	movs	r0, r3
 8002c52:	f000 f9e1 	bl	8003018 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c56:	e00d      	b.n	8002c74 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	f000 f9dc 	bl	8003018 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c60:	e008      	b.n	8002c74 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	0018      	movs	r0, r3
 8002c66:	f000 f9d7 	bl	8003018 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2290      	movs	r2, #144	; 0x90
 8002c6e:	2100      	movs	r1, #0
 8002c70:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002c72:	e1b9      	b.n	8002fe8 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c74:	46c0      	nop			; (mov r8, r8)
    return;
 8002c76:	e1b7      	b.n	8002fe8 <HAL_UART_IRQHandler+0x62c>
 8002c78:	0000080f 	.word	0x0000080f
 8002c7c:	10000001 	.word	0x10000001
 8002c80:	04000120 	.word	0x04000120
 8002c84:	08003799 	.word	0x08003799

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d000      	beq.n	8002c92 <HAL_UART_IRQHandler+0x2d6>
 8002c90:	e13e      	b.n	8002f10 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002c92:	23a4      	movs	r3, #164	; 0xa4
 8002c94:	18fb      	adds	r3, r7, r3
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2210      	movs	r2, #16
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d100      	bne.n	8002ca0 <HAL_UART_IRQHandler+0x2e4>
 8002c9e:	e137      	b.n	8002f10 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002ca0:	23a0      	movs	r3, #160	; 0xa0
 8002ca2:	18fb      	adds	r3, r7, r3
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2210      	movs	r2, #16
 8002ca8:	4013      	ands	r3, r2
 8002caa:	d100      	bne.n	8002cae <HAL_UART_IRQHandler+0x2f2>
 8002cac:	e130      	b.n	8002f10 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2210      	movs	r2, #16
 8002cb4:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	2240      	movs	r2, #64	; 0x40
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	2b40      	cmp	r3, #64	; 0x40
 8002cc2:	d000      	beq.n	8002cc6 <HAL_UART_IRQHandler+0x30a>
 8002cc4:	e0a4      	b.n	8002e10 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2280      	movs	r2, #128	; 0x80
 8002cca:	589b      	ldr	r3, [r3, r2]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	217e      	movs	r1, #126	; 0x7e
 8002cd2:	187b      	adds	r3, r7, r1
 8002cd4:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002cd6:	187b      	adds	r3, r7, r1
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d100      	bne.n	8002ce0 <HAL_UART_IRQHandler+0x324>
 8002cde:	e185      	b.n	8002fec <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	225c      	movs	r2, #92	; 0x5c
 8002ce4:	5a9b      	ldrh	r3, [r3, r2]
 8002ce6:	187a      	adds	r2, r7, r1
 8002ce8:	8812      	ldrh	r2, [r2, #0]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d300      	bcc.n	8002cf0 <HAL_UART_IRQHandler+0x334>
 8002cee:	e17d      	b.n	8002fec <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	187a      	adds	r2, r7, r1
 8002cf4:	215e      	movs	r1, #94	; 0x5e
 8002cf6:	8812      	ldrh	r2, [r2, #0]
 8002cf8:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2280      	movs	r2, #128	; 0x80
 8002cfe:	589b      	ldr	r3, [r3, r2]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2220      	movs	r2, #32
 8002d06:	4013      	ands	r3, r2
 8002d08:	d170      	bne.n	8002dec <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002d0a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d0e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d12:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d14:	2301      	movs	r3, #1
 8002d16:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d1a:	f383 8810 	msr	PRIMASK, r3
}
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	49b4      	ldr	r1, [pc, #720]	; (8002ffc <HAL_UART_IRQHandler+0x640>)
 8002d2c:	400a      	ands	r2, r1
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d32:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d36:	f383 8810 	msr	PRIMASK, r3
}
 8002d3a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002d3c:	f3ef 8310 	mrs	r3, PRIMASK
 8002d40:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d44:	677b      	str	r3, [r7, #116]	; 0x74
 8002d46:	2301      	movs	r3, #1
 8002d48:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d4c:	f383 8810 	msr	PRIMASK, r3
}
 8002d50:	46c0      	nop			; (mov r8, r8)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	438a      	bics	r2, r1
 8002d60:	609a      	str	r2, [r3, #8]
 8002d62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d64:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d68:	f383 8810 	msr	PRIMASK, r3
}
 8002d6c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002d6e:	f3ef 8310 	mrs	r3, PRIMASK
 8002d72:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002d74:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d76:	673b      	str	r3, [r7, #112]	; 0x70
 8002d78:	2301      	movs	r3, #1
 8002d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d7e:	f383 8810 	msr	PRIMASK, r3
}
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2140      	movs	r1, #64	; 0x40
 8002d90:	438a      	bics	r2, r1
 8002d92:	609a      	str	r2, [r3, #8]
 8002d94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d96:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d9a:	f383 8810 	msr	PRIMASK, r3
}
 8002d9e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	228c      	movs	r2, #140	; 0x8c
 8002da4:	2120      	movs	r1, #32
 8002da6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002dae:	f3ef 8310 	mrs	r3, PRIMASK
 8002db2:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002db4:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002db6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002db8:	2301      	movs	r3, #1
 8002dba:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dbe:	f383 8810 	msr	PRIMASK, r3
}
 8002dc2:	46c0      	nop			; (mov r8, r8)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2110      	movs	r1, #16
 8002dd0:	438a      	bics	r2, r1
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dd6:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dda:	f383 8810 	msr	PRIMASK, r3
}
 8002dde:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2280      	movs	r2, #128	; 0x80
 8002de4:	589b      	ldr	r3, [r3, r2]
 8002de6:	0018      	movs	r0, r3
 8002de8:	f7fe fe78 	bl	8001adc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2202      	movs	r2, #2
 8002df0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	225c      	movs	r2, #92	; 0x5c
 8002df6:	5a9a      	ldrh	r2, [r3, r2]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	215e      	movs	r1, #94	; 0x5e
 8002dfc:	5a5b      	ldrh	r3, [r3, r1]
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	0011      	movs	r1, r2
 8002e08:	0018      	movs	r0, r3
 8002e0a:	f000 f90d 	bl	8003028 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e0e:	e0ed      	b.n	8002fec <HAL_UART_IRQHandler+0x630>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	225c      	movs	r2, #92	; 0x5c
 8002e14:	5a99      	ldrh	r1, [r3, r2]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	225e      	movs	r2, #94	; 0x5e
 8002e1a:	5a9b      	ldrh	r3, [r3, r2]
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	208e      	movs	r0, #142	; 0x8e
 8002e20:	183b      	adds	r3, r7, r0
 8002e22:	1a8a      	subs	r2, r1, r2
 8002e24:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	225e      	movs	r2, #94	; 0x5e
 8002e2a:	5a9b      	ldrh	r3, [r3, r2]
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d100      	bne.n	8002e34 <HAL_UART_IRQHandler+0x478>
 8002e32:	e0dd      	b.n	8002ff0 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8002e34:	183b      	adds	r3, r7, r0
 8002e36:	881b      	ldrh	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d100      	bne.n	8002e3e <HAL_UART_IRQHandler+0x482>
 8002e3c:	e0d8      	b.n	8002ff0 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002e3e:	f3ef 8310 	mrs	r3, PRIMASK
 8002e42:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e44:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002e46:	2488      	movs	r4, #136	; 0x88
 8002e48:	193a      	adds	r2, r7, r4
 8002e4a:	6013      	str	r3, [r2, #0]
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	f383 8810 	msr	PRIMASK, r3
}
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4967      	ldr	r1, [pc, #412]	; (8003000 <HAL_UART_IRQHandler+0x644>)
 8002e64:	400a      	ands	r2, r1
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	193b      	adds	r3, r7, r4
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	f383 8810 	msr	PRIMASK, r3
}
 8002e74:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002e76:	f3ef 8310 	mrs	r3, PRIMASK
 8002e7a:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e7c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002e7e:	2484      	movs	r4, #132	; 0x84
 8002e80:	193a      	adds	r2, r7, r4
 8002e82:	6013      	str	r3, [r2, #0]
 8002e84:	2301      	movs	r3, #1
 8002e86:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	f383 8810 	msr	PRIMASK, r3
}
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	495a      	ldr	r1, [pc, #360]	; (8003004 <HAL_UART_IRQHandler+0x648>)
 8002e9c:	400a      	ands	r2, r1
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	193b      	adds	r3, r7, r4
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
 8002ea8:	f383 8810 	msr	PRIMASK, r3
}
 8002eac:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	228c      	movs	r2, #140	; 0x8c
 8002eb2:	2120      	movs	r1, #32
 8002eb4:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002ec2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ec6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eca:	2480      	movs	r4, #128	; 0x80
 8002ecc:	193a      	adds	r2, r7, r4
 8002ece:	6013      	str	r3, [r2, #0]
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed6:	f383 8810 	msr	PRIMASK, r3
}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2110      	movs	r1, #16
 8002ee8:	438a      	bics	r2, r1
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	193b      	adds	r3, r7, r4
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef4:	f383 8810 	msr	PRIMASK, r3
}
 8002ef8:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2202      	movs	r2, #2
 8002efe:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f00:	183b      	adds	r3, r7, r0
 8002f02:	881a      	ldrh	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	0011      	movs	r1, r2
 8002f08:	0018      	movs	r0, r3
 8002f0a:	f000 f88d 	bl	8003028 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f0e:	e06f      	b.n	8002ff0 <HAL_UART_IRQHandler+0x634>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002f10:	23a4      	movs	r3, #164	; 0xa4
 8002f12:	18fb      	adds	r3, r7, r3
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	2380      	movs	r3, #128	; 0x80
 8002f18:	035b      	lsls	r3, r3, #13
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	d010      	beq.n	8002f40 <HAL_UART_IRQHandler+0x584>
 8002f1e:	239c      	movs	r3, #156	; 0x9c
 8002f20:	18fb      	adds	r3, r7, r3
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	2380      	movs	r3, #128	; 0x80
 8002f26:	03db      	lsls	r3, r3, #15
 8002f28:	4013      	ands	r3, r2
 8002f2a:	d009      	beq.n	8002f40 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2280      	movs	r2, #128	; 0x80
 8002f32:	0352      	lsls	r2, r2, #13
 8002f34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	0018      	movs	r0, r3
 8002f3a:	f000 fc70 	bl	800381e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f3e:	e05a      	b.n	8002ff6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002f40:	23a4      	movs	r3, #164	; 0xa4
 8002f42:	18fb      	adds	r3, r7, r3
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2280      	movs	r2, #128	; 0x80
 8002f48:	4013      	ands	r3, r2
 8002f4a:	d016      	beq.n	8002f7a <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002f4c:	23a0      	movs	r3, #160	; 0xa0
 8002f4e:	18fb      	adds	r3, r7, r3
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2280      	movs	r2, #128	; 0x80
 8002f54:	4013      	ands	r3, r2
 8002f56:	d106      	bne.n	8002f66 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002f58:	239c      	movs	r3, #156	; 0x9c
 8002f5a:	18fb      	adds	r3, r7, r3
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	2380      	movs	r3, #128	; 0x80
 8002f60:	041b      	lsls	r3, r3, #16
 8002f62:	4013      	ands	r3, r2
 8002f64:	d009      	beq.n	8002f7a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d042      	beq.n	8002ff4 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	0010      	movs	r0, r2
 8002f76:	4798      	blx	r3
    }
    return;
 8002f78:	e03c      	b.n	8002ff4 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002f7a:	23a4      	movs	r3, #164	; 0xa4
 8002f7c:	18fb      	adds	r3, r7, r3
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2240      	movs	r2, #64	; 0x40
 8002f82:	4013      	ands	r3, r2
 8002f84:	d00a      	beq.n	8002f9c <HAL_UART_IRQHandler+0x5e0>
 8002f86:	23a0      	movs	r3, #160	; 0xa0
 8002f88:	18fb      	adds	r3, r7, r3
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2240      	movs	r2, #64	; 0x40
 8002f8e:	4013      	ands	r3, r2
 8002f90:	d004      	beq.n	8002f9c <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	0018      	movs	r0, r3
 8002f96:	f000 fc16 	bl	80037c6 <UART_EndTransmit_IT>
    return;
 8002f9a:	e02c      	b.n	8002ff6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002f9c:	23a4      	movs	r3, #164	; 0xa4
 8002f9e:	18fb      	adds	r3, r7, r3
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	2380      	movs	r3, #128	; 0x80
 8002fa4:	041b      	lsls	r3, r3, #16
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	d00b      	beq.n	8002fc2 <HAL_UART_IRQHandler+0x606>
 8002faa:	23a0      	movs	r3, #160	; 0xa0
 8002fac:	18fb      	adds	r3, r7, r3
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	2380      	movs	r3, #128	; 0x80
 8002fb2:	05db      	lsls	r3, r3, #23
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	d004      	beq.n	8002fc2 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	0018      	movs	r0, r3
 8002fbc:	f000 fc3f 	bl	800383e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002fc0:	e019      	b.n	8002ff6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002fc2:	23a4      	movs	r3, #164	; 0xa4
 8002fc4:	18fb      	adds	r3, r7, r3
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	2380      	movs	r3, #128	; 0x80
 8002fca:	045b      	lsls	r3, r3, #17
 8002fcc:	4013      	ands	r3, r2
 8002fce:	d012      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x63a>
 8002fd0:	23a0      	movs	r3, #160	; 0xa0
 8002fd2:	18fb      	adds	r3, r7, r3
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	da0d      	bge.n	8002ff6 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f000 fc26 	bl	800382e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002fe2:	e008      	b.n	8002ff6 <HAL_UART_IRQHandler+0x63a>
      return;
 8002fe4:	46c0      	nop			; (mov r8, r8)
 8002fe6:	e006      	b.n	8002ff6 <HAL_UART_IRQHandler+0x63a>
    return;
 8002fe8:	46c0      	nop			; (mov r8, r8)
 8002fea:	e004      	b.n	8002ff6 <HAL_UART_IRQHandler+0x63a>
      return;
 8002fec:	46c0      	nop			; (mov r8, r8)
 8002fee:	e002      	b.n	8002ff6 <HAL_UART_IRQHandler+0x63a>
      return;
 8002ff0:	46c0      	nop			; (mov r8, r8)
 8002ff2:	e000      	b.n	8002ff6 <HAL_UART_IRQHandler+0x63a>
    return;
 8002ff4:	46c0      	nop			; (mov r8, r8)
  }
}
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	b02a      	add	sp, #168	; 0xa8
 8002ffa:	bdb0      	pop	{r4, r5, r7, pc}
 8002ffc:	fffffeff 	.word	0xfffffeff
 8003000:	fffffedf 	.word	0xfffffedf
 8003004:	effffffe 	.word	0xeffffffe

08003008 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003010:	46c0      	nop			; (mov r8, r8)
 8003012:	46bd      	mov	sp, r7
 8003014:	b002      	add	sp, #8
 8003016:	bd80      	pop	{r7, pc}

08003018 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003020:	46c0      	nop			; (mov r8, r8)
 8003022:	46bd      	mov	sp, r7
 8003024:	b002      	add	sp, #8
 8003026:	bd80      	pop	{r7, pc}

08003028 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	000a      	movs	r2, r1
 8003032:	1cbb      	adds	r3, r7, #2
 8003034:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	46bd      	mov	sp, r7
 800303a:	b002      	add	sp, #8
 800303c:	bd80      	pop	{r7, pc}
	...

08003040 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b088      	sub	sp, #32
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003048:	231e      	movs	r3, #30
 800304a:	18fb      	adds	r3, r7, r3
 800304c:	2200      	movs	r2, #0
 800304e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	431a      	orrs	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	69db      	ldr	r3, [r3, #28]
 8003064:	4313      	orrs	r3, r2
 8003066:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4aab      	ldr	r2, [pc, #684]	; (800331c <UART_SetConfig+0x2dc>)
 8003070:	4013      	ands	r3, r2
 8003072:	0019      	movs	r1, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	430a      	orrs	r2, r1
 800307c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	4aa6      	ldr	r2, [pc, #664]	; (8003320 <UART_SetConfig+0x2e0>)
 8003086:	4013      	ands	r3, r2
 8003088:	0019      	movs	r1, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68da      	ldr	r2, [r3, #12]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	4a9d      	ldr	r2, [pc, #628]	; (8003324 <UART_SetConfig+0x2e4>)
 80030ae:	4013      	ands	r3, r2
 80030b0:	0019      	movs	r1, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c2:	220f      	movs	r2, #15
 80030c4:	4393      	bics	r3, r2
 80030c6:	0019      	movs	r1, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a93      	ldr	r2, [pc, #588]	; (8003328 <UART_SetConfig+0x2e8>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d127      	bne.n	800312e <UART_SetConfig+0xee>
 80030de:	4b93      	ldr	r3, [pc, #588]	; (800332c <UART_SetConfig+0x2ec>)
 80030e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e2:	2203      	movs	r2, #3
 80030e4:	4013      	ands	r3, r2
 80030e6:	2b03      	cmp	r3, #3
 80030e8:	d017      	beq.n	800311a <UART_SetConfig+0xda>
 80030ea:	d81b      	bhi.n	8003124 <UART_SetConfig+0xe4>
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d00a      	beq.n	8003106 <UART_SetConfig+0xc6>
 80030f0:	d818      	bhi.n	8003124 <UART_SetConfig+0xe4>
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d002      	beq.n	80030fc <UART_SetConfig+0xbc>
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d00a      	beq.n	8003110 <UART_SetConfig+0xd0>
 80030fa:	e013      	b.n	8003124 <UART_SetConfig+0xe4>
 80030fc:	231f      	movs	r3, #31
 80030fe:	18fb      	adds	r3, r7, r3
 8003100:	2200      	movs	r2, #0
 8003102:	701a      	strb	r2, [r3, #0]
 8003104:	e021      	b.n	800314a <UART_SetConfig+0x10a>
 8003106:	231f      	movs	r3, #31
 8003108:	18fb      	adds	r3, r7, r3
 800310a:	2202      	movs	r2, #2
 800310c:	701a      	strb	r2, [r3, #0]
 800310e:	e01c      	b.n	800314a <UART_SetConfig+0x10a>
 8003110:	231f      	movs	r3, #31
 8003112:	18fb      	adds	r3, r7, r3
 8003114:	2204      	movs	r2, #4
 8003116:	701a      	strb	r2, [r3, #0]
 8003118:	e017      	b.n	800314a <UART_SetConfig+0x10a>
 800311a:	231f      	movs	r3, #31
 800311c:	18fb      	adds	r3, r7, r3
 800311e:	2208      	movs	r2, #8
 8003120:	701a      	strb	r2, [r3, #0]
 8003122:	e012      	b.n	800314a <UART_SetConfig+0x10a>
 8003124:	231f      	movs	r3, #31
 8003126:	18fb      	adds	r3, r7, r3
 8003128:	2210      	movs	r2, #16
 800312a:	701a      	strb	r2, [r3, #0]
 800312c:	e00d      	b.n	800314a <UART_SetConfig+0x10a>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a7f      	ldr	r2, [pc, #508]	; (8003330 <UART_SetConfig+0x2f0>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d104      	bne.n	8003142 <UART_SetConfig+0x102>
 8003138:	231f      	movs	r3, #31
 800313a:	18fb      	adds	r3, r7, r3
 800313c:	2200      	movs	r2, #0
 800313e:	701a      	strb	r2, [r3, #0]
 8003140:	e003      	b.n	800314a <UART_SetConfig+0x10a>
 8003142:	231f      	movs	r3, #31
 8003144:	18fb      	adds	r3, r7, r3
 8003146:	2210      	movs	r2, #16
 8003148:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	69da      	ldr	r2, [r3, #28]
 800314e:	2380      	movs	r3, #128	; 0x80
 8003150:	021b      	lsls	r3, r3, #8
 8003152:	429a      	cmp	r2, r3
 8003154:	d000      	beq.n	8003158 <UART_SetConfig+0x118>
 8003156:	e06f      	b.n	8003238 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8003158:	231f      	movs	r3, #31
 800315a:	18fb      	adds	r3, r7, r3
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	2b08      	cmp	r3, #8
 8003160:	d01f      	beq.n	80031a2 <UART_SetConfig+0x162>
 8003162:	dc22      	bgt.n	80031aa <UART_SetConfig+0x16a>
 8003164:	2b04      	cmp	r3, #4
 8003166:	d017      	beq.n	8003198 <UART_SetConfig+0x158>
 8003168:	dc1f      	bgt.n	80031aa <UART_SetConfig+0x16a>
 800316a:	2b00      	cmp	r3, #0
 800316c:	d002      	beq.n	8003174 <UART_SetConfig+0x134>
 800316e:	2b02      	cmp	r3, #2
 8003170:	d005      	beq.n	800317e <UART_SetConfig+0x13e>
 8003172:	e01a      	b.n	80031aa <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003174:	f7ff fac6 	bl	8002704 <HAL_RCC_GetPCLK1Freq>
 8003178:	0003      	movs	r3, r0
 800317a:	61bb      	str	r3, [r7, #24]
        break;
 800317c:	e01c      	b.n	80031b8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800317e:	4b6b      	ldr	r3, [pc, #428]	; (800332c <UART_SetConfig+0x2ec>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	095b      	lsrs	r3, r3, #5
 8003184:	2207      	movs	r2, #7
 8003186:	4013      	ands	r3, r2
 8003188:	3301      	adds	r3, #1
 800318a:	0019      	movs	r1, r3
 800318c:	4869      	ldr	r0, [pc, #420]	; (8003334 <UART_SetConfig+0x2f4>)
 800318e:	f7fc ffbb 	bl	8000108 <__udivsi3>
 8003192:	0003      	movs	r3, r0
 8003194:	61bb      	str	r3, [r7, #24]
        break;
 8003196:	e00f      	b.n	80031b8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003198:	f7ff fa68 	bl	800266c <HAL_RCC_GetSysClockFreq>
 800319c:	0003      	movs	r3, r0
 800319e:	61bb      	str	r3, [r7, #24]
        break;
 80031a0:	e00a      	b.n	80031b8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031a2:	2380      	movs	r3, #128	; 0x80
 80031a4:	021b      	lsls	r3, r3, #8
 80031a6:	61bb      	str	r3, [r7, #24]
        break;
 80031a8:	e006      	b.n	80031b8 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 80031aa:	2300      	movs	r3, #0
 80031ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031ae:	231e      	movs	r3, #30
 80031b0:	18fb      	adds	r3, r7, r3
 80031b2:	2201      	movs	r2, #1
 80031b4:	701a      	strb	r2, [r3, #0]
        break;
 80031b6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d100      	bne.n	80031c0 <UART_SetConfig+0x180>
 80031be:	e097      	b.n	80032f0 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031c4:	4b5c      	ldr	r3, [pc, #368]	; (8003338 <UART_SetConfig+0x2f8>)
 80031c6:	0052      	lsls	r2, r2, #1
 80031c8:	5ad3      	ldrh	r3, [r2, r3]
 80031ca:	0019      	movs	r1, r3
 80031cc:	69b8      	ldr	r0, [r7, #24]
 80031ce:	f7fc ff9b 	bl	8000108 <__udivsi3>
 80031d2:	0003      	movs	r3, r0
 80031d4:	005a      	lsls	r2, r3, #1
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	085b      	lsrs	r3, r3, #1
 80031dc:	18d2      	adds	r2, r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	0019      	movs	r1, r3
 80031e4:	0010      	movs	r0, r2
 80031e6:	f7fc ff8f 	bl	8000108 <__udivsi3>
 80031ea:	0003      	movs	r3, r0
 80031ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	2b0f      	cmp	r3, #15
 80031f2:	d91c      	bls.n	800322e <UART_SetConfig+0x1ee>
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	2380      	movs	r3, #128	; 0x80
 80031f8:	025b      	lsls	r3, r3, #9
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d217      	bcs.n	800322e <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	b29a      	uxth	r2, r3
 8003202:	200e      	movs	r0, #14
 8003204:	183b      	adds	r3, r7, r0
 8003206:	210f      	movs	r1, #15
 8003208:	438a      	bics	r2, r1
 800320a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	085b      	lsrs	r3, r3, #1
 8003210:	b29b      	uxth	r3, r3
 8003212:	2207      	movs	r2, #7
 8003214:	4013      	ands	r3, r2
 8003216:	b299      	uxth	r1, r3
 8003218:	183b      	adds	r3, r7, r0
 800321a:	183a      	adds	r2, r7, r0
 800321c:	8812      	ldrh	r2, [r2, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	183a      	adds	r2, r7, r0
 8003228:	8812      	ldrh	r2, [r2, #0]
 800322a:	60da      	str	r2, [r3, #12]
 800322c:	e060      	b.n	80032f0 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800322e:	231e      	movs	r3, #30
 8003230:	18fb      	adds	r3, r7, r3
 8003232:	2201      	movs	r2, #1
 8003234:	701a      	strb	r2, [r3, #0]
 8003236:	e05b      	b.n	80032f0 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003238:	231f      	movs	r3, #31
 800323a:	18fb      	adds	r3, r7, r3
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	2b08      	cmp	r3, #8
 8003240:	d01f      	beq.n	8003282 <UART_SetConfig+0x242>
 8003242:	dc22      	bgt.n	800328a <UART_SetConfig+0x24a>
 8003244:	2b04      	cmp	r3, #4
 8003246:	d017      	beq.n	8003278 <UART_SetConfig+0x238>
 8003248:	dc1f      	bgt.n	800328a <UART_SetConfig+0x24a>
 800324a:	2b00      	cmp	r3, #0
 800324c:	d002      	beq.n	8003254 <UART_SetConfig+0x214>
 800324e:	2b02      	cmp	r3, #2
 8003250:	d005      	beq.n	800325e <UART_SetConfig+0x21e>
 8003252:	e01a      	b.n	800328a <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003254:	f7ff fa56 	bl	8002704 <HAL_RCC_GetPCLK1Freq>
 8003258:	0003      	movs	r3, r0
 800325a:	61bb      	str	r3, [r7, #24]
        break;
 800325c:	e01c      	b.n	8003298 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800325e:	4b33      	ldr	r3, [pc, #204]	; (800332c <UART_SetConfig+0x2ec>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	095b      	lsrs	r3, r3, #5
 8003264:	2207      	movs	r2, #7
 8003266:	4013      	ands	r3, r2
 8003268:	3301      	adds	r3, #1
 800326a:	0019      	movs	r1, r3
 800326c:	4831      	ldr	r0, [pc, #196]	; (8003334 <UART_SetConfig+0x2f4>)
 800326e:	f7fc ff4b 	bl	8000108 <__udivsi3>
 8003272:	0003      	movs	r3, r0
 8003274:	61bb      	str	r3, [r7, #24]
        break;
 8003276:	e00f      	b.n	8003298 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003278:	f7ff f9f8 	bl	800266c <HAL_RCC_GetSysClockFreq>
 800327c:	0003      	movs	r3, r0
 800327e:	61bb      	str	r3, [r7, #24]
        break;
 8003280:	e00a      	b.n	8003298 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003282:	2380      	movs	r3, #128	; 0x80
 8003284:	021b      	lsls	r3, r3, #8
 8003286:	61bb      	str	r3, [r7, #24]
        break;
 8003288:	e006      	b.n	8003298 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 800328a:	2300      	movs	r3, #0
 800328c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800328e:	231e      	movs	r3, #30
 8003290:	18fb      	adds	r3, r7, r3
 8003292:	2201      	movs	r2, #1
 8003294:	701a      	strb	r2, [r3, #0]
        break;
 8003296:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d028      	beq.n	80032f0 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032a2:	4b25      	ldr	r3, [pc, #148]	; (8003338 <UART_SetConfig+0x2f8>)
 80032a4:	0052      	lsls	r2, r2, #1
 80032a6:	5ad3      	ldrh	r3, [r2, r3]
 80032a8:	0019      	movs	r1, r3
 80032aa:	69b8      	ldr	r0, [r7, #24]
 80032ac:	f7fc ff2c 	bl	8000108 <__udivsi3>
 80032b0:	0003      	movs	r3, r0
 80032b2:	001a      	movs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	085b      	lsrs	r3, r3, #1
 80032ba:	18d2      	adds	r2, r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	0019      	movs	r1, r3
 80032c2:	0010      	movs	r0, r2
 80032c4:	f7fc ff20 	bl	8000108 <__udivsi3>
 80032c8:	0003      	movs	r3, r0
 80032ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	2b0f      	cmp	r3, #15
 80032d0:	d90a      	bls.n	80032e8 <UART_SetConfig+0x2a8>
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	2380      	movs	r3, #128	; 0x80
 80032d6:	025b      	lsls	r3, r3, #9
 80032d8:	429a      	cmp	r2, r3
 80032da:	d205      	bcs.n	80032e8 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	b29a      	uxth	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	60da      	str	r2, [r3, #12]
 80032e6:	e003      	b.n	80032f0 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80032e8:	231e      	movs	r3, #30
 80032ea:	18fb      	adds	r3, r7, r3
 80032ec:	2201      	movs	r2, #1
 80032ee:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	226a      	movs	r2, #106	; 0x6a
 80032f4:	2101      	movs	r1, #1
 80032f6:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2268      	movs	r2, #104	; 0x68
 80032fc:	2101      	movs	r1, #1
 80032fe:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800330c:	231e      	movs	r3, #30
 800330e:	18fb      	adds	r3, r7, r3
 8003310:	781b      	ldrb	r3, [r3, #0]
}
 8003312:	0018      	movs	r0, r3
 8003314:	46bd      	mov	sp, r7
 8003316:	b008      	add	sp, #32
 8003318:	bd80      	pop	{r7, pc}
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	cfff69f3 	.word	0xcfff69f3
 8003320:	ffffcfff 	.word	0xffffcfff
 8003324:	11fff4ff 	.word	0x11fff4ff
 8003328:	40013800 	.word	0x40013800
 800332c:	40021000 	.word	0x40021000
 8003330:	40004400 	.word	0x40004400
 8003334:	02dc6c00 	.word	0x02dc6c00
 8003338:	08003b84 	.word	0x08003b84

0800333c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003348:	2208      	movs	r2, #8
 800334a:	4013      	ands	r3, r2
 800334c:	d00b      	beq.n	8003366 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	4a4a      	ldr	r2, [pc, #296]	; (8003480 <UART_AdvFeatureConfig+0x144>)
 8003356:	4013      	ands	r3, r2
 8003358:	0019      	movs	r1, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336a:	2201      	movs	r2, #1
 800336c:	4013      	ands	r3, r2
 800336e:	d00b      	beq.n	8003388 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	4a43      	ldr	r2, [pc, #268]	; (8003484 <UART_AdvFeatureConfig+0x148>)
 8003378:	4013      	ands	r3, r2
 800337a:	0019      	movs	r1, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338c:	2202      	movs	r2, #2
 800338e:	4013      	ands	r3, r2
 8003390:	d00b      	beq.n	80033aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	4a3b      	ldr	r2, [pc, #236]	; (8003488 <UART_AdvFeatureConfig+0x14c>)
 800339a:	4013      	ands	r3, r2
 800339c:	0019      	movs	r1, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ae:	2204      	movs	r2, #4
 80033b0:	4013      	ands	r3, r2
 80033b2:	d00b      	beq.n	80033cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	4a34      	ldr	r2, [pc, #208]	; (800348c <UART_AdvFeatureConfig+0x150>)
 80033bc:	4013      	ands	r3, r2
 80033be:	0019      	movs	r1, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d0:	2210      	movs	r2, #16
 80033d2:	4013      	ands	r3, r2
 80033d4:	d00b      	beq.n	80033ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	4a2c      	ldr	r2, [pc, #176]	; (8003490 <UART_AdvFeatureConfig+0x154>)
 80033de:	4013      	ands	r3, r2
 80033e0:	0019      	movs	r1, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f2:	2220      	movs	r2, #32
 80033f4:	4013      	ands	r3, r2
 80033f6:	d00b      	beq.n	8003410 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	4a25      	ldr	r2, [pc, #148]	; (8003494 <UART_AdvFeatureConfig+0x158>)
 8003400:	4013      	ands	r3, r2
 8003402:	0019      	movs	r1, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	430a      	orrs	r2, r1
 800340e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003414:	2240      	movs	r2, #64	; 0x40
 8003416:	4013      	ands	r3, r2
 8003418:	d01d      	beq.n	8003456 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	4a1d      	ldr	r2, [pc, #116]	; (8003498 <UART_AdvFeatureConfig+0x15c>)
 8003422:	4013      	ands	r3, r2
 8003424:	0019      	movs	r1, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	430a      	orrs	r2, r1
 8003430:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003436:	2380      	movs	r3, #128	; 0x80
 8003438:	035b      	lsls	r3, r3, #13
 800343a:	429a      	cmp	r2, r3
 800343c:	d10b      	bne.n	8003456 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	4a15      	ldr	r2, [pc, #84]	; (800349c <UART_AdvFeatureConfig+0x160>)
 8003446:	4013      	ands	r3, r2
 8003448:	0019      	movs	r1, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345a:	2280      	movs	r2, #128	; 0x80
 800345c:	4013      	ands	r3, r2
 800345e:	d00b      	beq.n	8003478 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	4a0e      	ldr	r2, [pc, #56]	; (80034a0 <UART_AdvFeatureConfig+0x164>)
 8003468:	4013      	ands	r3, r2
 800346a:	0019      	movs	r1, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	605a      	str	r2, [r3, #4]
  }
}
 8003478:	46c0      	nop			; (mov r8, r8)
 800347a:	46bd      	mov	sp, r7
 800347c:	b002      	add	sp, #8
 800347e:	bd80      	pop	{r7, pc}
 8003480:	ffff7fff 	.word	0xffff7fff
 8003484:	fffdffff 	.word	0xfffdffff
 8003488:	fffeffff 	.word	0xfffeffff
 800348c:	fffbffff 	.word	0xfffbffff
 8003490:	ffffefff 	.word	0xffffefff
 8003494:	ffffdfff 	.word	0xffffdfff
 8003498:	ffefffff 	.word	0xffefffff
 800349c:	ff9fffff 	.word	0xff9fffff
 80034a0:	fff7ffff 	.word	0xfff7ffff

080034a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b092      	sub	sp, #72	; 0x48
 80034a8:	af02      	add	r7, sp, #8
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2290      	movs	r2, #144	; 0x90
 80034b0:	2100      	movs	r1, #0
 80034b2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034b4:	f7fe fa06 	bl	80018c4 <HAL_GetTick>
 80034b8:	0003      	movs	r3, r0
 80034ba:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2208      	movs	r2, #8
 80034c4:	4013      	ands	r3, r2
 80034c6:	2b08      	cmp	r3, #8
 80034c8:	d12d      	bne.n	8003526 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034cc:	2280      	movs	r2, #128	; 0x80
 80034ce:	0391      	lsls	r1, r2, #14
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	4a47      	ldr	r2, [pc, #284]	; (80035f0 <UART_CheckIdleState+0x14c>)
 80034d4:	9200      	str	r2, [sp, #0]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f000 f88e 	bl	80035f8 <UART_WaitOnFlagUntilTimeout>
 80034dc:	1e03      	subs	r3, r0, #0
 80034de:	d022      	beq.n	8003526 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80034e0:	f3ef 8310 	mrs	r3, PRIMASK
 80034e4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80034e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80034ea:	2301      	movs	r3, #1
 80034ec:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f0:	f383 8810 	msr	PRIMASK, r3
}
 80034f4:	46c0      	nop			; (mov r8, r8)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2180      	movs	r1, #128	; 0x80
 8003502:	438a      	bics	r2, r1
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003508:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800350a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350c:	f383 8810 	msr	PRIMASK, r3
}
 8003510:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2288      	movs	r2, #136	; 0x88
 8003516:	2120      	movs	r1, #32
 8003518:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2284      	movs	r2, #132	; 0x84
 800351e:	2100      	movs	r1, #0
 8003520:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e060      	b.n	80035e8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2204      	movs	r2, #4
 800352e:	4013      	ands	r3, r2
 8003530:	2b04      	cmp	r3, #4
 8003532:	d146      	bne.n	80035c2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003536:	2280      	movs	r2, #128	; 0x80
 8003538:	03d1      	lsls	r1, r2, #15
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	4a2c      	ldr	r2, [pc, #176]	; (80035f0 <UART_CheckIdleState+0x14c>)
 800353e:	9200      	str	r2, [sp, #0]
 8003540:	2200      	movs	r2, #0
 8003542:	f000 f859 	bl	80035f8 <UART_WaitOnFlagUntilTimeout>
 8003546:	1e03      	subs	r3, r0, #0
 8003548:	d03b      	beq.n	80035c2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800354a:	f3ef 8310 	mrs	r3, PRIMASK
 800354e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003550:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003552:	637b      	str	r3, [r7, #52]	; 0x34
 8003554:	2301      	movs	r3, #1
 8003556:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	f383 8810 	msr	PRIMASK, r3
}
 800355e:	46c0      	nop			; (mov r8, r8)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4922      	ldr	r1, [pc, #136]	; (80035f4 <UART_CheckIdleState+0x150>)
 800356c:	400a      	ands	r2, r1
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003572:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	f383 8810 	msr	PRIMASK, r3
}
 800357a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800357c:	f3ef 8310 	mrs	r3, PRIMASK
 8003580:	61bb      	str	r3, [r7, #24]
  return(result);
 8003582:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003584:	633b      	str	r3, [r7, #48]	; 0x30
 8003586:	2301      	movs	r3, #1
 8003588:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	f383 8810 	msr	PRIMASK, r3
}
 8003590:	46c0      	nop			; (mov r8, r8)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2101      	movs	r1, #1
 800359e:	438a      	bics	r2, r1
 80035a0:	609a      	str	r2, [r3, #8]
 80035a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	f383 8810 	msr	PRIMASK, r3
}
 80035ac:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	228c      	movs	r2, #140	; 0x8c
 80035b2:	2120      	movs	r1, #32
 80035b4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2284      	movs	r2, #132	; 0x84
 80035ba:	2100      	movs	r1, #0
 80035bc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e012      	b.n	80035e8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2288      	movs	r2, #136	; 0x88
 80035c6:	2120      	movs	r1, #32
 80035c8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	228c      	movs	r2, #140	; 0x8c
 80035ce:	2120      	movs	r1, #32
 80035d0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2284      	movs	r2, #132	; 0x84
 80035e2:	2100      	movs	r1, #0
 80035e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	0018      	movs	r0, r3
 80035ea:	46bd      	mov	sp, r7
 80035ec:	b010      	add	sp, #64	; 0x40
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	01ffffff 	.word	0x01ffffff
 80035f4:	fffffedf 	.word	0xfffffedf

080035f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	603b      	str	r3, [r7, #0]
 8003604:	1dfb      	adds	r3, r7, #7
 8003606:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003608:	e04b      	b.n	80036a2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	3301      	adds	r3, #1
 800360e:	d048      	beq.n	80036a2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003610:	f7fe f958 	bl	80018c4 <HAL_GetTick>
 8003614:	0002      	movs	r2, r0
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	429a      	cmp	r2, r3
 800361e:	d302      	bcc.n	8003626 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e04b      	b.n	80036c2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2204      	movs	r2, #4
 8003632:	4013      	ands	r3, r2
 8003634:	d035      	beq.n	80036a2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	2208      	movs	r2, #8
 800363e:	4013      	ands	r3, r2
 8003640:	2b08      	cmp	r3, #8
 8003642:	d111      	bne.n	8003668 <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2208      	movs	r2, #8
 800364a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	0018      	movs	r0, r3
 8003650:	f000 f83c 	bl	80036cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2290      	movs	r2, #144	; 0x90
 8003658:	2108      	movs	r1, #8
 800365a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2284      	movs	r2, #132	; 0x84
 8003660:	2100      	movs	r1, #0
 8003662:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e02c      	b.n	80036c2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	69da      	ldr	r2, [r3, #28]
 800366e:	2380      	movs	r3, #128	; 0x80
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	401a      	ands	r2, r3
 8003674:	2380      	movs	r3, #128	; 0x80
 8003676:	011b      	lsls	r3, r3, #4
 8003678:	429a      	cmp	r2, r3
 800367a:	d112      	bne.n	80036a2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2280      	movs	r2, #128	; 0x80
 8003682:	0112      	lsls	r2, r2, #4
 8003684:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	0018      	movs	r0, r3
 800368a:	f000 f81f 	bl	80036cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2290      	movs	r2, #144	; 0x90
 8003692:	2120      	movs	r1, #32
 8003694:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2284      	movs	r2, #132	; 0x84
 800369a:	2100      	movs	r1, #0
 800369c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e00f      	b.n	80036c2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	69db      	ldr	r3, [r3, #28]
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	4013      	ands	r3, r2
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	425a      	negs	r2, r3
 80036b2:	4153      	adcs	r3, r2
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	001a      	movs	r2, r3
 80036b8:	1dfb      	adds	r3, r7, #7
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d0a4      	beq.n	800360a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	0018      	movs	r0, r3
 80036c4:	46bd      	mov	sp, r7
 80036c6:	b004      	add	sp, #16
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08e      	sub	sp, #56	; 0x38
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80036d4:	f3ef 8310 	mrs	r3, PRIMASK
 80036d8:	617b      	str	r3, [r7, #20]
  return(result);
 80036da:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80036dc:	637b      	str	r3, [r7, #52]	; 0x34
 80036de:	2301      	movs	r3, #1
 80036e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	f383 8810 	msr	PRIMASK, r3
}
 80036e8:	46c0      	nop			; (mov r8, r8)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4926      	ldr	r1, [pc, #152]	; (8003790 <UART_EndRxTransfer+0xc4>)
 80036f6:	400a      	ands	r2, r1
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	f383 8810 	msr	PRIMASK, r3
}
 8003704:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003706:	f3ef 8310 	mrs	r3, PRIMASK
 800370a:	623b      	str	r3, [r7, #32]
  return(result);
 800370c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800370e:	633b      	str	r3, [r7, #48]	; 0x30
 8003710:	2301      	movs	r3, #1
 8003712:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	f383 8810 	msr	PRIMASK, r3
}
 800371a:	46c0      	nop			; (mov r8, r8)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689a      	ldr	r2, [r3, #8]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	491b      	ldr	r1, [pc, #108]	; (8003794 <UART_EndRxTransfer+0xc8>)
 8003728:	400a      	ands	r2, r1
 800372a:	609a      	str	r2, [r3, #8]
 800372c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003732:	f383 8810 	msr	PRIMASK, r3
}
 8003736:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800373c:	2b01      	cmp	r3, #1
 800373e:	d118      	bne.n	8003772 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003740:	f3ef 8310 	mrs	r3, PRIMASK
 8003744:	60bb      	str	r3, [r7, #8]
  return(result);
 8003746:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003748:	62fb      	str	r3, [r7, #44]	; 0x2c
 800374a:	2301      	movs	r3, #1
 800374c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f383 8810 	msr	PRIMASK, r3
}
 8003754:	46c0      	nop			; (mov r8, r8)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2110      	movs	r1, #16
 8003762:	438a      	bics	r2, r1
 8003764:	601a      	str	r2, [r3, #0]
 8003766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003768:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	f383 8810 	msr	PRIMASK, r3
}
 8003770:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	228c      	movs	r2, #140	; 0x8c
 8003776:	2120      	movs	r1, #32
 8003778:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	46bd      	mov	sp, r7
 800378a:	b00e      	add	sp, #56	; 0x38
 800378c:	bd80      	pop	{r7, pc}
 800378e:	46c0      	nop			; (mov r8, r8)
 8003790:	fffffedf 	.word	0xfffffedf
 8003794:	effffffe 	.word	0xeffffffe

08003798 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	225e      	movs	r2, #94	; 0x5e
 80037aa:	2100      	movs	r1, #0
 80037ac:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2256      	movs	r2, #86	; 0x56
 80037b2:	2100      	movs	r1, #0
 80037b4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	0018      	movs	r0, r3
 80037ba:	f7ff fc2d 	bl	8003018 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037be:	46c0      	nop			; (mov r8, r8)
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b004      	add	sp, #16
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b086      	sub	sp, #24
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80037ce:	f3ef 8310 	mrs	r3, PRIMASK
 80037d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80037d4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80037d6:	617b      	str	r3, [r7, #20]
 80037d8:	2301      	movs	r3, #1
 80037da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f383 8810 	msr	PRIMASK, r3
}
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2140      	movs	r1, #64	; 0x40
 80037f0:	438a      	bics	r2, r1
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	f383 8810 	msr	PRIMASK, r3
}
 80037fe:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2288      	movs	r2, #136	; 0x88
 8003804:	2120      	movs	r1, #32
 8003806:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	0018      	movs	r0, r3
 8003812:	f7ff fbf9 	bl	8003008 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003816:	46c0      	nop			; (mov r8, r8)
 8003818:	46bd      	mov	sp, r7
 800381a:	b006      	add	sp, #24
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b082      	sub	sp, #8
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003826:	46c0      	nop			; (mov r8, r8)
 8003828:	46bd      	mov	sp, r7
 800382a:	b002      	add	sp, #8
 800382c:	bd80      	pop	{r7, pc}

0800382e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b082      	sub	sp, #8
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003836:	46c0      	nop			; (mov r8, r8)
 8003838:	46bd      	mov	sp, r7
 800383a:	b002      	add	sp, #8
 800383c:	bd80      	pop	{r7, pc}

0800383e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b082      	sub	sp, #8
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003846:	46c0      	nop			; (mov r8, r8)
 8003848:	46bd      	mov	sp, r7
 800384a:	b002      	add	sp, #8
 800384c:	bd80      	pop	{r7, pc}
	...

08003850 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2284      	movs	r2, #132	; 0x84
 800385c:	5c9b      	ldrb	r3, [r3, r2]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d101      	bne.n	8003866 <HAL_UARTEx_DisableFifoMode+0x16>
 8003862:	2302      	movs	r3, #2
 8003864:	e027      	b.n	80038b6 <HAL_UARTEx_DisableFifoMode+0x66>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2284      	movs	r2, #132	; 0x84
 800386a:	2101      	movs	r1, #1
 800386c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2288      	movs	r2, #136	; 0x88
 8003872:	2124      	movs	r1, #36	; 0x24
 8003874:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2101      	movs	r1, #1
 800388a:	438a      	bics	r2, r1
 800388c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	4a0b      	ldr	r2, [pc, #44]	; (80038c0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003892:	4013      	ands	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2288      	movs	r2, #136	; 0x88
 80038a8:	2120      	movs	r1, #32
 80038aa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2284      	movs	r2, #132	; 0x84
 80038b0:	2100      	movs	r1, #0
 80038b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	0018      	movs	r0, r3
 80038b8:	46bd      	mov	sp, r7
 80038ba:	b004      	add	sp, #16
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	46c0      	nop			; (mov r8, r8)
 80038c0:	dfffffff 	.word	0xdfffffff

080038c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2284      	movs	r2, #132	; 0x84
 80038d2:	5c9b      	ldrb	r3, [r3, r2]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d101      	bne.n	80038dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80038d8:	2302      	movs	r3, #2
 80038da:	e02e      	b.n	800393a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2284      	movs	r2, #132	; 0x84
 80038e0:	2101      	movs	r1, #1
 80038e2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2288      	movs	r2, #136	; 0x88
 80038e8:	2124      	movs	r1, #36	; 0x24
 80038ea:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2101      	movs	r1, #1
 8003900:	438a      	bics	r2, r1
 8003902:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	08d9      	lsrs	r1, r3, #3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	0018      	movs	r0, r3
 800391c:	f000 f854 	bl	80039c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2288      	movs	r2, #136	; 0x88
 800392c:	2120      	movs	r1, #32
 800392e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2284      	movs	r2, #132	; 0x84
 8003934:	2100      	movs	r1, #0
 8003936:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	0018      	movs	r0, r3
 800393c:	46bd      	mov	sp, r7
 800393e:	b004      	add	sp, #16
 8003940:	bd80      	pop	{r7, pc}
	...

08003944 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2284      	movs	r2, #132	; 0x84
 8003952:	5c9b      	ldrb	r3, [r3, r2]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d101      	bne.n	800395c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003958:	2302      	movs	r3, #2
 800395a:	e02f      	b.n	80039bc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2284      	movs	r2, #132	; 0x84
 8003960:	2101      	movs	r1, #1
 8003962:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2288      	movs	r2, #136	; 0x88
 8003968:	2124      	movs	r1, #36	; 0x24
 800396a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2101      	movs	r1, #1
 8003980:	438a      	bics	r2, r1
 8003982:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	4a0e      	ldr	r2, [pc, #56]	; (80039c4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800398c:	4013      	ands	r3, r2
 800398e:	0019      	movs	r1, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	0018      	movs	r0, r3
 800399e:	f000 f813 	bl	80039c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2288      	movs	r2, #136	; 0x88
 80039ae:	2120      	movs	r1, #32
 80039b0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2284      	movs	r2, #132	; 0x84
 80039b6:	2100      	movs	r1, #0
 80039b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	0018      	movs	r0, r3
 80039be:	46bd      	mov	sp, r7
 80039c0:	b004      	add	sp, #16
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	f1ffffff 	.word	0xf1ffffff

080039c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80039c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d108      	bne.n	80039ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	226a      	movs	r2, #106	; 0x6a
 80039dc:	2101      	movs	r1, #1
 80039de:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2268      	movs	r2, #104	; 0x68
 80039e4:	2101      	movs	r1, #1
 80039e6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80039e8:	e043      	b.n	8003a72 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80039ea:	260f      	movs	r6, #15
 80039ec:	19bb      	adds	r3, r7, r6
 80039ee:	2208      	movs	r2, #8
 80039f0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80039f2:	200e      	movs	r0, #14
 80039f4:	183b      	adds	r3, r7, r0
 80039f6:	2208      	movs	r2, #8
 80039f8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	0e5b      	lsrs	r3, r3, #25
 8003a02:	b2da      	uxtb	r2, r3
 8003a04:	240d      	movs	r4, #13
 8003a06:	193b      	adds	r3, r7, r4
 8003a08:	2107      	movs	r1, #7
 8003a0a:	400a      	ands	r2, r1
 8003a0c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	0f5b      	lsrs	r3, r3, #29
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	250c      	movs	r5, #12
 8003a1a:	197b      	adds	r3, r7, r5
 8003a1c:	2107      	movs	r1, #7
 8003a1e:	400a      	ands	r2, r1
 8003a20:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003a22:	183b      	adds	r3, r7, r0
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	197a      	adds	r2, r7, r5
 8003a28:	7812      	ldrb	r2, [r2, #0]
 8003a2a:	4914      	ldr	r1, [pc, #80]	; (8003a7c <UARTEx_SetNbDataToProcess+0xb4>)
 8003a2c:	5c8a      	ldrb	r2, [r1, r2]
 8003a2e:	435a      	muls	r2, r3
 8003a30:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003a32:	197b      	adds	r3, r7, r5
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	4a12      	ldr	r2, [pc, #72]	; (8003a80 <UARTEx_SetNbDataToProcess+0xb8>)
 8003a38:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003a3a:	0019      	movs	r1, r3
 8003a3c:	f7fc fbee 	bl	800021c <__divsi3>
 8003a40:	0003      	movs	r3, r0
 8003a42:	b299      	uxth	r1, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	226a      	movs	r2, #106	; 0x6a
 8003a48:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003a4a:	19bb      	adds	r3, r7, r6
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	193a      	adds	r2, r7, r4
 8003a50:	7812      	ldrb	r2, [r2, #0]
 8003a52:	490a      	ldr	r1, [pc, #40]	; (8003a7c <UARTEx_SetNbDataToProcess+0xb4>)
 8003a54:	5c8a      	ldrb	r2, [r1, r2]
 8003a56:	435a      	muls	r2, r3
 8003a58:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003a5a:	193b      	adds	r3, r7, r4
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	4a08      	ldr	r2, [pc, #32]	; (8003a80 <UARTEx_SetNbDataToProcess+0xb8>)
 8003a60:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003a62:	0019      	movs	r1, r3
 8003a64:	f7fc fbda 	bl	800021c <__divsi3>
 8003a68:	0003      	movs	r3, r0
 8003a6a:	b299      	uxth	r1, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2268      	movs	r2, #104	; 0x68
 8003a70:	5299      	strh	r1, [r3, r2]
}
 8003a72:	46c0      	nop			; (mov r8, r8)
 8003a74:	46bd      	mov	sp, r7
 8003a76:	b005      	add	sp, #20
 8003a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a7a:	46c0      	nop			; (mov r8, r8)
 8003a7c:	08003b9c 	.word	0x08003b9c
 8003a80:	08003ba4 	.word	0x08003ba4

08003a84 <memset>:
 8003a84:	0003      	movs	r3, r0
 8003a86:	1882      	adds	r2, r0, r2
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d100      	bne.n	8003a8e <memset+0xa>
 8003a8c:	4770      	bx	lr
 8003a8e:	7019      	strb	r1, [r3, #0]
 8003a90:	3301      	adds	r3, #1
 8003a92:	e7f9      	b.n	8003a88 <memset+0x4>

08003a94 <__libc_init_array>:
 8003a94:	b570      	push	{r4, r5, r6, lr}
 8003a96:	2600      	movs	r6, #0
 8003a98:	4c0c      	ldr	r4, [pc, #48]	; (8003acc <__libc_init_array+0x38>)
 8003a9a:	4d0d      	ldr	r5, [pc, #52]	; (8003ad0 <__libc_init_array+0x3c>)
 8003a9c:	1b64      	subs	r4, r4, r5
 8003a9e:	10a4      	asrs	r4, r4, #2
 8003aa0:	42a6      	cmp	r6, r4
 8003aa2:	d109      	bne.n	8003ab8 <__libc_init_array+0x24>
 8003aa4:	2600      	movs	r6, #0
 8003aa6:	f000 f819 	bl	8003adc <_init>
 8003aaa:	4c0a      	ldr	r4, [pc, #40]	; (8003ad4 <__libc_init_array+0x40>)
 8003aac:	4d0a      	ldr	r5, [pc, #40]	; (8003ad8 <__libc_init_array+0x44>)
 8003aae:	1b64      	subs	r4, r4, r5
 8003ab0:	10a4      	asrs	r4, r4, #2
 8003ab2:	42a6      	cmp	r6, r4
 8003ab4:	d105      	bne.n	8003ac2 <__libc_init_array+0x2e>
 8003ab6:	bd70      	pop	{r4, r5, r6, pc}
 8003ab8:	00b3      	lsls	r3, r6, #2
 8003aba:	58eb      	ldr	r3, [r5, r3]
 8003abc:	4798      	blx	r3
 8003abe:	3601      	adds	r6, #1
 8003ac0:	e7ee      	b.n	8003aa0 <__libc_init_array+0xc>
 8003ac2:	00b3      	lsls	r3, r6, #2
 8003ac4:	58eb      	ldr	r3, [r5, r3]
 8003ac6:	4798      	blx	r3
 8003ac8:	3601      	adds	r6, #1
 8003aca:	e7f2      	b.n	8003ab2 <__libc_init_array+0x1e>
 8003acc:	08003bac 	.word	0x08003bac
 8003ad0:	08003bac 	.word	0x08003bac
 8003ad4:	08003bb0 	.word	0x08003bb0
 8003ad8:	08003bac 	.word	0x08003bac

08003adc <_init>:
 8003adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ade:	46c0      	nop			; (mov r8, r8)
 8003ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ae2:	bc08      	pop	{r3}
 8003ae4:	469e      	mov	lr, r3
 8003ae6:	4770      	bx	lr

08003ae8 <_fini>:
 8003ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aea:	46c0      	nop			; (mov r8, r8)
 8003aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aee:	bc08      	pop	{r3}
 8003af0:	469e      	mov	lr, r3
 8003af2:	4770      	bx	lr

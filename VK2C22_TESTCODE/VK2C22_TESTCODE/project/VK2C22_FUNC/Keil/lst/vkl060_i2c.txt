; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\vkl060_i2c.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\vkl060_i2c.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M451Series\Include -I..\..\..\Library\StdDriver\inc -I..\Bsp -I..\User -I..\lcd_driver -I..\exti_driver -I..\led_driver -I..\touch -I..\dotmatix_lcd -I..\KH -ID:\工作\A工程资料\LCD\低功耗系列_VKL\VKL例程\VKL060_TESTCODE\project\VKL060_FUNC\Keil\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -D__UVISION_VERSION=515 -D_RTE_ --omf_browse=.\obj\vkl060_i2c.crf ..\lcd_driver\VKL060_I2C.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Delay_nuS PROC
;;;37     *******************************************************************************/
;;;38     void Delay_nuS(unsigned int n)	   
000000  e007              B        |L1.18|
                  |L1.2|
;;;39     {
;;;40     	unsigned char i;
;;;41     	while(n--)
;;;42     	{
;;;43     		i=10;
000002  210a              MOVS     r1,#0xa
;;;44     		while(i--)
000004  e000              B        |L1.8|
                  |L1.6|
;;;45     		{//nop指令根据单片机做相应的修改
;;;46     			__nop();
000006  bf00              NOP      
                  |L1.8|
000008  000a              MOVS     r2,r1                 ;44
00000a  f1a10301          SUB      r3,r1,#1              ;44
00000e  b2d9              UXTB     r1,r3                 ;44
000010  d1f9              BNE      |L1.6|
                  |L1.18|
000012  0002              MOVS     r2,r0                 ;41
000014  f1a00001          SUB      r0,r0,#1              ;41
000018  d1f3              BNE      |L1.2|
;;;47     		}
;;;48     	}
;;;49     }
00001a  4770              BX       lr
;;;50     /*******************************************************************************
                          ENDP

                  Delay_nmS PROC
;;;56     *******************************************************************************/
;;;57     void Delay_nmS(unsigned long int n)
00001c  b510              PUSH     {r4,lr}
;;;58     {
00001e  4604              MOV      r4,r0
;;;59     	while(n--)
000020  e003              B        |L1.42|
                  |L1.34|
;;;60     	{
;;;61     		Delay_nuS(1000);
000022  f44f707a          MOV      r0,#0x3e8
000026  f7fffffe          BL       Delay_nuS
                  |L1.42|
00002a  0020              MOVS     r0,r4                 ;59
00002c  f1a40401          SUB      r4,r4,#1              ;59
000030  d1f7              BNE      |L1.34|
;;;62     	}
;;;63     }
000032  bd10              POP      {r4,pc}
;;;64     /*******************************************************************************
                          ENDP

                  WriteCmdVKL060 PROC
;;;70     *******************************************************************************/
;;;71     void  WriteCmdVKL060(unsigned char cmd)
000034  b501              PUSH     {r0,lr}
;;;72     {
;;;73     	VKL060_I2C_Cmd(&cmd,1);
000036  2101              MOVS     r1,#1
000038  4668              MOV      r0,sp
00003a  f7fffffe          BL       VKL060_I2C_Cmd
;;;74     }
00003e  bd08              POP      {r3,pc}
;;;75     /*******************************************************************************
                          ENDP

                  WritenDataVKL060 PROC
;;;83     *******************************************************************************/
;;;84     void  WritenDataVKL060(unsigned char Addr,unsigned char *Databuf,unsigned char cnt)
000040  b570              PUSH     {r4-r6,lr}
;;;85     {
000042  4604              MOV      r4,r0
000044  460d              MOV      r5,r1
000046  4616              MOV      r6,r2
;;;86     	VKL060_I2C_WRDat(Addr,Databuf,cnt);
000048  4632              MOV      r2,r6
00004a  4629              MOV      r1,r5
00004c  4620              MOV      r0,r4
00004e  f7fffffe          BL       VKL060_I2C_WRDat
;;;87     }
000052  bd70              POP      {r4-r6,pc}
;;;88     
                          ENDP

                  ReadnDataVKL060 PROC
;;;97     *******************************************************************************/
;;;98     unsigned char  ReadnDataVKL060(unsigned char Addr,unsigned char *Databuf,unsigned char Cnt)
000054  b570              PUSH     {r4-r6,lr}
;;;99     {
000056  4604              MOV      r4,r0
000058  460d              MOV      r5,r1
00005a  4616              MOV      r6,r2
;;;100    	VKL060_I2C_RDDat(Addr,Databuf,Cnt);
00005c  4632              MOV      r2,r6
00005e  4629              MOV      r1,r5
000060  4620              MOV      r0,r4
000062  f7fffffe          BL       VKL060_I2C_RDDat
;;;101    	return 0;
000066  2000              MOVS     r0,#0
;;;102    }
000068  bd70              POP      {r4-r6,pc}
;;;103    /*******************************************************************************
                          ENDP

                  VKL060_DisAll PROC
;;;110    *******************************************************************************/
;;;111    void VKL060_DisAll(unsigned char dat)
00006a  b57c              PUSH     {r2-r6,lr}
;;;112    {
00006c  4605              MOV      r5,r0
;;;113    	unsigned char segi;
;;;114    	unsigned char dispram[8];
;;;115    	
;;;116    	for(segi=0;segi<8;segi++)
00006e  2400              MOVS     r4,#0
000070  e003              B        |L1.122|
                  |L1.114|
;;;117    	{
;;;118    		VKL060_dispram[segi]=dat;
000072  4891              LDR      r0,|L1.696|
000074  5505              STRB     r5,[r0,r4]
000076  1c60              ADDS     r0,r4,#1              ;116
000078  b2c4              UXTB     r4,r0                 ;116
                  |L1.122|
00007a  2c08              CMP      r4,#8                 ;116
00007c  dbf9              BLT      |L1.114|
;;;119    	}
;;;120    	dispram[7]&=0x0f;//多出来的半个字节缓冲清0
00007e  f89d0007          LDRB     r0,[sp,#7]
000082  f000000f          AND      r0,r0,#0xf
000086  f88d0007          STRB     r0,[sp,#7]
;;;121    	WritenDataVKL060(11,VKL060_dispram,8);	//这里送8bit数据对应2个SEG，每4bit数据地址加1，每8位数据1个ACK
00008a  2208              MOVS     r2,#8
00008c  498a              LDR      r1,|L1.696|
00008e  200b              MOVS     r0,#0xb
000090  f7fffffe          BL       WritenDataVKL060
;;;122    }
000094  bd7c              POP      {r2-r6,pc}
;;;123    /*******************************************************************************
                          ENDP

                  VKL060_DisDotOn PROC
;;;130    *******************************************************************************/
;;;131    void VKL060_DisDotOn(unsigned char seg,unsigned char com)
000096  b5f8              PUSH     {r3-r7,lr}
;;;132    {
000098  4604              MOV      r4,r0
00009a  460d              MOV      r5,r1
;;;133    	unsigned char addrbyte,addrbit,tempdat;
;;;134    	
;;;135    	//计算com/seg对应的显示RAM地址和bit
;;;136    	addrbyte=seg/2*2;
00009c  4620              MOV      r0,r4
00009e  eb0471d0          ADD      r1,r4,r0,LSR #31
0000a2  1049              ASRS     r1,r1,#1
0000a4  0649              LSLS     r1,r1,#25
0000a6  0e0f              LSRS     r7,r1,#24
;;;137    	if((seg%2)==0)
0000a8  eb0471d0          ADD      r1,r4,r0,LSR #31
0000ac  1049              ASRS     r1,r1,#1
0000ae  eba40141          SUB      r1,r4,r1,LSL #1
0000b2  b919              CBNZ     r1,|L1.188|
;;;138    		addrbit=(1<<com);
0000b4  2001              MOVS     r0,#1
0000b6  40a8              LSLS     r0,r0,r5
0000b8  b2c6              UXTB     r6,r0
0000ba  e003              B        |L1.196|
                  |L1.188|
;;;139    	else
;;;140    		addrbit=(1<<(4+com));
0000bc  1d28              ADDS     r0,r5,#4
0000be  2101              MOVS     r1,#1
0000c0  4081              LSLS     r1,r1,r0
0000c2  b2ce              UXTB     r6,r1
                  |L1.196|
;;;141    	tempdat=addrbit;
0000c4  9600              STR      r6,[sp,#0]
;;;142    	WritenDataVKL060(addrbyte,&tempdat,1);		//这里送8bit数据对应2个SEG，seg/com对应的bit置1，其余7bit不改变
0000c6  2201              MOVS     r2,#1
0000c8  4669              MOV      r1,sp
0000ca  4638              MOV      r0,r7
0000cc  f7fffffe          BL       WritenDataVKL060
;;;143    }
0000d0  bdf8              POP      {r3-r7,pc}
;;;144    /*******************************************************************************
                          ENDP

                  VKL060_DisDotOff PROC
;;;151    *******************************************************************************/
;;;152    void VKL060_DisDotOff(unsigned char seg,unsigned char com)
0000d2  b5f8              PUSH     {r3-r7,lr}
;;;153    {
0000d4  4604              MOV      r4,r0
0000d6  460d              MOV      r5,r1
;;;154    	unsigned char addrbyte,addrbit,tempdat;
;;;155    	
;;;156    	//计算com/seg对应的显示RAM地址和bit
;;;157    	addrbyte=seg/2*2;
0000d8  4620              MOV      r0,r4
0000da  eb0471d0          ADD      r1,r4,r0,LSR #31
0000de  1049              ASRS     r1,r1,#1
0000e0  0649              LSLS     r1,r1,#25
0000e2  0e0f              LSRS     r7,r1,#24
;;;158    	if((seg%2)==0)
0000e4  eb0471d0          ADD      r1,r4,r0,LSR #31
0000e8  1049              ASRS     r1,r1,#1
0000ea  eba40141          SUB      r1,r4,r1,LSL #1
0000ee  b919              CBNZ     r1,|L1.248|
;;;159    		addrbit=(1<<com);
0000f0  2001              MOVS     r0,#1
0000f2  40a8              LSLS     r0,r0,r5
0000f4  b2c6              UXTB     r6,r0
0000f6  e003              B        |L1.256|
                  |L1.248|
;;;160    	else
;;;161    		addrbit=(1<<(4+com));
0000f8  1d28              ADDS     r0,r5,#4
0000fa  2101              MOVS     r1,#1
0000fc  4081              LSLS     r1,r1,r0
0000fe  b2ce              UXTB     r6,r1
                  |L1.256|
;;;162    	tempdat=~addrbit;
000100  43f0              MVNS     r0,r6
000102  b2c0              UXTB     r0,r0
000104  9000              STR      r0,[sp,#0]
;;;163    	WritenDataVKL060(addrbyte,&tempdat,1);		//这里送8bit数据对应2个SEG，seg/com对应的bit清0，其余7bit不改变
000106  2201              MOVS     r2,#1
000108  4669              MOV      r1,sp
00010a  4638              MOV      r0,r7
00010c  f7fffffe          BL       WritenDataVKL060
;;;164    }
000110  bdf8              POP      {r3-r7,pc}
;;;165    /*******************************************************************************
                          ENDP

                  VKL060_Enter_PowerOff PROC
;;;171    *******************************************************************************/
;;;172    unsigned char VKL060_Enter_PowerOff(void)
000112  b510              PUSH     {r4,lr}
;;;173    {		
;;;174    	WriteCmdVKL060(VKL060_LCD_OFF);	//关显示
000114  20c0              MOVS     r0,#0xc0
000116  f7fffffe          BL       WriteCmdVKL060
;;;175    	return 0;
00011a  2000              MOVS     r0,#0
;;;176    }
00011c  bd10              POP      {r4,pc}
;;;177    /*******************************************************************************
                          ENDP

                  VKL060_InitSequence PROC
;;;199    *******************************************************************************/
;;;200    unsigned char VKL060_InitSequence(void)
00011e  b508              PUSH     {r3,lr}
;;;201    {			
;;;202    	unsigned char  cmdbuf[3];
;;;203      //上电初始化时序（参考数据手册上电复位时序图和参数）	
;;;204    	//上电100uS后初始化
;;;205      Delay_nuS(100);       
000120  2064              MOVS     r0,#0x64
000122  f7fffffe          BL       Delay_nuS
;;;206    	//STOP信号
;;;207    //	I2C_STOP(I2C0);
;;;208    	//系统设置命令(软复位)
;;;209    	cmdbuf[0]=VKL060_SOFTRST;
000126  20ea              MOVS     r0,#0xea
000128  f88d0000          STRB     r0,[sp,#0]
;;;210    	//显示控制命令(设置帧频，功耗模式和驱动方式)，电流为实测样品值，仅供参考
;;;211    	//cmdbuf[1]=(VKL060_FR80HZ|VKL060_SRNOR|VKL060_LINER);  	//上电默认 	VDD=5V:18.2uA  	VDD=3.3V:13uA
;;;212    	cmdbuf[1]=(VKL060_FR53HZ|VKL060_SRPM1|VKL060_FRAMER);  //最省电 		VDD=5V:9.1uA  VDD=3.3V:6.8uA
00012c  20bc              MOVS     r0,#0xbc
00012e  f88d0001          STRB     r0,[sp,#1]
;;;213    	//cmdbuf[1]=(VKL060_FR80HZ|VKL060_SRHP|VKL060_LINER);  	//电流最大 			VDD=5V:20uA  	VDD=3.3V:15uA 
;;;214      //模式设置命令
;;;215    	cmdbuf[2]=(VKL060_BIAS_1_3|VKL060_LCD_ON);		//1/3bias,打开显示 
000132  20c8              MOVS     r0,#0xc8
000134  f88d0002          STRB     r0,[sp,#2]
;;;216    	//cmdbuf[2]=(VKL060_BIAS_1_2|VKL060_LCD_ON);		//1/2bias,打开显示 
;;;217    	VKL060_I2C_Cmd(cmdbuf,3);
000138  2103              MOVS     r1,#3
00013a  4668              MOV      r0,sp
00013c  f7fffffe          BL       VKL060_I2C_Cmd
;;;218    		
;;;219      return  0; 
000140  2000              MOVS     r0,#0
;;;220    }
000142  bd08              POP      {r3,pc}
;;;221    /*******************************************************************************
                          ENDP

                  VKL060_Exit_PowerOff PROC
;;;183    *******************************************************************************/
;;;184    unsigned char VKL060_Exit_PowerOff(void)
000144  b510              PUSH     {r4,lr}
;;;185    {	
;;;186    	unsigned char errorflag; 
;;;187    	
;;;188    	//退出掉电模式重新初始化时序
;;;189    	errorflag=VKL060_InitSequence();
000146  f7fffffe          BL       VKL060_InitSequence
00014a  4604              MOV      r4,r0
;;;190    	
;;;191      return(errorflag);
00014c  4620              MOV      r0,r4
;;;192    }
00014e  bd10              POP      {r4,pc}
;;;193    /*******************************************************************************
                          ENDP

                  VKL060_Init PROC
;;;227    *******************************************************************************/
;;;228    void VKL060_Init(void)
000150  b510              PUSH     {r4,lr}
;;;229    {	
;;;230    	//初始化时序
;;;231    	VKL060_InitSequence();
000152  f7fffffe          BL       VKL060_InitSequence
;;;232    }
000156  bd10              POP      {r4,pc}
;;;233    /*******************************************************************************
                          ENDP

                  VKL060_Main PROC
;;;239    *******************************************************************************/
;;;240    void VKL060_Main(void)
000158  f7fffffe          BL       VKL060_Init
;;;241    {	
;;;242    	VKL060_Init();
;;;243    	
;;;244    	//选择外部时钟(OSCI脚)频率为32KHz(根据实际帧频修正这个频率)
;;;245    	//WriteCmdVKL060(VKL060_EXTCLK); //设置显示地址时VKL060_ADDRWR5的bit0一定要置1
;;;246    	
;;;247    	//整体闪烁命令
;;;248    	//WriteCmdVKL060(VKL060_BLKCTL_05HZ); //闪烁频率0.5Hz
;;;249    	//WriteCmdVKL060(VKL060_BLKCTL_1HZ); 	//闪烁频率1Hz
;;;250    	WriteCmdVKL060(VKL060_BLKCTL_2HZ); 	//闪烁频率2Hz
00015c  20f3              MOVS     r0,#0xf3
00015e  f7fffffe          BL       WriteCmdVKL060
;;;251    	//WriteCmdVKL060(VKL060_BLKCTL_OFF);	//闪烁关闭
;;;252    	
;;;253    	//全屏强制开命令
;;;254    	WriteCmdVKL060(VKL060_APCTL_ALLON2);	
000162  20fe              MOVS     r0,#0xfe
000164  f7fffffe          BL       WriteCmdVKL060
;;;255    	Delay_nmS(3000);					//延时
000168  f64030b8          MOV      r0,#0xbb8
00016c  f7fffffe          BL       Delay_nmS
;;;256    	//全屏强制关命令
;;;257    	WriteCmdVKL060(VKL060_APCTL_ALLOFF1);
000170  20fd              MOVS     r0,#0xfd
000172  f7fffffe          BL       WriteCmdVKL060
;;;258    	Delay_nmS(1000);					//延时
000176  f44f707a          MOV      r0,#0x3e8
00017a  f7fffffe          BL       Delay_nmS
;;;259    	
;;;260    	//全屏强制取消,恢复正常
;;;261    	WriteCmdVKL060(VKL060_APCTL_NORMAL);
00017e  20fc              MOVS     r0,#0xfc
000180  f7fffffe          BL       WriteCmdVKL060
;;;262    	WriteCmdVKL060(VKL060_BLKCTL_OFF);	//闪烁关闭
000184  20f0              MOVS     r0,#0xf0
000186  f7fffffe          BL       WriteCmdVKL060
;;;263    	
;;;264    	VKL060_DisAll(0x00);
00018a  2000              MOVS     r0,#0
00018c  f7fffffe          BL       VKL060_DisAll
;;;265    	while(1)
000190  e090              B        |L1.692|
                  |L1.402|
;;;266    	{			
;;;267    		//LCD全显
;;;268    		VKL060_DisAll(0xFF);			
000192  20ff              MOVS     r0,#0xff
000194  f7fffffe          BL       VKL060_DisAll
;;;269    		Delay_nmS(3000);					//延时
000198  f64030b8          MOV      r0,#0xbb8
00019c  f7fffffe          BL       Delay_nmS
;;;270    		
;;;271    		//LCD全关
;;;272    		VKL060_DisAll(0x00);			
0001a0  2000              MOVS     r0,#0
0001a2  f7fffffe          BL       VKL060_DisAll
;;;273    		Delay_nmS(3000);					//延时
0001a6  f64030b8          MOV      r0,#0xbb8
0001aa  f7fffffe          BL       Delay_nmS
;;;274    	
;;;275    		//LCD半显
;;;276    		VKL060_DisAll(0x55);		
0001ae  2055              MOVS     r0,#0x55
0001b0  f7fffffe          BL       VKL060_DisAll
;;;277    		ReadnDataVKL060(0,VKL060_readbuf,16);	//读回RAM数据
0001b4  2210              MOVS     r2,#0x10
0001b6  4941              LDR      r1,|L1.700|
0001b8  2000              MOVS     r0,#0
0001ba  f7fffffe          BL       ReadnDataVKL060
;;;278    		Delay_nmS(1500);					//延时
0001be  f24050dc          MOV      r0,#0x5dc
0001c2  f7fffffe          BL       Delay_nmS
;;;279    		VKL060_DisAll(0xAA);			
0001c6  20aa              MOVS     r0,#0xaa
0001c8  f7fffffe          BL       VKL060_DisAll
;;;280    		ReadnDataVKL060(0,VKL060_readbuf,16);	//读回RAM数据
0001cc  2210              MOVS     r2,#0x10
0001ce  493b              LDR      r1,|L1.700|
0001d0  2000              MOVS     r0,#0
0001d2  f7fffffe          BL       ReadnDataVKL060
;;;281    		Delay_nmS(1500);					//延时
0001d6  f24050dc          MOV      r0,#0x5dc
0001da  f7fffffe          BL       Delay_nmS
;;;282    		
;;;283    		//掉电
;;;284    		VKL060_DisAll(0x00);			//LCD全关		
0001de  2000              MOVS     r0,#0
0001e0  f7fffffe          BL       VKL060_DisAll
;;;285    		VKL060_Enter_PowerOff();	//进入掉电模式
0001e4  f7fffffe          BL       VKL060_Enter_PowerOff
;;;286    		Delay_nmS(5000);					//延时5S		
0001e8  f2413088          MOV      r0,#0x1388
0001ec  f7fffffe          BL       Delay_nmS
;;;287    		VKL060_Exit_PowerOff();	//退出掉电模式
0001f0  f7fffffe          BL       VKL060_Exit_PowerOff
;;;288    				
;;;289    		//LCD单点点亮
;;;290    		VKL060_DisAll(0x00);			//LCD全关
0001f4  2000              MOVS     r0,#0
0001f6  f7fffffe          BL       VKL060_DisAll
;;;291    		Delay_nmS(500);						//延时
0001fa  f44f70fa          MOV      r0,#0x1f4
0001fe  f7fffffe          BL       Delay_nmS
;;;292    		for(VKL060_segi=11;VKL060_segi<26;VKL060_segi++)//seg11-25
000202  200b              MOVS     r0,#0xb
000204  492e              LDR      r1,|L1.704|
000206  7008              STRB     r0,[r1,#0]
000208  e01e              B        |L1.584|
                  |L1.522|
;;;293    		{
;;;294    			for(VKL060_comi=0;VKL060_comi<4;VKL060_comi++)//com0-3
00020a  2000              MOVS     r0,#0
00020c  492d              LDR      r1,|L1.708|
00020e  7008              STRB     r0,[r1,#0]
000210  e011              B        |L1.566|
                  |L1.530|
;;;295    			{
;;;296    				VKL060_DisDotOn(VKL060_segi,VKL060_comi);		//LCD单点点亮
000212  482c              LDR      r0,|L1.708|
000214  7801              LDRB     r1,[r0,#0]  ; VKL060_comi
000216  482a              LDR      r0,|L1.704|
000218  7800              LDRB     r0,[r0,#0]  ; VKL060_segi
00021a  f7fffffe          BL       VKL060_DisDotOn
;;;297    				Delay_nmS(300);				//延时
00021e  f44f7096          MOV      r0,#0x12c
000222  f7fffffe          BL       Delay_nmS
;;;298    				VKL060_DisAll(0x00);
000226  2000              MOVS     r0,#0
000228  f7fffffe          BL       VKL060_DisAll
00022c  4825              LDR      r0,|L1.708|
00022e  7800              LDRB     r0,[r0,#0]            ;294  ; VKL060_comi
000230  1c40              ADDS     r0,r0,#1              ;294
000232  4924              LDR      r1,|L1.708|
000234  7008              STRB     r0,[r1,#0]            ;294
                  |L1.566|
000236  4823              LDR      r0,|L1.708|
000238  7800              LDRB     r0,[r0,#0]            ;294  ; VKL060_comi
00023a  2804              CMP      r0,#4                 ;294
00023c  dbe9              BLT      |L1.530|
00023e  4820              LDR      r0,|L1.704|
000240  7800              LDRB     r0,[r0,#0]            ;292  ; VKL060_segi
000242  1c40              ADDS     r0,r0,#1              ;292
000244  491e              LDR      r1,|L1.704|
000246  7008              STRB     r0,[r1,#0]            ;292
                  |L1.584|
000248  481d              LDR      r0,|L1.704|
00024a  7800              LDRB     r0,[r0,#0]            ;292  ; VKL060_segi
00024c  281a              CMP      r0,#0x1a              ;292
00024e  dbdc              BLT      |L1.522|
;;;299    			}
;;;300    		}
;;;301    		
;;;302    		//LCD单点关闭
;;;303    		VKL060_DisAll(0xff);			//LCD全显
000250  20ff              MOVS     r0,#0xff
000252  f7fffffe          BL       VKL060_DisAll
;;;304    		Delay_nmS(500);						//延时
000256  f44f70fa          MOV      r0,#0x1f4
00025a  f7fffffe          BL       Delay_nmS
;;;305    		for(VKL060_segi=11;VKL060_segi<26;VKL060_segi++)//seg11-25
00025e  200b              MOVS     r0,#0xb
000260  4917              LDR      r1,|L1.704|
000262  7008              STRB     r0,[r1,#0]
000264  e01e              B        |L1.676|
                  |L1.614|
;;;306    		{
;;;307    			for(VKL060_comi=0;VKL060_comi<4;VKL060_comi++)//com0-3
000266  2000              MOVS     r0,#0
000268  4916              LDR      r1,|L1.708|
00026a  7008              STRB     r0,[r1,#0]
00026c  e011              B        |L1.658|
                  |L1.622|
;;;308    			{
;;;309    				VKL060_DisDotOff(VKL060_segi,VKL060_comi);		//LCD单点关闭
00026e  4815              LDR      r0,|L1.708|
000270  7801              LDRB     r1,[r0,#0]  ; VKL060_comi
000272  4813              LDR      r0,|L1.704|
000274  7800              LDRB     r0,[r0,#0]  ; VKL060_segi
000276  f7fffffe          BL       VKL060_DisDotOff
;;;310    				Delay_nmS(300);				//延时
00027a  f44f7096          MOV      r0,#0x12c
00027e  f7fffffe          BL       Delay_nmS
;;;311    				VKL060_DisAll(0xff);
000282  20ff              MOVS     r0,#0xff
000284  f7fffffe          BL       VKL060_DisAll
000288  480e              LDR      r0,|L1.708|
00028a  7800              LDRB     r0,[r0,#0]            ;307  ; VKL060_comi
00028c  1c40              ADDS     r0,r0,#1              ;307
00028e  490d              LDR      r1,|L1.708|
000290  7008              STRB     r0,[r1,#0]            ;307
                  |L1.658|
000292  480c              LDR      r0,|L1.708|
000294  7800              LDRB     r0,[r0,#0]            ;307  ; VKL060_comi
000296  2804              CMP      r0,#4                 ;307
000298  dbe9              BLT      |L1.622|
00029a  4809              LDR      r0,|L1.704|
00029c  7800              LDRB     r0,[r0,#0]            ;305  ; VKL060_segi
00029e  1c40              ADDS     r0,r0,#1              ;305
0002a0  4907              LDR      r1,|L1.704|
0002a2  7008              STRB     r0,[r1,#0]            ;305
                  |L1.676|
0002a4  4806              LDR      r0,|L1.704|
0002a6  7800              LDRB     r0,[r0,#0]            ;305  ; VKL060_segi
0002a8  281a              CMP      r0,#0x1a              ;305
0002aa  dbdc              BLT      |L1.614|
;;;312    			}
;;;313    		}		
;;;314    		Delay_nmS(1000);					//延时
0002ac  f44f707a          MOV      r0,#0x3e8
0002b0  f7fffffe          BL       Delay_nmS
                  |L1.692|
0002b4  e76d              B        |L1.402|
;;;315    	}
;;;316    }
;;;317    /************************END OF FILE****/
                          ENDP

0002b6  0000              DCW      0x0000
                  |L1.696|
                          DCD      VKL060_dispram
                  |L1.700|
                          DCD      VKL060_readbuf
                  |L1.704|
                          DCD      VKL060_segi
                  |L1.708|
                          DCD      VKL060_comi

                          AREA ||.data||, DATA, ALIGN=0

                  VKL060_dispram
                          %        8
                  VKL060_readbuf
                          %        8
                  VKL060_segi
000010  00                DCB      0x00
                  VKL060_comi
000011  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\lcd_driver\\VKL060_I2C.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_VKL060_I2C_c_f70de489____REV16|
#line 114 "..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___12_VKL060_I2C_c_f70de489____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_VKL060_I2C_c_f70de489____REVSH|
#line 128
|__asm___12_VKL060_I2C_c_f70de489____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

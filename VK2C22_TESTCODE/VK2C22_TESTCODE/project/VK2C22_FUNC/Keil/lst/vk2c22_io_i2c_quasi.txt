; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\vk2c22_io_i2c_quasi.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\vk2c22_io_i2c_quasi.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M451Series\Include -I..\..\..\Library\StdDriver\inc -I..\Bsp -I..\User -I..\lcd_driver -I..\exti_driver -I..\led_driver -I..\touch -I..\dotmatix_lcd -I..\KH -I.\RTE\_project -ID:\KEIL_STM32\Packs\ARM\CMSIS\6.1.0\CMSIS\Core\Include -D__UVISION_VERSION=541 -D_RTE_ --omf_browse=.\obj\vk2c22_io_i2c_quasi.crf ..\lcd_driver\VK2C22_IO_I2C_QUASI.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  delay_nus PROC
;;;62     *******************************************************************************/
;;;63     void delay_nus(unsigned int n)	   
000000  e007              B        |L1.18|
                  |L1.2|
;;;64     {
;;;65     	unsigned char i;
;;;66     	while(n--)
;;;67     	{
;;;68     		i=10;
000002  210a              MOVS     r1,#0xa
;;;69     		while(i--)
000004  e000              B        |L1.8|
                  |L1.6|
;;;70     		{//nop指令根据单片机做相应的修改
;;;71     			__nop();
000006  bf00              NOP      
                  |L1.8|
000008  1e0a              SUBS     r2,r1,#0              ;69
00000a  f1a10301          SUB      r3,r1,#1              ;69
00000e  b2d9              UXTB     r1,r3                 ;69
000010  d1f9              BNE      |L1.6|
                  |L1.18|
000012  1e02              SUBS     r2,r0,#0              ;66
000014  f1a00001          SUB      r0,r0,#1              ;66
000018  d1f3              BNE      |L1.2|
;;;72     		}
;;;73     	}
;;;74     }
00001a  4770              BX       lr
;;;75     /*******************************************************************************
                          ENDP

                  delay_nms PROC
;;;81     *******************************************************************************/
;;;82     void delay_nms(unsigned long int n)
00001c  b510              PUSH     {r4,lr}
;;;83     {
00001e  4604              MOV      r4,r0
;;;84     	while(n--)
000020  e003              B        |L1.42|
                  |L1.34|
;;;85     	{
;;;86     		delay_nus(1000);
000022  f44f707a          MOV      r0,#0x3e8
000026  f7fffffe          BL       delay_nus
                  |L1.42|
00002a  1e20              SUBS     r0,r4,#0              ;84
00002c  f1a40401          SUB      r4,r4,#1              ;84
000030  d1f7              BNE      |L1.34|
;;;87     	}
;;;88     }
000032  bd10              POP      {r4,pc}
;;;89     /*******************************************************************************
                          ENDP

                  VK2C22_I2CStart PROC
;;;95     *******************************************************************************/
;;;96     void VK2C22_I2CStart( void )
000034  b500              PUSH     {lr}
;;;97     {
;;;98       VK2C22_SCL_H();
000036  2001              MOVS     r0,#1
000038  49fe              LDR      r1,|L1.1076|
00003a  6008              STR      r0,[r1,#0]
;;;99       VK2C22_SDA_H();
00003c  49fd              LDR      r1,|L1.1076|
00003e  3928              SUBS     r1,r1,#0x28
000040  6008              STR      r0,[r1,#0]
;;;100      delay_nus(VK2C22_CLK);
000042  200a              MOVS     r0,#0xa
000044  f7fffffe          BL       delay_nus
;;;101      VK2C22_SDA_L();
000048  2000              MOVS     r0,#0
00004a  49fa              LDR      r1,|L1.1076|
00004c  3928              SUBS     r1,r1,#0x28
00004e  6008              STR      r0,[r1,#0]
;;;102      delay_nus(VK2C22_CLK);
000050  200a              MOVS     r0,#0xa
000052  f7fffffe          BL       delay_nus
;;;103    }
000056  bd00              POP      {pc}
;;;104    /*******************************************************************************
                          ENDP

                  VK2C22_I2CStop PROC
;;;110    *******************************************************************************/
;;;111    void VK2C22_I2CStop( void )
000058  b500              PUSH     {lr}
;;;112    {
;;;113      VK2C22_SCL_H();
00005a  2001              MOVS     r0,#1
00005c  49f5              LDR      r1,|L1.1076|
00005e  6008              STR      r0,[r1,#0]
;;;114      VK2C22_SDA_L();
000060  2000              MOVS     r0,#0
000062  49f4              LDR      r1,|L1.1076|
000064  3928              SUBS     r1,r1,#0x28
000066  6008              STR      r0,[r1,#0]
;;;115      delay_nus(VK2C22_CLK);
000068  200a              MOVS     r0,#0xa
00006a  f7fffffe          BL       delay_nus
;;;116      VK2C22_SDA_H();
00006e  2001              MOVS     r0,#1
000070  49f0              LDR      r1,|L1.1076|
000072  3928              SUBS     r1,r1,#0x28
000074  6008              STR      r0,[r1,#0]
;;;117      delay_nus(VK2C22_CLK);
000076  200a              MOVS     r0,#0xa
000078  f7fffffe          BL       delay_nus
;;;118    }
00007c  bd00              POP      {pc}
;;;119    /*******************************************************************************
                          ENDP

                  VK2C22_I2CSlaveAck PROC
;;;125    *******************************************************************************/
;;;126    unsigned char VK2C22_I2CSlaveAck( void )
00007e  b530              PUSH     {r4,r5,lr}
;;;127    {
;;;128      unsigned int TimeOut;
;;;129      unsigned char RetValue;
;;;130    	
;;;131      VK2C22_SCL_L();
000080  2000              MOVS     r0,#0
000082  49ec              LDR      r1,|L1.1076|
000084  6008              STR      r0,[r1,#0]
;;;132      delay_nus(VK2C22_CLK);
000086  200a              MOVS     r0,#0xa
000088  f7fffffe          BL       delay_nus
;;;133      VK2C22_SCL_H();//第9个sclk上升沿
00008c  2001              MOVS     r0,#1
00008e  49e9              LDR      r1,|L1.1076|
000090  6008              STR      r0,[r1,#0]
;;;134      TimeOut = 10000;
000092  f2427510          MOV      r5,#0x2710
;;;135      while( TimeOut-- > 0 )
000096  e007              B        |L1.168|
                  |L1.152|
;;;136      {
;;;137        if( VK2C22_GET_SDA()!=0 )//读取ack
000098  48e6              LDR      r0,|L1.1076|
00009a  3828              SUBS     r0,r0,#0x28
00009c  6800              LDR      r0,[r0,#0]
00009e  b108              CBZ      r0,|L1.164|
;;;138        {
;;;139          RetValue = 1;
0000a0  2401              MOVS     r4,#1
0000a2  e001              B        |L1.168|
                  |L1.164|
;;;140        }
;;;141        else
;;;142        {
;;;143          RetValue = 0;
0000a4  2400              MOVS     r4,#0
;;;144          break;
0000a6  e003              B        |L1.176|
                  |L1.168|
0000a8  1e28              SUBS     r0,r5,#0              ;135
0000aa  f1a50501          SUB      r5,r5,#1              ;135
0000ae  d1f3              BNE      |L1.152|
                  |L1.176|
0000b0  bf00              NOP      
;;;145        }
;;;146      } 
;;;147    	VK2C22_SCL_L(); 
0000b2  2000              MOVS     r0,#0
0000b4  49df              LDR      r1,|L1.1076|
0000b6  6008              STR      r0,[r1,#0]
;;;148      
;;;149      return RetValue;
0000b8  4620              MOV      r0,r4
;;;150    }
0000ba  bd30              POP      {r4,r5,pc}
;;;151    /*******************************************************************************
                          ENDP

                  VK2C22_I2CSendAck PROC
;;;157    *******************************************************************************/
;;;158    void VK2C22_I2CSendAck( void )
0000bc  b500              PUSH     {lr}
;;;159    {
;;;160      VK2C22_SCL_L();
0000be  2000              MOVS     r0,#0
0000c0  49dc              LDR      r1,|L1.1076|
0000c2  6008              STR      r0,[r1,#0]
;;;161      VK2C22_SDA_L();
0000c4  49db              LDR      r1,|L1.1076|
0000c6  3928              SUBS     r1,r1,#0x28
0000c8  6008              STR      r0,[r1,#0]
;;;162      delay_nus(VK2C22_CLK*2);
0000ca  2014              MOVS     r0,#0x14
0000cc  f7fffffe          BL       delay_nus
;;;163      VK2C22_SCL_H();
0000d0  2001              MOVS     r0,#1
0000d2  49d8              LDR      r1,|L1.1076|
0000d4  6008              STR      r0,[r1,#0]
;;;164      delay_nus(VK2C22_CLK*2);
0000d6  2014              MOVS     r0,#0x14
0000d8  f7fffffe          BL       delay_nus
;;;165      VK2C22_SCL_L();
0000dc  2000              MOVS     r0,#0
0000de  49d5              LDR      r1,|L1.1076|
0000e0  6008              STR      r0,[r1,#0]
;;;166      VK2C22_SDA_H();
0000e2  2001              MOVS     r0,#1
0000e4  49d3              LDR      r1,|L1.1076|
0000e6  3928              SUBS     r1,r1,#0x28
0000e8  6008              STR      r0,[r1,#0]
;;;167    }
0000ea  bd00              POP      {pc}
;;;168    /*******************************************************************************
                          ENDP

                  VK2C22_I2CSendNAck PROC
;;;174    *******************************************************************************/
;;;175    void VK2C22_I2CSendNAck( void )
0000ec  b500              PUSH     {lr}
;;;176    {
;;;177      VK2C22_SCL_L();
0000ee  2000              MOVS     r0,#0
0000f0  49d0              LDR      r1,|L1.1076|
0000f2  6008              STR      r0,[r1,#0]
;;;178      VK2C22_SDA_H();
0000f4  2001              MOVS     r0,#1
0000f6  49cf              LDR      r1,|L1.1076|
0000f8  3928              SUBS     r1,r1,#0x28
0000fa  6008              STR      r0,[r1,#0]
;;;179      delay_nus(VK2C22_CLK);
0000fc  200a              MOVS     r0,#0xa
0000fe  f7fffffe          BL       delay_nus
;;;180      VK2C22_SCL_H();
000102  2001              MOVS     r0,#1
000104  49cb              LDR      r1,|L1.1076|
000106  6008              STR      r0,[r1,#0]
;;;181      delay_nus(VK2C22_CLK);
000108  200a              MOVS     r0,#0xa
00010a  f7fffffe          BL       delay_nus
;;;182    }
00010e  bd00              POP      {pc}
;;;183    /*******************************************************************************
                          ENDP

                  VK2C22_I2CWriteByte PROC
;;;189    *******************************************************************************/
;;;190    void VK2C22_I2CWriteByte( unsigned char byte )
000110  b530              PUSH     {r4,r5,lr}
;;;191    {
000112  4604              MOV      r4,r0
;;;192    	unsigned char i=8;
000114  2508              MOVS     r5,#8
;;;193    	while (i--)
000116  e019              B        |L1.332|
                  |L1.280|
;;;194    	{ 
;;;195    		VK2C22_SCL_L();
000118  2000              MOVS     r0,#0
00011a  49c6              LDR      r1,|L1.1076|
00011c  6008              STR      r0,[r1,#0]
;;;196    		if(byte&0x80)
00011e  f0040080          AND      r0,r4,#0x80
000122  b120              CBZ      r0,|L1.302|
;;;197    			VK2C22_SDA_H();
000124  2001              MOVS     r0,#1
000126  49c3              LDR      r1,|L1.1076|
000128  3928              SUBS     r1,r1,#0x28
00012a  6008              STR      r0,[r1,#0]
00012c  e003              B        |L1.310|
                  |L1.302|
;;;198    		else
;;;199    			VK2C22_SDA_L();
00012e  2000              MOVS     r0,#0
000130  49c0              LDR      r1,|L1.1076|
000132  3928              SUBS     r1,r1,#0x28
000134  6008              STR      r0,[r1,#0]
                  |L1.310|
;;;200    		byte<<=1; 
000136  0660              LSLS     r0,r4,#25
000138  0e04              LSRS     r4,r0,#24
;;;201    		delay_nus(VK2C22_CLK);
00013a  200a              MOVS     r0,#0xa
00013c  f7fffffe          BL       delay_nus
;;;202    		VK2C22_SCL_H();     
000140  2001              MOVS     r0,#1
000142  49bc              LDR      r1,|L1.1076|
000144  6008              STR      r0,[r1,#0]
;;;203    		delay_nus(VK2C22_CLK);
000146  200a              MOVS     r0,#0xa
000148  f7fffffe          BL       delay_nus
                  |L1.332|
00014c  1e28              SUBS     r0,r5,#0              ;193
00014e  f1a50101          SUB      r1,r5,#1              ;193
000152  b2cd              UXTB     r5,r1                 ;193
000154  d1e0              BNE      |L1.280|
;;;204    	}
;;;205    }
000156  bd30              POP      {r4,r5,pc}
;;;206    
                          ENDP

                  WriteCmdVK2C22 PROC
;;;213    *******************************************************************************/
;;;214    unsigned char WriteCmdVK2C22(unsigned char cmd)
000158  b510              PUSH     {r4,lr}
;;;215    {
00015a  4604              MOV      r4,r0
;;;216    	VK2C22_I2CStart();
00015c  f7fffffe          BL       VK2C22_I2CStart
;;;217    
;;;218    	VK2C22_I2CWriteByte( VK2C22_ADDRWR|0x00 );
000160  207e              MOVS     r0,#0x7e
000162  f7fffffe          BL       VK2C22_I2CWriteByte
;;;219    	if( 1 == VK2C22_I2CSlaveAck() )
000166  f7fffffe          BL       VK2C22_I2CSlaveAck
00016a  2801              CMP      r0,#1
00016c  d103              BNE      |L1.374|
;;;220    	{
;;;221    		VK2C22_I2CStop(); 
00016e  f7fffffe          BL       VK2C22_I2CStop
;;;222    		return 0;   
000172  2000              MOVS     r0,#0
                  |L1.372|
;;;223    	}
;;;224    	VK2C22_I2CWriteByte( cmd );
;;;225    	if( 1 == VK2C22_I2CSlaveAck() )
;;;226    	{
;;;227    		VK2C22_I2CStop(); 
;;;228    		return 0;   
;;;229    	}
;;;230      VK2C22_I2CStop();
;;;231     
;;;232      return 0;    //返回操作成败标志
;;;233    }
000174  bd10              POP      {r4,pc}
                  |L1.374|
000176  4620              MOV      r0,r4                 ;224
000178  f7fffffe          BL       VK2C22_I2CWriteByte
00017c  f7fffffe          BL       VK2C22_I2CSlaveAck
000180  2801              CMP      r0,#1                 ;225
000182  d103              BNE      |L1.396|
000184  f7fffffe          BL       VK2C22_I2CStop
000188  2000              MOVS     r0,#0                 ;228
00018a  e7f3              B        |L1.372|
                  |L1.396|
00018c  f7fffffe          BL       VK2C22_I2CStop
000190  2000              MOVS     r0,#0                 ;232
000192  e7ef              B        |L1.372|
;;;234    /*******************************************************************************
                          ENDP

                  VK2C22_I2CRDDat PROC
;;;240    *******************************************************************************/
;;;241    unsigned char VK2C22_I2CRDDat( void )
000194  b570              PUSH     {r4-r6,lr}
;;;242    {
;;;243    	unsigned char i,RetValue,bit;
;;;244    	
;;;245    	RetValue=0;	
000196  2500              MOVS     r5,#0
;;;246      for( i=0; i<8; i++ )
000198  2400              MOVS     r4,#0
00019a  e018              B        |L1.462|
                  |L1.412|
;;;247      {
;;;248    		VK2C22_SCL_H(); 
00019c  2001              MOVS     r0,#1
00019e  49a5              LDR      r1,|L1.1076|
0001a0  6008              STR      r0,[r1,#0]
;;;249        delay_nus(VK2C22_CLK);
0001a2  200a              MOVS     r0,#0xa
0001a4  f7fffffe          BL       delay_nus
;;;250        if( 1 == VK2C22_GET_SDA() )
0001a8  48a2              LDR      r0,|L1.1076|
0001aa  3828              SUBS     r0,r0,#0x28
0001ac  6800              LDR      r0,[r0,#0]
0001ae  2801              CMP      r0,#1
0001b0  d101              BNE      |L1.438|
;;;251          bit = 0X01;
0001b2  2601              MOVS     r6,#1
0001b4  e000              B        |L1.440|
                  |L1.438|
;;;252        else
;;;253          bit = 0x00;
0001b6  2600              MOVS     r6,#0
                  |L1.440|
;;;254          
;;;255        RetValue = (RetValue<<1)|bit;
0001b8  ea460045          ORR      r0,r6,r5,LSL #1
0001bc  b2c5              UXTB     r5,r0
;;;256        VK2C22_SCL_L();
0001be  2000              MOVS     r0,#0
0001c0  499c              LDR      r1,|L1.1076|
0001c2  6008              STR      r0,[r1,#0]
;;;257        delay_nus(VK2C22_CLK);
0001c4  200a              MOVS     r0,#0xa
0001c6  f7fffffe          BL       delay_nus
0001ca  1c60              ADDS     r0,r4,#1              ;246
0001cc  b2c4              UXTB     r4,r0                 ;246
                  |L1.462|
0001ce  2c08              CMP      r4,#8                 ;246
0001d0  dbe4              BLT      |L1.412|
;;;258    	}
;;;259      
;;;260      return RetValue;
0001d2  4628              MOV      r0,r5
;;;261    }
0001d4  bd70              POP      {r4-r6,pc}
;;;262    /*******************************************************************************
                          ENDP

                  WritenDataVK2C22 PROC
;;;270    *******************************************************************************/
;;;271    unsigned char  WritenDataVK2C22(unsigned char Addr,unsigned char *Databuf,unsigned char Cnt)
0001d6  b5f0              PUSH     {r4-r7,lr}
;;;272    {
0001d8  4607              MOV      r7,r0
0001da  460c              MOV      r4,r1
0001dc  4616              MOV      r6,r2
;;;273    	unsigned char n;
;;;274    	
;;;275    	//START信号	
;;;276    	VK2C22_I2CStart(); 									
0001de  f7fffffe          BL       VK2C22_I2CStart
;;;277    	//SLAVE地址
;;;278    	VK2C22_I2CWriteByte(VK2C22_ADDRWR); 	
0001e2  207e              MOVS     r0,#0x7e
0001e4  f7fffffe          BL       VK2C22_I2CWriteByte
;;;279    	if( 1 == VK2C22_I2CSlaveAck() )
0001e8  f7fffffe          BL       VK2C22_I2CSlaveAck
0001ec  2801              CMP      r0,#1
0001ee  d103              BNE      |L1.504|
;;;280    	{
;;;281    		VK2C22_I2CStop();													
0001f0  f7fffffe          BL       VK2C22_I2CStop
;;;282    		return 0;										
0001f4  2000              MOVS     r0,#0
                  |L1.502|
;;;283    	}
;;;284    	//显示RAM起始地址
;;;285    	VK2C22_I2CWriteByte(Addr); 						
;;;286    	if( 1 == VK2C22_I2CSlaveAck() )
;;;287    	{
;;;288    		VK2C22_I2CStop();													
;;;289    		return 0;
;;;290    	}
;;;291    	//发送Cnt个数据到显示RAM
;;;292    	for(n=0;n<Cnt;n++)
;;;293    	{ 
;;;294    		VK2C22_I2CWriteByte(*Databuf++);
;;;295    		if( VK2C22_I2CSlaveAck()==1 )
;;;296    		{
;;;297    			VK2C22_I2CStop();													
;;;298    			return 0;
;;;299    		}
;;;300    	}
;;;301    	//STOP信号
;;;302    	 VK2C22_I2CStop();											
;;;303    	 return 0;    
;;;304    }
0001f6  bdf0              POP      {r4-r7,pc}
                  |L1.504|
0001f8  4638              MOV      r0,r7                 ;285
0001fa  f7fffffe          BL       VK2C22_I2CWriteByte
0001fe  f7fffffe          BL       VK2C22_I2CSlaveAck
000202  2801              CMP      r0,#1                 ;286
000204  d103              BNE      |L1.526|
000206  f7fffffe          BL       VK2C22_I2CStop
00020a  2000              MOVS     r0,#0                 ;289
00020c  e7f3              B        |L1.502|
                  |L1.526|
00020e  2500              MOVS     r5,#0                 ;292
000210  e00d              B        |L1.558|
                  |L1.530|
000212  f8140b01          LDRB     r0,[r4],#1            ;294
000216  f7fffffe          BL       VK2C22_I2CWriteByte
00021a  f7fffffe          BL       VK2C22_I2CSlaveAck
00021e  2801              CMP      r0,#1                 ;295
000220  d103              BNE      |L1.554|
000222  f7fffffe          BL       VK2C22_I2CStop
000226  2000              MOVS     r0,#0                 ;298
000228  e7e5              B        |L1.502|
                  |L1.554|
00022a  1c68              ADDS     r0,r5,#1              ;292
00022c  b2c5              UXTB     r5,r0                 ;292
                  |L1.558|
00022e  42b5              CMP      r5,r6                 ;292
000230  dbef              BLT      |L1.530|
000232  f7fffffe          BL       VK2C22_I2CStop
000236  2000              MOVS     r0,#0                 ;303
000238  e7dd              B        |L1.502|
;;;305    /*******************************************************************************
                          ENDP

                  ReadnDataVK2C22 PROC
;;;313    *******************************************************************************/
;;;314    unsigned char  ReadnDataVK2C22(unsigned char Addr,unsigned char *Databuf,unsigned char Cnt)
00023a  b5f0              PUSH     {r4-r7,lr}
;;;315    {
00023c  4607              MOV      r7,r0
00023e  460c              MOV      r4,r1
000240  4616              MOV      r6,r2
;;;316    	unsigned char n;
;;;317    	
;;;318    	//START信号	
;;;319    	VK2C22_I2CStart(); 									
000242  f7fffffe          BL       VK2C22_I2CStart
;;;320    	//SLAVE地址写
;;;321    	VK2C22_I2CWriteByte(VK2C22_ADDRWR); 	
000246  207e              MOVS     r0,#0x7e
000248  f7fffffe          BL       VK2C22_I2CWriteByte
;;;322    	if( 1 == VK2C22_I2CSlaveAck() )
00024c  f7fffffe          BL       VK2C22_I2CSlaveAck
000250  2801              CMP      r0,#1
000252  d103              BNE      |L1.604|
;;;323    	{
;;;324    		VK2C22_I2CStop();													
000254  f7fffffe          BL       VK2C22_I2CStop
;;;325    		return 0;										
000258  2000              MOVS     r0,#0
                  |L1.602|
;;;326    	}                        
;;;327    	//显示RAM起始地址
;;;328    	VK2C22_I2CWriteByte(Addr); 						
;;;329    	if( 1 == VK2C22_I2CSlaveAck() )
;;;330    	{
;;;331    		VK2C22_I2CStop();													
;;;332    		return 0;
;;;333    	}
;;;334    	
;;;335    	//STOP信号
;;;336    	VK2C22_I2CStop();	
;;;337    	//START信号	
;;;338    	VK2C22_I2CStart(); 									
;;;339    	//SLAVE地址读
;;;340    	VK2C22_I2CWriteByte(VK2C22_ADDRRD); 	
;;;341    		if( 1 == VK2C22_I2CSlaveAck() )
;;;342    	{
;;;343    		VK2C22_I2CStop();													
;;;344    		return 0;										
;;;345    	}  
;;;346    	//读Cnt个数据到显示RAM
;;;347    	for(n=0;n<Cnt-1;n++)
;;;348    	{ 
;;;349    		*Databuf++=VK2C22_I2CRDDat();
;;;350    		VK2C22_I2CSendAck();
;;;351    	}
;;;352    	*Databuf++=VK2C22_I2CRDDat();
;;;353    	VK2C22_I2CSendNAck();
;;;354    	//STOP信号
;;;355    	VK2C22_I2CStop();											
;;;356    	 return 0;    
;;;357    }
00025a  bdf0              POP      {r4-r7,pc}
                  |L1.604|
00025c  4638              MOV      r0,r7                 ;328
00025e  f7fffffe          BL       VK2C22_I2CWriteByte
000262  f7fffffe          BL       VK2C22_I2CSlaveAck
000266  2801              CMP      r0,#1                 ;329
000268  d103              BNE      |L1.626|
00026a  f7fffffe          BL       VK2C22_I2CStop
00026e  2000              MOVS     r0,#0                 ;332
000270  e7f3              B        |L1.602|
                  |L1.626|
000272  f7fffffe          BL       VK2C22_I2CStop
000276  f7fffffe          BL       VK2C22_I2CStart
00027a  207f              MOVS     r0,#0x7f              ;340
00027c  f7fffffe          BL       VK2C22_I2CWriteByte
000280  f7fffffe          BL       VK2C22_I2CSlaveAck
000284  2801              CMP      r0,#1                 ;341
000286  d103              BNE      |L1.656|
000288  f7fffffe          BL       VK2C22_I2CStop
00028c  2000              MOVS     r0,#0                 ;344
00028e  e7e4              B        |L1.602|
                  |L1.656|
000290  2500              MOVS     r5,#0                 ;347
000292  e007              B        |L1.676|
                  |L1.660|
000294  f7fffffe          BL       VK2C22_I2CRDDat
000298  f8040b01          STRB     r0,[r4],#1            ;349
00029c  f7fffffe          BL       VK2C22_I2CSendAck
0002a0  1c68              ADDS     r0,r5,#1              ;347
0002a2  b2c5              UXTB     r5,r0                 ;347
                  |L1.676|
0002a4  1e70              SUBS     r0,r6,#1              ;347
0002a6  42a8              CMP      r0,r5                 ;347
0002a8  dcf4              BGT      |L1.660|
0002aa  f7fffffe          BL       VK2C22_I2CRDDat
0002ae  f8040b01          STRB     r0,[r4],#1            ;352
0002b2  f7fffffe          BL       VK2C22_I2CSendNAck
0002b6  f7fffffe          BL       VK2C22_I2CStop
0002ba  2000              MOVS     r0,#0                 ;356
0002bc  e7cd              B        |L1.602|
;;;358    /*******************************************************************************
                          ENDP

                  VK2C22_DisAll PROC
;;;365    *******************************************************************************/
;;;366    void VK2C22_DisAll(unsigned char dat)
0002be  b530              PUSH     {r4,r5,lr}
;;;367    {
0002c0  4605              MOV      r5,r0
;;;368    	unsigned char segi;
;;;369    	
;;;370    	for(segi=0;segi<22;segi++)
0002c2  2400              MOVS     r4,#0
0002c4  e003              B        |L1.718|
                  |L1.710|
;;;371    	{
;;;372    		VK2C22_dispram[segi]=dat;
0002c6  485c              LDR      r0,|L1.1080|
0002c8  5505              STRB     r5,[r0,r4]
0002ca  1c60              ADDS     r0,r4,#1              ;370
0002cc  b2c4              UXTB     r4,r0                 ;370
                  |L1.718|
0002ce  2c16              CMP      r4,#0x16              ;370
0002d0  dbf9              BLT      |L1.710|
;;;373    	}
;;;374    	WritenDataVK2C22(0,VK2C22_dispram,22);//这里送8bit数据对应2个SEG，每8bit数据地址加1，每8位数据1个ACK	
0002d2  2216              MOVS     r2,#0x16
0002d4  4958              LDR      r1,|L1.1080|
0002d6  2000              MOVS     r0,#0
0002d8  f7fffffe          BL       WritenDataVK2C22
;;;375    }
0002dc  bd30              POP      {r4,r5,pc}
;;;376    /*******************************************************************************
                          ENDP

                  VK2C22_DisDotOn PROC
;;;383    *******************************************************************************/
;;;384    void VK2C22_DisDotOn(unsigned char seg,unsigned char com)
0002de  b5f8              PUSH     {r3-r7,lr}
;;;385    {
0002e0  4604              MOV      r4,r0
0002e2  460d              MOV      r5,r1
;;;386    	unsigned char addrbit,tempdat;
;;;387    	
;;;388      if(seg%2==0)
0002e4  4620              MOV      r0,r4
0002e6  eb0471d0          ADD      r1,r4,r0,LSR #31
0002ea  1049              ASRS     r1,r1,#1
0002ec  eba40141          SUB      r1,r4,r1,LSL #1
0002f0  b919              CBNZ     r1,|L1.762|
;;;389    			addrbit=(1<<com);//这里送8位数据低4bit有效，每8bit数据地址加1，每8位数据1个ACK
0002f2  2001              MOVS     r0,#1
0002f4  40a8              LSLS     r0,r0,r5
0002f6  b2c6              UXTB     r6,r0
0002f8  e003              B        |L1.770|
                  |L1.762|
;;;390    		else
;;;391    			addrbit=(1<<(4+com));//这里送8位数据高4bit有效，每8bit数据地址加1，每8位数据1个ACK
0002fa  1d28              ADDS     r0,r5,#4
0002fc  2101              MOVS     r1,#1
0002fe  4081              LSLS     r1,r1,r0
000300  b2ce              UXTB     r6,r1
                  |L1.770|
;;;392    		tempdat=VK2C22_dispram[seg/2]|addrbit;
000302  4620              MOV      r0,r4
000304  eb0471d0          ADD      r1,r4,r0,LSR #31
000308  1049              ASRS     r1,r1,#1
00030a  4a4b              LDR      r2,|L1.1080|
00030c  5c51              LDRB     r1,[r2,r1]
00030e  4331              ORRS     r1,r1,r6
000310  9100              STR      r1,[sp,#0]
;;;393    	  VK2C22_dispram[seg/2]=tempdat;
000312  f89d1000          LDRB     r1,[sp,#0]
000316  eb0472d0          ADD      r2,r4,r0,LSR #31
00031a  1052              ASRS     r2,r2,#1
00031c  4b46              LDR      r3,|L1.1080|
00031e  5499              STRB     r1,[r3,r2]
;;;394    		WritenDataVK2C22(seg/2,&tempdat,1);	
000320  4627              MOV      r7,r4
000322  eb0471d7          ADD      r1,r4,r7,LSR #31
000326  f3c10047          UBFX     r0,r1,#1,#8
00032a  2201              MOVS     r2,#1
00032c  4669              MOV      r1,sp
00032e  f7fffffe          BL       WritenDataVK2C22
;;;395    }
000332  bdf8              POP      {r3-r7,pc}
;;;396    /*******************************************************************************
                          ENDP

                  VK2C22_DisDotOff PROC
;;;403    *******************************************************************************/
;;;404    void VK2C22_DisDotOff(unsigned char seg,unsigned char com)
000334  b5f8              PUSH     {r3-r7,lr}
;;;405    {
000336  4604              MOV      r4,r0
000338  460d              MOV      r5,r1
;;;406    	unsigned char addrbit,tempdat;
;;;407      
;;;408    	if(seg%2==0)
00033a  4620              MOV      r0,r4
00033c  eb0471d0          ADD      r1,r4,r0,LSR #31
000340  1049              ASRS     r1,r1,#1
000342  eba40141          SUB      r1,r4,r1,LSL #1
000346  b919              CBNZ     r1,|L1.848|
;;;409    			addrbit=(1<<com);//这里送8位数据低4bit有效，每8bit数据地址加1，每8位数据1个ACK
000348  2001              MOVS     r0,#1
00034a  40a8              LSLS     r0,r0,r5
00034c  b2c6              UXTB     r6,r0
00034e  e003              B        |L1.856|
                  |L1.848|
;;;410    		else
;;;411    			addrbit=(1<<(4+com));//这里送8位数据高4bit有效，每8bit数据地址加1，每8位数据1个ACK
000350  1d28              ADDS     r0,r5,#4
000352  2101              MOVS     r1,#1
000354  4081              LSLS     r1,r1,r0
000356  b2ce              UXTB     r6,r1
                  |L1.856|
;;;412    		tempdat=VK2C22_dispram[seg/2]&~addrbit;
000358  4620              MOV      r0,r4
00035a  eb0471d0          ADD      r1,r4,r0,LSR #31
00035e  1049              ASRS     r1,r1,#1
000360  4a35              LDR      r2,|L1.1080|
000362  5c51              LDRB     r1,[r2,r1]
000364  43b1              BICS     r1,r1,r6
000366  9100              STR      r1,[sp,#0]
;;;413    	  VK2C22_dispram[seg/2]=tempdat;
000368  f89d1000          LDRB     r1,[sp,#0]
00036c  eb0472d0          ADD      r2,r4,r0,LSR #31
000370  1052              ASRS     r2,r2,#1
000372  4b31              LDR      r3,|L1.1080|
000374  5499              STRB     r1,[r3,r2]
;;;414    		WritenDataVK2C22(seg/2,&tempdat,1);
000376  4627              MOV      r7,r4
000378  eb0471d7          ADD      r1,r4,r7,LSR #31
00037c  f3c10047          UBFX     r0,r1,#1,#8
000380  2201              MOVS     r2,#1
000382  4669              MOV      r1,sp
000384  f7fffffe          BL       WritenDataVK2C22
;;;415    	
;;;416    }
000388  bdf8              POP      {r3-r7,pc}
;;;417    /*******************************************************************************
                          ENDP

                  VK2C22_Enter_PowerOff PROC
;;;423    *******************************************************************************/
;;;424    void VK2C22_Enter_PowerOff(void)
00038a  b500              PUSH     {lr}
;;;425    {		
;;;426    //	WriteCmdVK2C22(VK2C22_MODESET|BIAS_1_2|F_80HZ|RCOFF_LCDOFF);  //模式设置  1/2 Bais 1/4 Duty帧频率80Hz,内部系统振荡器开，lcd关显示
;;;427    	WriteCmdVK2C22(VK2C22_MODESET|BIAS_1_3|F_80HZ|RCOFF_LCDOFF);  //模式设置  1/3 Bais 1/4 Duty帧频率80Hz,内部系统振荡器开，lcd关显示
00038c  2080              MOVS     r0,#0x80
00038e  f7fffffe          BL       WriteCmdVK2C22
;;;428    //	WriteCmdVK2C22(VK2C22_MODESET|BIAS_1_2|F_160HZ|RCOFF_LCDOFF); //模式设置  1/2 Bais 1/4 Duty帧频率160Hz,内部系统振荡器开，lcd关显示
;;;429    //	WriteCmdVK2C22(VK2C22_MODESET|BIAS_1_3|F_160HZ|RCOFF_LCDOFF); //模式设置  1/3 Bais 1/4 Duty帧频?60Hz,内部系统振荡器开，lcd关显示
;;;430    }
000392  bd00              POP      {pc}
;;;431    /*******************************************************************************
                          ENDP

                  VK2C22_Exit_PowerOff PROC
;;;437    *******************************************************************************/
;;;438    void VK2C22_Exit_PowerOff(void)
000394  b500              PUSH     {lr}
;;;439    {	
;;;440    //	WriteCmdVK2C22(VK2C22_MODESET|BIAS_1_2|F_80HZ|RCON_LCDON);  //模式设置  1/2 Bais 1/4 Duty帧频率80Hz,内部系统振荡器开，lcd开显示
;;;441    	WriteCmdVK2C22(VK2C22_MODESET|BIAS_1_3|F_80HZ|RCON_LCDON);  //模式设置  1/3 Bais 1/4 Duty帧频率80Hz,内部系统振荡器开，lcd开显示
000396  208c              MOVS     r0,#0x8c
000398  f7fffffe          BL       WriteCmdVK2C22
;;;442    //	WriteCmdVK2C22(VK2C22_MODESET|BIAS_1_2|F_160HZ|RCON_LCDON); //模式设置  1/2 Bais 1/4 Duty帧频率160Hz,内部系统振荡器开，lcd开显示
;;;443    //	WriteCmdVK2C22(VK2C22_MODESET|BIAS_1_3|F_160HZ|RCON_LCDON); //模式设置  1/3 Bais 1/4 Duty帧频?60Hz,内部系统振荡器开，lcd开显示
;;;444    }
00039c  bd00              POP      {pc}
;;;445    
                          ENDP

                  VK2C22_Lowlevel_Init PROC
;;;452    *******************************************************************************/
;;;453    void VK2C22_Lowlevel_Init(void)
00039e  b510              PUSH     {r4,lr}
;;;454    {
;;;455    	//通信线电平不同，建议加电平转换电路
;;;456    	//此函数根据客户单片机做相应的修改	
;;;457    	GPIO_SetMode(VK2C22_SCL_PORT, VK2C22_SCL_PIN, GPIO_MODE_OUTPUT);
0003a0  2201              MOVS     r2,#1
0003a2  03d1              LSLS     r1,r2,#15
0003a4  4825              LDR      r0,|L1.1084|
0003a6  f7fffffe          BL       GPIO_SetMode
;;;458    	GPIO_SetMode(VK2C22_SDA_PORT, VK2C22_SDA_PIN, GPIO_MODE_QUASI);
0003aa  2203              MOVS     r2,#3
0003ac  2120              MOVS     r1,#0x20
0003ae  4823              LDR      r0,|L1.1084|
0003b0  f7fffffe          BL       GPIO_SetMode
;;;459    	
;;;460      //I2C总线空闲为高电平		
;;;461    	VK2C22_SCL_H();  
0003b4  2001              MOVS     r0,#1
0003b6  491f              LDR      r1,|L1.1076|
0003b8  6008              STR      r0,[r1,#0]
;;;462    	VK2C22_SDA_H(); 	
0003ba  491e              LDR      r1,|L1.1076|
0003bc  3928              SUBS     r1,r1,#0x28
0003be  6008              STR      r0,[r1,#0]
;;;463    }
0003c0  bd10              POP      {r4,pc}
;;;464    /*******************************************************************************
                          ENDP

                  VK2C22_InitSequence PROC
;;;470    *******************************************************************************/
;;;471    void VK2C22_InitSequence(void)
0003c2  b510              PUSH     {r4,lr}
;;;472    {	
;;;473    	//管脚配置根据客户单片机做相应的修改
;;;474    	VK2C22_Lowlevel_Init();
0003c4  f7fffffe          BL       VK2C22_Lowlevel_Init
;;;475    	//1/4 Duty
;;;476    //	WriteCmdVK2C22(VK2C22_MODESET|BIAS_1_2|F_80HZ|RCON_LCDON);  //模式设置  1/2 Bais 1/4 Duty帧频率80Hz,内部系统振荡器开，lcd开显示
;;;477    	WriteCmdVK2C22(VK2C22_MODESET|BIAS_1_3|F_80HZ|RCON_LCDON);  //模式设置  1/3 Bais 1/4 Duty帧频率80Hz,内部系统振荡器开，lcd开显示
0003c8  208c              MOVS     r0,#0x8c
0003ca  f7fffffe          BL       WriteCmdVK2C22
;;;478    //	WriteCmdVK2C22(VK2C22_MODESET|BIAS_1_2|F_160HZ|RCON_LCDON); //模式设置  1/2 Bais 1/4 Duty帧频率160Hz,内部系统振荡器开，lcd开显示
;;;479    //	WriteCmdVK2C22(VK2C22_MODESET|BIAS_1_3|F_160HZ|RCON_LCDON); //模式设置  1/3 Bais 1/4 Duty帧频?60Hz,内部系统振荡器开，lcd开显示
;;;480    	VK2C22_maxcom=4;
0003ce  2004              MOVS     r0,#4
0003d0  491b              LDR      r1,|L1.1088|
0003d2  7008              STRB     r0,[r1,#0]
;;;481    	WriteCmdVK2C22(VK2C22_BLINKSET|BLINK_OFF); 		//闪烁关闭	
0003d4  20c0              MOVS     r0,#0xc0
0003d6  f7fffffe          BL       WriteCmdVK2C22
;;;482    //	WriteCmdVK2C22(VK2C22_BLINKSET|BLINK_2HZ); 		//闪烁2HZ
;;;483    //	WriteCmdVK2C22(VK2C22_BLINKSET|BLINK_1HZ); 		//闪烁1HZ
;;;484    //	WriteCmdVK2C22(VK2C22_BLINKSET|BLINK_0D5HZ); 	//闪烁0.5HZ
;;;485    	//SEG/VLCD共用脚设为VLCD，内部电压调整功能关闭,VLCD和VDD短接VR=0偏置电压=VDD
;;;486    //	WriteCmdVK2C22(VK2C22_IVASET|VLCDSEL_IVAOFF_R0); 
;;;487    	//SEG/VLCD共用脚设为VLCD，内部电压调整功能关闭,VLCD和VDD串接电阻VR>0偏置电压=VLCD
;;;488    //	WriteCmdVK2C22(VK2C22_IVASET|VLCDSEL_IVAOFF_R1); 
;;;489    	//SEG/VLCD共用脚设为SEG，内部偏置电压调整：1/3bias=0.652VDD 1/4bias=0.714VDD
;;;490    	WriteCmdVK2C22(VK2C22_IVASET|SEGSEL_IVA02H);	 
0003da  2072              MOVS     r0,#0x72
0003dc  f7fffffe          BL       WriteCmdVK2C22
;;;491    }
0003e0  bd10              POP      {r4,pc}
;;;492    /*******************************************************************************
                          ENDP

                  VK2C22_Init PROC
;;;498    *******************************************************************************/
;;;499    void VK2C22_Init(void)
0003e2  b510              PUSH     {r4,lr}
;;;500    {	
;;;501    	//管脚配置根据客户单片机做相应的修改
;;;502    	VK2C22_Lowlevel_Init();
0003e4  f7fffffe          BL       VK2C22_Lowlevel_Init
;;;503    	//初始化时序
;;;504    	VK2C22_InitSequence();
0003e8  f7fffffe          BL       VK2C22_InitSequence
;;;505    }
0003ec  bd10              POP      {r4,pc}
;;;506    
                          ENDP

                  VK2C22_Main PROC
;;;513    *******************************************************************************/
;;;514    void VK2C22_Main(void)
0003ee  f7fffffe          BL       VK2C22_Init
;;;515    {	
;;;516    	VK2C22_Init();
;;;517    	VK2C22_DisAll(0x00);
0003f2  2000              MOVS     r0,#0
0003f4  f7fffffe          BL       VK2C22_DisAll
;;;518    	while(1)
0003f8  e0ae              B        |L1.1368|
                  |L1.1018|
;;;519    	{
;;;520    		VK2C22_DisAll(0xff);			//LCD全显
0003fa  20ff              MOVS     r0,#0xff
0003fc  f7fffffe          BL       VK2C22_DisAll
;;;521    		delay_nms(3000);					//延时1S
000400  f64030b8          MOV      r0,#0xbb8
000404  f7fffffe          BL       delay_nms
;;;522    	
;;;523    		VK2C22_DisAll(0x00);			//LCD全关
000408  2000              MOVS     r0,#0
00040a  f7fffffe          BL       VK2C22_DisAll
;;;524    		delay_nms(3000);					//延时1S
00040e  f64030b8          MOV      r0,#0xbb8
000412  f7fffffe          BL       delay_nms
;;;525    		
;;;526    		//LCD半显
;;;527    		VK2C22_DisAll(0xAA);			
000416  20aa              MOVS     r0,#0xaa
000418  f7fffffe          BL       VK2C22_DisAll
;;;528    		ReadnDataVK2C22(0,VK2C22_readbuf,22);	//读回RAM数据
00041c  2216              MOVS     r2,#0x16
00041e  4909              LDR      r1,|L1.1092|
000420  2000              MOVS     r0,#0
000422  f7fffffe          BL       ReadnDataVK2C22
;;;529    		delay_nms(1500);					//延时
000426  f24050dc          MOV      r0,#0x5dc
00042a  f7fffffe          BL       delay_nms
;;;530    		VK2C22_DisAll(0x55);			
00042e  2055              MOVS     r0,#0x55
000430  e00a              B        |L1.1096|
000432  0000              DCW      0x0000
                  |L1.1076|
                          DCD      0x4000487c
                  |L1.1080|
                          DCD      VK2C22_dispram
                  |L1.1084|
                          DCD      0x40004040
                  |L1.1088|
                          DCD      VK2C22_maxcom
                  |L1.1092|
                          DCD      VK2C22_readbuf
                  |L1.1096|
000448  f7fffffe          BL       VK2C22_DisAll
;;;531    		ReadnDataVK2C22(0,VK2C22_readbuf,22);	//读回RAM数据
00044c  2216              MOVS     r2,#0x16
00044e  4943              LDR      r1,|L1.1372|
000450  2000              MOVS     r0,#0
000452  f7fffffe          BL       ReadnDataVK2C22
;;;532    		delay_nms(1500);					//延时
000456  f24050dc          MOV      r0,#0x5dc
00045a  f7fffffe          BL       delay_nms
;;;533    		
;;;534    		//掉电
;;;535    		VK2C22_DisAll(0x00);			//LCD全关		
00045e  2000              MOVS     r0,#0
000460  f7fffffe          BL       VK2C22_DisAll
;;;536    		VK2C22_Enter_PowerOff();	//进入掉电模式
000464  f7fffffe          BL       VK2C22_Enter_PowerOff
;;;537    		delay_nms(5000);					//延时5S		
000468  f2413088          MOV      r0,#0x1388
00046c  f7fffffe          BL       delay_nms
;;;538    		VK2C22_Exit_PowerOff();	//退出掉电模式
000470  f7fffffe          BL       VK2C22_Exit_PowerOff
;;;539    		
;;;540    		VK2C22_DisAll(0x00);			//LCD全关
000474  2000              MOVS     r0,#0
000476  f7fffffe          BL       VK2C22_DisAll
;;;541    		delay_nms(500);					  //延时
00047a  f44f70fa          MOV      r0,#0x1f4
00047e  f7fffffe          BL       delay_nms
;;;542    		for(VK2C22_segi=0;VK2C22_segi<VK2C22_SEGNUM;VK2C22_segi++)//seg
000482  2000              MOVS     r0,#0
000484  4936              LDR      r1,|L1.1376|
000486  7008              STRB     r0,[r1,#0]
000488  e027              B        |L1.1242|
                  |L1.1162|
;;;543    		{
;;;544    			for(VK2C22_comi=0;VK2C22_comi<VK2C22_maxcom;VK2C22_comi++)//com
00048a  2000              MOVS     r0,#0
00048c  4935              LDR      r1,|L1.1380|
00048e  7008              STRB     r0,[r1,#0]
000490  e018              B        |L1.1220|
                  |L1.1170|
;;;545    			{
;;;546    					VK2C22_DisDotOn(VK2C22_segtab[VK2C22_segi],VK2C22_comi);	//LCD单点点亮
000492  4935              LDR      r1,|L1.1384|
000494  4a32              LDR      r2,|L1.1376|
000496  7812              LDRB     r2,[r2,#0]  ; VK2C22_segi
000498  5c88              LDRB     r0,[r1,r2]
00049a  4932              LDR      r1,|L1.1380|
00049c  7809              LDRB     r1,[r1,#0]  ; VK2C22_comi
00049e  f7fffffe          BL       VK2C22_DisDotOn
;;;547    				delay_nms(300);				//延时300mS
0004a2  f44f7096          MOV      r0,#0x12c
0004a6  f7fffffe          BL       delay_nms
;;;548    				VK2C22_DisDotOff(VK2C22_segtab[VK2C22_segi],VK2C22_comi);	  //此行配合单点点亮函数实现单点点亮，屏蔽此行顺序点亮
0004aa  492f              LDR      r1,|L1.1384|
0004ac  4a2c              LDR      r2,|L1.1376|
0004ae  7812              LDRB     r2,[r2,#0]  ; VK2C22_segi
0004b0  5c88              LDRB     r0,[r1,r2]
0004b2  492c              LDR      r1,|L1.1380|
0004b4  7809              LDRB     r1,[r1,#0]  ; VK2C22_comi
0004b6  f7fffffe          BL       VK2C22_DisDotOff
0004ba  482a              LDR      r0,|L1.1380|
0004bc  7800              LDRB     r0,[r0,#0]            ;544  ; VK2C22_comi
0004be  1c40              ADDS     r0,r0,#1              ;544
0004c0  4928              LDR      r1,|L1.1380|
0004c2  7008              STRB     r0,[r1,#0]            ;544
                  |L1.1220|
0004c4  4827              LDR      r0,|L1.1380|
0004c6  7800              LDRB     r0,[r0,#0]            ;544  ; VK2C22_comi
0004c8  4928              LDR      r1,|L1.1388|
0004ca  7809              LDRB     r1,[r1,#0]            ;544  ; VK2C22_maxcom
0004cc  4288              CMP      r0,r1                 ;544
0004ce  dbe0              BLT      |L1.1170|
0004d0  4823              LDR      r0,|L1.1376|
0004d2  7800              LDRB     r0,[r0,#0]            ;542  ; VK2C22_segi
0004d4  1c40              ADDS     r0,r0,#1              ;542
0004d6  4922              LDR      r1,|L1.1376|
0004d8  7008              STRB     r0,[r1,#0]            ;542
                  |L1.1242|
0004da  4821              LDR      r0,|L1.1376|
0004dc  7800              LDRB     r0,[r0,#0]            ;542  ; VK2C22_segi
0004de  2828              CMP      r0,#0x28              ;542
0004e0  dbd3              BLT      |L1.1162|
;;;549    			}
;;;550    		}
;;;551    		
;;;552    		VK2C22_DisAll(0xff);			//LCD全显
0004e2  20ff              MOVS     r0,#0xff
0004e4  f7fffffe          BL       VK2C22_DisAll
;;;553    		delay_nms(500);					  //延时
0004e8  f44f70fa          MOV      r0,#0x1f4
0004ec  f7fffffe          BL       delay_nms
;;;554    		for(VK2C22_segi=0;VK2C22_segi<VK2C22_SEGNUM;VK2C22_segi++)//seg
0004f0  2000              MOVS     r0,#0
0004f2  491b              LDR      r1,|L1.1376|
0004f4  7008              STRB     r0,[r1,#0]
0004f6  e027              B        |L1.1352|
                  |L1.1272|
;;;555    		{
;;;556    			for(VK2C22_comi=0;VK2C22_comi<VK2C22_maxcom;VK2C22_comi++)//com
0004f8  2000              MOVS     r0,#0
0004fa  491a              LDR      r1,|L1.1380|
0004fc  7008              STRB     r0,[r1,#0]
0004fe  e018              B        |L1.1330|
                  |L1.1280|
;;;557    			{
;;;558    					VK2C22_DisDotOff(VK2C22_segtab[VK2C22_segi],VK2C22_comi);	//LCD单点关闭
000500  4919              LDR      r1,|L1.1384|
000502  4a17              LDR      r2,|L1.1376|
000504  7812              LDRB     r2,[r2,#0]  ; VK2C22_segi
000506  5c88              LDRB     r0,[r1,r2]
000508  4916              LDR      r1,|L1.1380|
00050a  7809              LDRB     r1,[r1,#0]  ; VK2C22_comi
00050c  f7fffffe          BL       VK2C22_DisDotOff
;;;559    				delay_nms(300);				//延时300mS
000510  f44f7096          MOV      r0,#0x12c
000514  f7fffffe          BL       delay_nms
;;;560    				VK2C22_DisDotOn(VK2C22_segtab[VK2C22_segi],VK2C22_comi);  //此行配合单点关闭函数实现单点关闭，屏蔽此行顺序关闭
000518  4913              LDR      r1,|L1.1384|
00051a  4a11              LDR      r2,|L1.1376|
00051c  7812              LDRB     r2,[r2,#0]  ; VK2C22_segi
00051e  5c88              LDRB     r0,[r1,r2]
000520  4910              LDR      r1,|L1.1380|
000522  7809              LDRB     r1,[r1,#0]  ; VK2C22_comi
000524  f7fffffe          BL       VK2C22_DisDotOn
000528  480e              LDR      r0,|L1.1380|
00052a  7800              LDRB     r0,[r0,#0]            ;556  ; VK2C22_comi
00052c  1c40              ADDS     r0,r0,#1              ;556
00052e  490d              LDR      r1,|L1.1380|
000530  7008              STRB     r0,[r1,#0]            ;556
                  |L1.1330|
000532  480c              LDR      r0,|L1.1380|
000534  7800              LDRB     r0,[r0,#0]            ;556  ; VK2C22_comi
000536  490d              LDR      r1,|L1.1388|
000538  7809              LDRB     r1,[r1,#0]            ;556  ; VK2C22_maxcom
00053a  4288              CMP      r0,r1                 ;556
00053c  dbe0              BLT      |L1.1280|
00053e  4808              LDR      r0,|L1.1376|
000540  7800              LDRB     r0,[r0,#0]            ;554  ; VK2C22_segi
000542  1c40              ADDS     r0,r0,#1              ;554
000544  4906              LDR      r1,|L1.1376|
000546  7008              STRB     r0,[r1,#0]            ;554
                  |L1.1352|
000548  4805              LDR      r0,|L1.1376|
00054a  7800              LDRB     r0,[r0,#0]            ;554  ; VK2C22_segi
00054c  2828              CMP      r0,#0x28              ;554
00054e  dbd3              BLT      |L1.1272|
;;;561    			}
;;;562    		}
;;;563    		delay_nms(1000);					  //延时
000550  f44f707a          MOV      r0,#0x3e8
000554  f7fffffe          BL       delay_nms
                  |L1.1368|
000558  e74f              B        |L1.1018|
;;;564    	}
;;;565    }
;;;566    /************************END OF FILE****/
                          ENDP

00055a  0000              DCW      0x0000
                  |L1.1372|
                          DCD      VK2C22_readbuf
                  |L1.1376|
                          DCD      VK2C22_segi
                  |L1.1380|
                          DCD      VK2C22_comi
                  |L1.1384|
                          DCD      VK2C22_segtab
                  |L1.1388|
                          DCD      VK2C22_maxcom

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  VK2C22_dispram
                          %        20
                  VK2C22_readbuf
                          %        22

                          AREA ||.data||, DATA, ALIGN=0

                  VK2C22_segtab
000000  00010203          DCB      0x00,0x01,0x02,0x03
000004  04050607          DCB      0x04,0x05,0x06,0x07
000008  08090a0b          DCB      0x08,0x09,0x0a,0x0b
00000c  0c0d0e0f          DCB      0x0c,0x0d,0x0e,0x0f
000010  10111213          DCB      0x10,0x11,0x12,0x13
000014  14151617          DCB      0x14,0x15,0x16,0x17
000018  18191a1b          DCB      0x18,0x19,0x1a,0x1b
00001c  1c1d1e1f          DCB      0x1c,0x1d,0x1e,0x1f
000020  20212223          DCB      0x20,0x21,0x22,0x23
000024  24252627          DCB      0x24,0x25,0x26,0x27
                  VK2C22_segi
000028  00                DCB      0x00
                  VK2C22_comi
000029  00                DCB      0x00
                  VK2C22_maxcom
00002a  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\lcd_driver\\VK2C22_IO_I2C_QUASI.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_VK2C22_IO_I2C_QUASI_c_06e40452____REV16|
#line 114 "..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___21_VK2C22_IO_I2C_QUASI_c_06e40452____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_VK2C22_IO_I2C_QUASI_c_06e40452____REVSH|
#line 128
|__asm___21_VK2C22_IO_I2C_QUASI_c_06e40452____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\vkl128_i2c.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\vkl128_i2c.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M451Series\Include -I..\..\..\Library\StdDriver\inc -I..\Bsp -I..\User -I..\lcd_driver -I..\exti_driver -I..\led_driver -I..\touch -I..\dotmatix_lcd -I..\KH -IC:\Users\Administator\Desktop\低功耗系列_VKL\VKL例程\VKL128_TESTCODE\project\VKL144_FUNC\Keil\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -D__UVISION_VERSION=515 -D_RTE_ --omf_browse=.\obj\vkl128_i2c.crf ..\lcd_driver\VKL128_I2C.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Delay_nuS PROC
;;;36     *******************************************************************************/
;;;37     void Delay_nuS(unsigned int n)	   
000000  e007              B        |L1.18|
                  |L1.2|
;;;38     {
;;;39     	unsigned char i;
;;;40     	while(n--)
;;;41     	{
;;;42     		i=10;
000002  210a              MOVS     r1,#0xa
;;;43     		while(i--)
000004  e000              B        |L1.8|
                  |L1.6|
;;;44     		{//nop指令根据单片机做相应的修改
;;;45     			__nop();
000006  bf00              NOP      
                  |L1.8|
000008  000a              MOVS     r2,r1                 ;43
00000a  f1a10301          SUB      r3,r1,#1              ;43
00000e  b2d9              UXTB     r1,r3                 ;43
000010  d1f9              BNE      |L1.6|
                  |L1.18|
000012  0002              MOVS     r2,r0                 ;40
000014  f1a00001          SUB      r0,r0,#1              ;40
000018  d1f3              BNE      |L1.2|
;;;46     		}
;;;47     	}
;;;48     }
00001a  4770              BX       lr
;;;49     /*******************************************************************************
                          ENDP

                  Delay_nmS PROC
;;;55     *******************************************************************************/
;;;56     void Delay_nmS(unsigned long int n)
00001c  b510              PUSH     {r4,lr}
;;;57     {
00001e  4604              MOV      r4,r0
;;;58     	while(n--)
000020  e003              B        |L1.42|
                  |L1.34|
;;;59     	{
;;;60     		Delay_nuS(1000);
000022  f44f707a          MOV      r0,#0x3e8
000026  f7fffffe          BL       Delay_nuS
                  |L1.42|
00002a  0020              MOVS     r0,r4                 ;58
00002c  f1a40401          SUB      r4,r4,#1              ;58
000030  d1f7              BNE      |L1.34|
;;;61     	}
;;;62     }
000032  bd10              POP      {r4,pc}
;;;63     /*******************************************************************************
                          ENDP

                  WriteCmdVKL128 PROC
;;;69     *******************************************************************************/
;;;70     void  WriteCmdVKL128(unsigned char cmd)
000034  b501              PUSH     {r0,lr}
;;;71     {
;;;72     	VKL128_I2C_Cmd(&cmd,1);
000036  2101              MOVS     r1,#1
000038  4668              MOV      r0,sp
00003a  f7fffffe          BL       VKL128_I2C_Cmd
;;;73     }
00003e  bd08              POP      {r3,pc}
;;;74     /*******************************************************************************
                          ENDP

                  WritenDataVKL128 PROC
;;;82     *******************************************************************************/
;;;83     void  WritenDataVKL128(unsigned char Addr,unsigned char *Databuf,unsigned char cnt)
000040  b570              PUSH     {r4-r6,lr}
;;;84     {
000042  4604              MOV      r4,r0
000044  460d              MOV      r5,r1
000046  4616              MOV      r6,r2
;;;85     	VKL128_I2C_WRDat(Addr,Databuf,cnt);
000048  4632              MOV      r2,r6
00004a  4629              MOV      r1,r5
00004c  4620              MOV      r0,r4
00004e  f7fffffe          BL       VKL128_I2C_WRDat
;;;86     }
000052  bd70              POP      {r4-r6,pc}
;;;87     
                          ENDP

                  ReadnDataVKL128 PROC
;;;96     *******************************************************************************/
;;;97     unsigned char  ReadnDataVKL128(unsigned char Addr,unsigned char *Databuf,unsigned char Cnt)
000054  b570              PUSH     {r4-r6,lr}
;;;98     {
000056  4604              MOV      r4,r0
000058  460d              MOV      r5,r1
00005a  4616              MOV      r6,r2
;;;99     	VKL128_I2C_RDDat(Addr,Databuf,Cnt);
00005c  4632              MOV      r2,r6
00005e  4629              MOV      r1,r5
000060  4620              MOV      r0,r4
000062  f7fffffe          BL       VKL128_I2C_RDDat
;;;100    	return 0;
000066  2000              MOVS     r0,#0
;;;101    }
000068  bd70              POP      {r4-r6,pc}
;;;102    /*******************************************************************************
                          ENDP

                  VKL128_DisAll PROC
;;;109    *******************************************************************************/
;;;110    void VKL128_DisAll(unsigned char dat)
00006a  b570              PUSH     {r4-r6,lr}
;;;111    {
00006c  4605              MOV      r5,r0
;;;112    	unsigned char segi;
;;;113    	
;;;114    	for(segi=0;segi<16;segi++)
00006e  2400              MOVS     r4,#0
000070  e003              B        |L1.122|
                  |L1.114|
;;;115    	{
;;;116    		VKL128_dispram[segi]=dat;
000072  48a8              LDR      r0,|L1.788|
000074  5505              STRB     r5,[r0,r4]
000076  1c60              ADDS     r0,r4,#1              ;114
000078  b2c4              UXTB     r4,r0                 ;114
                  |L1.122|
00007a  2c10              CMP      r4,#0x10              ;114
00007c  dbf9              BLT      |L1.114|
;;;117    	}
;;;118    	WritenDataVKL128(0,VKL128_dispram,16);	//这里送8bit数据对应2个SEG，每4bit数据地址加1，每8位数据1个ACK
00007e  2210              MOVS     r2,#0x10
000080  49a4              LDR      r1,|L1.788|
000082  2000              MOVS     r0,#0
000084  f7fffffe          BL       WritenDataVKL128
;;;119    }
000088  bd70              POP      {r4-r6,pc}
;;;120    /*******************************************************************************
                          ENDP

                  VKL128_DisDotOn PROC
;;;127    *******************************************************************************/
;;;128    void VKL128_DisDotOn(unsigned char seg,unsigned char com)
00008a  b5f8              PUSH     {r3-r7,lr}
;;;129    {
00008c  4604              MOV      r4,r0
00008e  460d              MOV      r5,r1
;;;130    	unsigned char addrbyte,addrbit,tempdat;
;;;131    	
;;;132    	//计算com/seg对应的显示RAM地址和bit
;;;133    	addrbyte=seg/2*2;
000090  4620              MOV      r0,r4
000092  eb0471d0          ADD      r1,r4,r0,LSR #31
000096  1049              ASRS     r1,r1,#1
000098  0649              LSLS     r1,r1,#25
00009a  0e0f              LSRS     r7,r1,#24
;;;134    	if((seg%2)==0)
00009c  eb0471d0          ADD      r1,r4,r0,LSR #31
0000a0  1049              ASRS     r1,r1,#1
0000a2  eba40141          SUB      r1,r4,r1,LSL #1
0000a6  b919              CBNZ     r1,|L1.176|
;;;135    		addrbit=(1<<com);
0000a8  2001              MOVS     r0,#1
0000aa  40a8              LSLS     r0,r0,r5
0000ac  b2c6              UXTB     r6,r0
0000ae  e003              B        |L1.184|
                  |L1.176|
;;;136    	else
;;;137    		addrbit=(1<<(4+com));
0000b0  1d28              ADDS     r0,r5,#4
0000b2  2101              MOVS     r1,#1
0000b4  4081              LSLS     r1,r1,r0
0000b6  b2ce              UXTB     r6,r1
                  |L1.184|
;;;138    	tempdat=VKL128_dispram[seg/2]|addrbit;
0000b8  4620              MOV      r0,r4
0000ba  eb0471d0          ADD      r1,r4,r0,LSR #31
0000be  1049              ASRS     r1,r1,#1
0000c0  4a94              LDR      r2,|L1.788|
0000c2  5c51              LDRB     r1,[r2,r1]
0000c4  4331              ORRS     r1,r1,r6
0000c6  9100              STR      r1,[sp,#0]
;;;139    	VKL128_dispram[seg/2]=tempdat;
0000c8  f89d1000          LDRB     r1,[sp,#0]
0000cc  eb0472d0          ADD      r2,r4,r0,LSR #31
0000d0  1052              ASRS     r2,r2,#1
0000d2  4b90              LDR      r3,|L1.788|
0000d4  5499              STRB     r1,[r3,r2]
;;;140    	WritenDataVKL128(addrbyte,&tempdat,1);		//这里送8bit数据对应2个SEG，seg/com对应的bit置1，其余7bit不改变
0000d6  2201              MOVS     r2,#1
0000d8  4669              MOV      r1,sp
0000da  4638              MOV      r0,r7
0000dc  f7fffffe          BL       WritenDataVKL128
;;;141    }
0000e0  bdf8              POP      {r3-r7,pc}
;;;142    /*******************************************************************************
                          ENDP

                  VKL128_DisDotOff PROC
;;;149    *******************************************************************************/
;;;150    void VKL128_DisDotOff(unsigned char seg,unsigned char com)
0000e2  b5f8              PUSH     {r3-r7,lr}
;;;151    {
0000e4  4604              MOV      r4,r0
0000e6  460d              MOV      r5,r1
;;;152    	unsigned char addrbyte,addrbit,tempdat;
;;;153    	
;;;154    	//计算com/seg对应的显示RAM地址和bit
;;;155    	addrbyte=seg/2*2;
0000e8  4620              MOV      r0,r4
0000ea  eb0471d0          ADD      r1,r4,r0,LSR #31
0000ee  1049              ASRS     r1,r1,#1
0000f0  0649              LSLS     r1,r1,#25
0000f2  0e0f              LSRS     r7,r1,#24
;;;156    	if((seg%2)==0)
0000f4  eb0471d0          ADD      r1,r4,r0,LSR #31
0000f8  1049              ASRS     r1,r1,#1
0000fa  eba40141          SUB      r1,r4,r1,LSL #1
0000fe  b919              CBNZ     r1,|L1.264|
;;;157    		addrbit=(1<<com);
000100  2001              MOVS     r0,#1
000102  40a8              LSLS     r0,r0,r5
000104  b2c6              UXTB     r6,r0
000106  e003              B        |L1.272|
                  |L1.264|
;;;158    	else
;;;159    		addrbit=(1<<(4+com));
000108  1d28              ADDS     r0,r5,#4
00010a  2101              MOVS     r1,#1
00010c  4081              LSLS     r1,r1,r0
00010e  b2ce              UXTB     r6,r1
                  |L1.272|
;;;160    	tempdat=VKL128_dispram[seg/2]&(~addrbit);
000110  4620              MOV      r0,r4
000112  eb0471d0          ADD      r1,r4,r0,LSR #31
000116  1049              ASRS     r1,r1,#1
000118  4a7e              LDR      r2,|L1.788|
00011a  5c51              LDRB     r1,[r2,r1]
00011c  43b1              BICS     r1,r1,r6
00011e  9100              STR      r1,[sp,#0]
;;;161    	VKL128_dispram[seg/2]=tempdat;
000120  f89d1000          LDRB     r1,[sp,#0]
000124  eb0472d0          ADD      r2,r4,r0,LSR #31
000128  1052              ASRS     r2,r2,#1
00012a  4b7a              LDR      r3,|L1.788|
00012c  5499              STRB     r1,[r3,r2]
;;;162    	WritenDataVKL128(addrbyte,&tempdat,1);		//这里送8bit数据对应2个SEG，seg/com对应的bit清0，其余7bit不改变
00012e  2201              MOVS     r2,#1
000130  4669              MOV      r1,sp
000132  4638              MOV      r0,r7
000134  f7fffffe          BL       WritenDataVKL128
;;;163    }
000138  bdf8              POP      {r3-r7,pc}
;;;164    /*******************************************************************************
                          ENDP

                  VKL128_Enter_PowerOff PROC
;;;170    *******************************************************************************/
;;;171    unsigned char VKL128_Enter_PowerOff(void)
00013a  b510              PUSH     {r4,lr}
;;;172    {		
;;;173    	WriteCmdVKL128(VKL128_LCD_OFF);	//关显示
00013c  20c0              MOVS     r0,#0xc0
00013e  f7fffffe          BL       WriteCmdVKL128
;;;174    	return 0;
000142  2000              MOVS     r0,#0
;;;175    }
000144  bd10              POP      {r4,pc}
;;;176    /*******************************************************************************
                          ENDP

                  VKL128_InitSequence PROC
;;;198    *******************************************************************************/
;;;199    unsigned char VKL128_InitSequence(void)
000146  b508              PUSH     {r3,lr}
;;;200    {			
;;;201    	unsigned char  cmdbuf[3];
;;;202      //上电初始化时序（参考数据手册上电复位时序图和参数）	
;;;203    	//上电100uS后初始化
;;;204      Delay_nuS(100);       
000148  2064              MOVS     r0,#0x64
00014a  f7fffffe          BL       Delay_nuS
;;;205    	//STOP信号
;;;206    //	I2C_STOP(I2C0);
;;;207    	//系统设置命令(软复位)
;;;208    	cmdbuf[0]=VKL128_SOFTRST;
00014e  20ea              MOVS     r0,#0xea
000150  f88d0000          STRB     r0,[sp,#0]
;;;209    	//显示控制命令(设置帧频，功耗模式和驱动方式)，电流为实测样品值，仅供参考
;;;210    	//cmdbuf[1]=(VKL128_FR80HZ|VKL128_SRNOR|VKL128_LINER);  	//上电默认 	VDD=5V:18.2uA  	VDD=3.3V:13uA
;;;211    	cmdbuf[1]=(VKL128_FR53HZ|VKL128_SRPM1|VKL128_FRAMER);  //最省电 		VDD=5V:9.1uA  VDD=3.3V:6.8uA
000154  20bc              MOVS     r0,#0xbc
000156  f88d0001          STRB     r0,[sp,#1]
;;;212    	//cmdbuf[1]=(VKL128_FR80HZ|VKL128_SRHP|VKL128_LINER);  	//电流最大 			VDD=5V:20uA  	VDD=3.3V:15uA 
;;;213      //模式设置命令
;;;214    	cmdbuf[2]=(VKL128_BIAS_1_3|VKL128_LCD_ON);		//1/3bias,打开显示 
00015a  20c8              MOVS     r0,#0xc8
00015c  f88d0002          STRB     r0,[sp,#2]
;;;215    	//cmdbuf[2]=(VKL128_BIAS_1_2|VKL128_LCD_ON);		//1/2bias,打开显示 
;;;216    	VKL128_I2C_Cmd(cmdbuf,3);
000160  2103              MOVS     r1,#3
000162  4668              MOV      r0,sp
000164  f7fffffe          BL       VKL128_I2C_Cmd
;;;217    		
;;;218      return  0; 
000168  2000              MOVS     r0,#0
;;;219    }
00016a  bd08              POP      {r3,pc}
;;;220    /*******************************************************************************
                          ENDP

                  VKL128_Exit_PowerOff PROC
;;;182    *******************************************************************************/
;;;183    unsigned char VKL128_Exit_PowerOff(void)
00016c  b510              PUSH     {r4,lr}
;;;184    {	
;;;185    	unsigned char errorflag; 
;;;186    	
;;;187    	//退出掉电模式重新初始化时序
;;;188    	errorflag=VKL128_InitSequence();
00016e  f7fffffe          BL       VKL128_InitSequence
000172  4604              MOV      r4,r0
;;;189    	
;;;190      return(errorflag);
000174  4620              MOV      r0,r4
;;;191    }
000176  bd10              POP      {r4,pc}
;;;192    /*******************************************************************************
                          ENDP

                  VKL128_Lowlevel_Init PROC
;;;226    *******************************************************************************/
;;;227    void VKL128_Lowlevel_Init(void)
000178  b510              PUSH     {r4,lr}
;;;228    {
;;;229    	//通信线电平不同，建议加电平转换电路
;;;230    	//此函数根据客户单片机做相应的修改	
;;;231    	GPIO_SetMode(VKL128_SCL_PORT, VKL128_SCL_PIN, GPIO_MODE_OUTPUT);
00017a  2201              MOVS     r2,#1
00017c  03d1              LSLS     r1,r2,#15
00017e  4866              LDR      r0,|L1.792|
000180  f7fffffe          BL       GPIO_SetMode
;;;232    	GPIO_SetMode(VKL128_SDA_PORT, VKL128_SDA_PIN, GPIO_MODE_QUASI);
000184  2203              MOVS     r2,#3
000186  2120              MOVS     r1,#0x20
000188  4863              LDR      r0,|L1.792|
00018a  f7fffffe          BL       GPIO_SetMode
;;;233    	
;;;234      //I2C总线空闲为高电平	
;;;235    	VKL128_SCL_H();  
00018e  2001              MOVS     r0,#1
000190  4962              LDR      r1,|L1.796|
000192  6008              STR      r0,[r1,#0]
;;;236    	VKL128_SDA_H(); 	
000194  4961              LDR      r1,|L1.796|
000196  3928              SUBS     r1,r1,#0x28
000198  6008              STR      r0,[r1,#0]
;;;237    }
00019a  bd10              POP      {r4,pc}
;;;238    /*******************************************************************************
                          ENDP

                  VKL128_Init PROC
;;;244    *******************************************************************************/
;;;245    void VKL128_Init(void)
00019c  b510              PUSH     {r4,lr}
;;;246    {	
;;;247    	//管脚配置根据客户单片机做相应的修改
;;;248    	VKL128_Lowlevel_Init();
00019e  f7fffffe          BL       VKL128_Lowlevel_Init
;;;249    	//初始化时序
;;;250    	VKL128_InitSequence();
0001a2  f7fffffe          BL       VKL128_InitSequence
;;;251    }
0001a6  bd10              POP      {r4,pc}
;;;252    /*******************************************************************************
                          ENDP

                  VKL128_Main PROC
;;;258    *******************************************************************************/
;;;259    void VKL128_Main(void)
0001a8  f7fffffe          BL       VKL128_Init
;;;260    {	
;;;261    	VKL128_Init();
;;;262    	
;;;263    	//选择外部时钟(OSCI脚)频率为32KHz(根据实际帧频修正这个频率)
;;;264    	//WriteCmdVKL128(VKL128_EXTCLK); //设置显示地址时VKL128_ADDRWR5的bit0一定要置1
;;;265    	
;;;266    	//整体闪烁命令
;;;267    	//WriteCmdVKL128(VKL128_BLKCTL_05HZ); //闪烁频率0.5Hz
;;;268    	//WriteCmdVKL128(VKL128_BLKCTL_1HZ); 	//闪烁频率1Hz
;;;269    	WriteCmdVKL128(VKL128_BLKCTL_2HZ); 	//闪烁频率2Hz
0001ac  20f3              MOVS     r0,#0xf3
0001ae  f7fffffe          BL       WriteCmdVKL128
;;;270    	//WriteCmdVKL128(VKL128_BLKCTL_OFF);	//闪烁关闭
;;;271    	
;;;272    	//全屏强制开命令
;;;273    	WriteCmdVKL128(VKL128_APCTL_ALLON2);	
0001b2  20fe              MOVS     r0,#0xfe
0001b4  f7fffffe          BL       WriteCmdVKL128
;;;274    	Delay_nmS(3000);					//延时
0001b8  f64030b8          MOV      r0,#0xbb8
0001bc  f7fffffe          BL       Delay_nmS
;;;275    	//全屏强制关命令
;;;276    	WriteCmdVKL128(VKL128_APCTL_ALLOFF1);
0001c0  20fd              MOVS     r0,#0xfd
0001c2  f7fffffe          BL       WriteCmdVKL128
;;;277    	Delay_nmS(1000);					//延时
0001c6  f44f707a          MOV      r0,#0x3e8
0001ca  f7fffffe          BL       Delay_nmS
;;;278    	
;;;279    	//全屏强制取消,恢复正常
;;;280    	WriteCmdVKL128(VKL128_APCTL_NORMAL);
0001ce  20fc              MOVS     r0,#0xfc
0001d0  f7fffffe          BL       WriteCmdVKL128
;;;281    	WriteCmdVKL128(VKL128_BLKCTL_OFF);	//闪烁关闭
0001d4  20f0              MOVS     r0,#0xf0
0001d6  f7fffffe          BL       WriteCmdVKL128
;;;282    	
;;;283    	VKL128_DisAll(0x00);
0001da  2000              MOVS     r0,#0
0001dc  f7fffffe          BL       VKL128_DisAll
;;;284    	while(1)
0001e0  e096              B        |L1.784|
                  |L1.482|
;;;285    	{		
;;;286    		//LCD全显
;;;287    		VKL128_DisAll(0xFF);			
0001e2  20ff              MOVS     r0,#0xff
0001e4  f7fffffe          BL       VKL128_DisAll
;;;288    		Delay_nmS(3000);					//延时
0001e8  f64030b8          MOV      r0,#0xbb8
0001ec  f7fffffe          BL       Delay_nmS
;;;289    		
;;;290    		//LCD全关
;;;291    		VKL128_DisAll(0x00);			
0001f0  2000              MOVS     r0,#0
0001f2  f7fffffe          BL       VKL128_DisAll
;;;292    		Delay_nmS(3000);					//延时
0001f6  f64030b8          MOV      r0,#0xbb8
0001fa  f7fffffe          BL       Delay_nmS
;;;293    	
;;;294    		//LCD半显
;;;295    		VKL128_DisAll(0x55);		
0001fe  2055              MOVS     r0,#0x55
000200  f7fffffe          BL       VKL128_DisAll
;;;296    		ReadnDataVKL128(0,VKL128_readbuf,16);	//读回RAM数据
000204  2210              MOVS     r2,#0x10
000206  4946              LDR      r1,|L1.800|
000208  2000              MOVS     r0,#0
00020a  f7fffffe          BL       ReadnDataVKL128
;;;297    		Delay_nmS(1500);					//延时
00020e  f24050dc          MOV      r0,#0x5dc
000212  f7fffffe          BL       Delay_nmS
;;;298    		VKL128_DisAll(0xAA);			
000216  20aa              MOVS     r0,#0xaa
000218  f7fffffe          BL       VKL128_DisAll
;;;299    		ReadnDataVKL128(0,VKL128_readbuf,16);	//读回RAM数据
00021c  2210              MOVS     r2,#0x10
00021e  4940              LDR      r1,|L1.800|
000220  2000              MOVS     r0,#0
000222  f7fffffe          BL       ReadnDataVKL128
;;;300    		Delay_nmS(1500);					//延时
000226  f24050dc          MOV      r0,#0x5dc
00022a  f7fffffe          BL       Delay_nmS
;;;301    		
;;;302    		//掉电
;;;303    		VKL128_DisAll(0x00);			//LCD全关		
00022e  2000              MOVS     r0,#0
000230  f7fffffe          BL       VKL128_DisAll
;;;304    		VKL128_Enter_PowerOff();	//进入掉电模式
000234  f7fffffe          BL       VKL128_Enter_PowerOff
;;;305    		Delay_nmS(5000);					//延时5S		
000238  f2413088          MOV      r0,#0x1388
00023c  f7fffffe          BL       Delay_nmS
;;;306    		VKL128_Exit_PowerOff();	//退出掉电模式
000240  f7fffffe          BL       VKL128_Exit_PowerOff
;;;307    				
;;;308    		//LCD单点点亮
;;;309    		VKL128_DisAll(0x00);			//LCD全关
000244  2000              MOVS     r0,#0
000246  f7fffffe          BL       VKL128_DisAll
;;;310    		Delay_nmS(500);						//延时
00024a  f44f70fa          MOV      r0,#0x1f4
00024e  f7fffffe          BL       Delay_nmS
;;;311    		for(VKL128_segi=0;VKL128_segi<32;VKL128_segi++)//seg0-35
000252  2000              MOVS     r0,#0
000254  4933              LDR      r1,|L1.804|
000256  7008              STRB     r0,[r1,#0]
000258  e021              B        |L1.670|
                  |L1.602|
;;;312    		{
;;;313    			for(VKL128_comi=0;VKL128_comi<4;VKL128_comi++)//com0-3
00025a  2000              MOVS     r0,#0
00025c  4932              LDR      r1,|L1.808|
00025e  7008              STRB     r0,[r1,#0]
000260  e014              B        |L1.652|
                  |L1.610|
;;;314    			{
;;;315    				VKL128_DisDotOn(VKL128_segi,VKL128_comi);		//LCD单点点亮
000262  4831              LDR      r0,|L1.808|
000264  7801              LDRB     r1,[r0,#0]  ; VKL128_comi
000266  482f              LDR      r0,|L1.804|
000268  7800              LDRB     r0,[r0,#0]  ; VKL128_segi
00026a  f7fffffe          BL       VKL128_DisDotOn
;;;316    				Delay_nmS(300);				//延时
00026e  f44f7096          MOV      r0,#0x12c
000272  f7fffffe          BL       Delay_nmS
;;;317    				VKL128_DisDotOff(VKL128_segi,VKL128_comi);		//此行配合单点点亮函数实现单点点亮，屏蔽此行顺序点亮
000276  482c              LDR      r0,|L1.808|
000278  7801              LDRB     r1,[r0,#0]  ; VKL128_comi
00027a  482a              LDR      r0,|L1.804|
00027c  7800              LDRB     r0,[r0,#0]  ; VKL128_segi
00027e  f7fffffe          BL       VKL128_DisDotOff
000282  4829              LDR      r0,|L1.808|
000284  7800              LDRB     r0,[r0,#0]            ;313  ; VKL128_comi
000286  1c40              ADDS     r0,r0,#1              ;313
000288  4927              LDR      r1,|L1.808|
00028a  7008              STRB     r0,[r1,#0]            ;313
                  |L1.652|
00028c  4826              LDR      r0,|L1.808|
00028e  7800              LDRB     r0,[r0,#0]            ;313  ; VKL128_comi
000290  2804              CMP      r0,#4                 ;313
000292  dbe6              BLT      |L1.610|
000294  4823              LDR      r0,|L1.804|
000296  7800              LDRB     r0,[r0,#0]            ;311  ; VKL128_segi
000298  1c40              ADDS     r0,r0,#1              ;311
00029a  4922              LDR      r1,|L1.804|
00029c  7008              STRB     r0,[r1,#0]            ;311
                  |L1.670|
00029e  4821              LDR      r0,|L1.804|
0002a0  7800              LDRB     r0,[r0,#0]            ;311  ; VKL128_segi
0002a2  2820              CMP      r0,#0x20              ;311
0002a4  dbd9              BLT      |L1.602|
;;;318    			}
;;;319    		}
;;;320    		
;;;321    		//LCD单点关闭
;;;322    		VKL128_DisAll(0xff);			//LCD全显
0002a6  20ff              MOVS     r0,#0xff
0002a8  f7fffffe          BL       VKL128_DisAll
;;;323    		Delay_nmS(500);						//延时
0002ac  f44f70fa          MOV      r0,#0x1f4
0002b0  f7fffffe          BL       Delay_nmS
;;;324    		for(VKL128_segi=0;VKL128_segi<32;VKL128_segi++)//seg0-35
0002b4  2000              MOVS     r0,#0
0002b6  491b              LDR      r1,|L1.804|
0002b8  7008              STRB     r0,[r1,#0]
0002ba  e021              B        |L1.768|
                  |L1.700|
;;;325    		{
;;;326    			for(VKL128_comi=0;VKL128_comi<4;VKL128_comi++)//com0-3
0002bc  2000              MOVS     r0,#0
0002be  491a              LDR      r1,|L1.808|
0002c0  7008              STRB     r0,[r1,#0]
0002c2  e014              B        |L1.750|
                  |L1.708|
;;;327    			{
;;;328    				VKL128_DisDotOff(VKL128_segi,VKL128_comi);		//LCD单点关闭
0002c4  4818              LDR      r0,|L1.808|
0002c6  7801              LDRB     r1,[r0,#0]  ; VKL128_comi
0002c8  4816              LDR      r0,|L1.804|
0002ca  7800              LDRB     r0,[r0,#0]  ; VKL128_segi
0002cc  f7fffffe          BL       VKL128_DisDotOff
;;;329    				Delay_nmS(300);				//延时
0002d0  f44f7096          MOV      r0,#0x12c
0002d4  f7fffffe          BL       Delay_nmS
;;;330    				VKL128_DisDotOn(VKL128_segi,VKL128_comi);		//此行配合单点关闭函数实现单点关闭，屏蔽此行顺序关闭
0002d8  4813              LDR      r0,|L1.808|
0002da  7801              LDRB     r1,[r0,#0]  ; VKL128_comi
0002dc  4811              LDR      r0,|L1.804|
0002de  7800              LDRB     r0,[r0,#0]  ; VKL128_segi
0002e0  f7fffffe          BL       VKL128_DisDotOn
0002e4  4810              LDR      r0,|L1.808|
0002e6  7800              LDRB     r0,[r0,#0]            ;326  ; VKL128_comi
0002e8  1c40              ADDS     r0,r0,#1              ;326
0002ea  490f              LDR      r1,|L1.808|
0002ec  7008              STRB     r0,[r1,#0]            ;326
                  |L1.750|
0002ee  480e              LDR      r0,|L1.808|
0002f0  7800              LDRB     r0,[r0,#0]            ;326  ; VKL128_comi
0002f2  2804              CMP      r0,#4                 ;326
0002f4  dbe6              BLT      |L1.708|
0002f6  480b              LDR      r0,|L1.804|
0002f8  7800              LDRB     r0,[r0,#0]            ;324  ; VKL128_segi
0002fa  1c40              ADDS     r0,r0,#1              ;324
0002fc  4909              LDR      r1,|L1.804|
0002fe  7008              STRB     r0,[r1,#0]            ;324
                  |L1.768|
000300  4808              LDR      r0,|L1.804|
000302  7800              LDRB     r0,[r0,#0]            ;324  ; VKL128_segi
000304  2820              CMP      r0,#0x20              ;324
000306  dbd9              BLT      |L1.700|
;;;331    			}
;;;332    		}		
;;;333    		Delay_nmS(1000);					//延时
000308  f44f707a          MOV      r0,#0x3e8
00030c  f7fffffe          BL       Delay_nmS
                  |L1.784|
000310  e767              B        |L1.482|
;;;334    	}
;;;335    }
;;;336    /************************END OF FILE****/
                          ENDP

000312  0000              DCW      0x0000
                  |L1.788|
                          DCD      VKL128_dispram
                  |L1.792|
                          DCD      0x40004040
                  |L1.796|
                          DCD      0x4000487c
                  |L1.800|
                          DCD      VKL128_readbuf
                  |L1.804|
                          DCD      VKL128_segi
                  |L1.808|
                          DCD      VKL128_comi

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  VKL128_dispram
                          %        18
                  VKL128_readbuf
                          %        18

                          AREA ||.data||, DATA, ALIGN=0

                  VKL128_segi
000000  00                DCB      0x00
                  VKL128_comi
000001  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\lcd_driver\\VKL128_I2C.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_VKL128_I2C_c_f70de489____REV16|
#line 114 "..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___12_VKL128_I2C_c_f70de489____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_VKL128_I2C_c_f70de489____REVSH|
#line 128
|__asm___12_VKL128_I2C_c_f70de489____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

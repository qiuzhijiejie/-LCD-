#line 1 "..\\lcd_driver\\VKL076_I2C.c"











 	
 
#line 1 "..\\lcd_driver\\VKL076_I2C.h"










 

 



 

#line 1 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"









 



















 








 
 
 



 





 

typedef enum IRQn
{
     
    NonMaskableInt_IRQn           = -14,       
    MemoryManagement_IRQn         = -12,       
    BusFault_IRQn                 = -11,       
    UsageFault_IRQn               = -10,       
    SVCall_IRQn                   = -5,        
    DebugMonitor_IRQn             = -4,        
    PendSV_IRQn                   = -2,        
    SysTick_IRQn                  = -1,        

     

    BOD_IRQn                      = 0,         
    IRC_IRQn                      = 1,         
    PWRWU_IRQn                    = 2,         
    RAMPE_IRQn                    = 3,         
    CKFAIL_IRQn                   = 4,         
    RTC_IRQn                      = 6,         
    TAMPER_IRQn                   = 7,         
    WDT_IRQn                      = 8,         
    WWDT_IRQn                     = 9,         
    EINT0_IRQn                    = 10,        
    EINT1_IRQn                    = 11,        
    EINT2_IRQn                    = 12,        
    EINT3_IRQn                    = 13,        
    EINT4_IRQn                    = 14,        
    EINT5_IRQn                    = 15,        
    GPA_IRQn                      = 16,        
    GPB_IRQn                      = 17,        
    GPC_IRQn                      = 18,        
    GPD_IRQn                      = 19,        
    GPE_IRQn                      = 20,        
    GPF_IRQn                      = 21,        
    SPI0_IRQn                     = 22,        
    SPI1_IRQn                     = 23,        
    BRAKE0_IRQn                   = 24,        
    PWM0P0_IRQn                   = 25,        
    PWM0P1_IRQn                   = 26,        
    PWM0P2_IRQn                   = 27,        
    BRAKE1_IRQn                   = 28,        
    PWM1P0_IRQn                   = 29,        
    PWM1P1_IRQn                   = 30,        
    PWM1P2_IRQn                   = 31,        
    TMR0_IRQn                     = 32,        
    TMR1_IRQn                     = 33,        
    TMR2_IRQn                     = 34,        
    TMR3_IRQn                     = 35,        
    UART0_IRQn                    = 36,        
    UART1_IRQn                    = 37,        
    I2C0_IRQn                     = 38,        
    I2C1_IRQn                     = 39,        
    PDMA_IRQn                     = 40,        
    DAC_IRQn                      = 41,        
    ADC00_IRQn                    = 42,        
    ADC01_IRQn                    = 43,        
    ACMP01_IRQn                   = 44,        
    ADC02_IRQn                    = 46,        
    ADC03_IRQn                    = 47,        
    UART2_IRQn                    = 48,        
    UART3_IRQn                    = 49,        
    SPI2_IRQn                     = 51,        
    USBD_IRQn                     = 53,        
    USBH_IRQn                     = 54,        
    USBOTG_IRQn                   = 55,        
    CAN0_IRQn                     = 56,        
    SC0_IRQn                      = 58,        
    TK_IRQn                       = 63         
} IRQn_Type;






 

 






   

#line 1 "..\\..\\..\\Library\\CMSIS\\Include\\core_cm4.h"
 




















 






















 




 


 

 













#line 89 "..\\..\\..\\Library\\CMSIS\\Include\\core_cm4.h"


 
#line 103 "..\\..\\..\\Library\\CMSIS\\Include\\core_cm4.h"

#line 152 "..\\..\\..\\Library\\CMSIS\\Include\\core_cm4.h"

#line 1 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"
 
 





 









     
#line 27 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"
     











#line 46 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"





 

     

     
typedef   signed          char int8_t;
typedef   signed short     int int16_t;
typedef   signed           int int32_t;
typedef   signed       __int64 int64_t;

     
typedef unsigned          char uint8_t;
typedef unsigned short     int uint16_t;
typedef unsigned           int uint32_t;
typedef unsigned       __int64 uint64_t;

     

     
     
typedef   signed          char int_least8_t;
typedef   signed short     int int_least16_t;
typedef   signed           int int_least32_t;
typedef   signed       __int64 int_least64_t;

     
typedef unsigned          char uint_least8_t;
typedef unsigned short     int uint_least16_t;
typedef unsigned           int uint_least32_t;
typedef unsigned       __int64 uint_least64_t;

     

     
typedef   signed           int int_fast8_t;
typedef   signed           int int_fast16_t;
typedef   signed           int int_fast32_t;
typedef   signed       __int64 int_fast64_t;

     
typedef unsigned           int uint_fast8_t;
typedef unsigned           int uint_fast16_t;
typedef unsigned           int uint_fast32_t;
typedef unsigned       __int64 uint_fast64_t;

     




typedef   signed           int intptr_t;
typedef unsigned           int uintptr_t;


     
typedef   signed     long long intmax_t;
typedef unsigned     long long uintmax_t;




     

     





     





     





     

     





     





     





     

     





     





     





     

     






     






     






     

     


     


     


     

     
#line 216 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"

     



     






     
    
 



#line 241 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"

     







     










     











#line 305 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"






 
#line 154 "..\\..\\..\\Library\\CMSIS\\Include\\core_cm4.h"
#line 1 "..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
 




















 





 



 


 









 







 







 






 








 







 







 









 









 
__attribute__((section(".rev16_text"))) static __inline __asm unsigned int __REV16(unsigned int value)
{
  rev16 r0, r0
  bx lr
}








 
__attribute__((section(".revsh_text"))) static __inline __asm int32_t __REVSH(int32_t value)
{
  revsh r0, r0
  bx lr
}









 











 









 









 









 











 











 











 







 










 










 









 






#line 615 "..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"

   

#line 155 "..\\..\\..\\Library\\CMSIS\\Include\\core_cm4.h"
#line 1 "..\\..\\..\\Library\\CMSIS\\Include\\core_cmFunc.h"
 




















 





 



 


 





 
 






 
static __inline unsigned int __get_CONTROL(void)
{
  register unsigned int __regControl         __asm("control");
  return(__regControl);
}







 
static __inline void __set_CONTROL(unsigned int control)
{
  register unsigned int __regControl         __asm("control");
  __regControl = control;
}







 
static __inline unsigned int __get_IPSR(void)
{
  register unsigned int __regIPSR          __asm("ipsr");
  return(__regIPSR);
}







 
static __inline unsigned int __get_APSR(void)
{
  register unsigned int __regAPSR          __asm("apsr");
  return(__regAPSR);
}







 
static __inline unsigned int __get_xPSR(void)
{
  register unsigned int __regXPSR          __asm("xpsr");
  return(__regXPSR);
}







 
static __inline unsigned int __get_PSP(void)
{
  register unsigned int __regProcessStackPointer  __asm("psp");
  return(__regProcessStackPointer);
}







 
static __inline void __set_PSP(unsigned int topOfProcStack)
{
  register unsigned int __regProcessStackPointer  __asm("psp");
  __regProcessStackPointer = topOfProcStack;
}







 
static __inline unsigned int __get_MSP(void)
{
  register unsigned int __regMainStackPointer     __asm("msp");
  return(__regMainStackPointer);
}







 
static __inline void __set_MSP(unsigned int topOfMainStack)
{
  register unsigned int __regMainStackPointer     __asm("msp");
  __regMainStackPointer = topOfMainStack;
}







 
static __inline unsigned int __get_PRIMASK(void)
{
  register unsigned int __regPriMask         __asm("primask");
  return(__regPriMask);
}







 
static __inline void __set_PRIMASK(unsigned int priMask)
{
  register unsigned int __regPriMask         __asm("primask");
  __regPriMask = (priMask);
}








 







 








 
static __inline unsigned int  __get_BASEPRI(void)
{
  register unsigned int __regBasePri         __asm("basepri");
  return(__regBasePri);
}







 
static __inline void __set_BASEPRI(unsigned int basePri)
{
  register unsigned int __regBasePri         __asm("basepri");
  __regBasePri = (basePri & 0xff);
}







 
static __inline unsigned int __get_FAULTMASK(void)
{
  register unsigned int __regFaultMask       __asm("faultmask");
  return(__regFaultMask);
}







 
static __inline void __set_FAULTMASK(unsigned int faultMask)
{
  register unsigned int __regFaultMask       __asm("faultmask");
  __regFaultMask = (faultMask & (unsigned int)1);
}











 
static __inline unsigned int __get_FPSCR(void)
{

  register unsigned int __regfpscr         __asm("fpscr");
  return(__regfpscr);



}







 
static __inline void __set_FPSCR(unsigned int fpscr)
{

  register unsigned int __regfpscr         __asm("fpscr");
  __regfpscr = (fpscr);

}




#line 612 "..\\..\\..\\Library\\CMSIS\\Include\\core_cmFunc.h"

 


#line 156 "..\\..\\..\\Library\\CMSIS\\Include\\core_cm4.h"
#line 1 "..\\..\\..\\Library\\CMSIS\\Include\\core_cm4_simd.h"
 




















 











 


 



 


 

 
#line 106 "..\\..\\..\\Library\\CMSIS\\Include\\core_cm4_simd.h"








 



#line 641 "..\\..\\..\\Library\\CMSIS\\Include\\core_cm4_simd.h"

 




#line 157 "..\\..\\..\\Library\\CMSIS\\Include\\core_cm4.h"








 
#line 192 "..\\..\\..\\Library\\CMSIS\\Include\\core_cm4.h"

 






 
#line 208 "..\\..\\..\\Library\\CMSIS\\Include\\core_cm4.h"

 













 


 





 


 
typedef union
{
  struct
  {



    unsigned int _reserved0:16;               
    unsigned int GE:4;                        
    unsigned int _reserved1:7;                

    unsigned int Q:1;                         
    unsigned int V:1;                         
    unsigned int C:1;                         
    unsigned int Z:1;                         
    unsigned int N:1;                         
  } b;                                    
  unsigned int w;                             
} APSR_Type;



 
typedef union
{
  struct
  {
    unsigned int ISR:9;                       
    unsigned int _reserved0:23;               
  } b;                                    
  unsigned int w;                             
} IPSR_Type;



 
typedef union
{
  struct
  {
    unsigned int ISR:9;                       



    unsigned int _reserved0:7;                
    unsigned int GE:4;                        
    unsigned int _reserved1:4;                

    unsigned int T:1;                         
    unsigned int IT:2;                        
    unsigned int Q:1;                         
    unsigned int V:1;                         
    unsigned int C:1;                         
    unsigned int Z:1;                         
    unsigned int N:1;                         
  } b;                                    
  unsigned int w;                             
} xPSR_Type;



 
typedef union
{
  struct
  {
    unsigned int nPRIV:1;                     
    unsigned int SPSEL:1;                     
    unsigned int FPCA:1;                      
    unsigned int _reserved0:29;               
  } b;                                    
  unsigned int w;                             
} CONTROL_Type;

 






 


 
typedef struct
{
  volatile unsigned int ISER[8];                  
       unsigned int RESERVED0[24];
  volatile unsigned int ICER[8];                  
       unsigned int RSERVED1[24];
  volatile unsigned int ISPR[8];                  
       unsigned int RESERVED2[24];
  volatile unsigned int ICPR[8];                  
       unsigned int RESERVED3[24];
  volatile unsigned int IABR[8];                  
       unsigned int RESERVED4[56];
  volatile unsigned char  IP[240];                  
       unsigned int RESERVED5[644];
  volatile  unsigned int STIR;                     
}  NVIC_Type;

 



 






 


 
typedef struct
{
  volatile const  unsigned int CPUID;                    
  volatile unsigned int ICSR;                     
  volatile unsigned int VTOR;                     
  volatile unsigned int AIRCR;                    
  volatile unsigned int SCR;                      
  volatile unsigned int CCR;                      
  volatile unsigned char  SHP[12];                  
  volatile unsigned int SHCSR;                    
  volatile unsigned int CFSR;                     
  volatile unsigned int HFSR;                     
  volatile unsigned int DFSR;                     
  volatile unsigned int MMFAR;                    
  volatile unsigned int BFAR;                     
  volatile unsigned int AFSR;                     
  volatile const  unsigned int PFR[2];                   
  volatile const  unsigned int DFR;                      
  volatile const  unsigned int ADR;                      
  volatile const  unsigned int MMFR[4];                  
  volatile const  unsigned int ISAR[5];                  
       unsigned int RESERVED0[5];
  volatile unsigned int CPACR;                    
} SCB_Type;

 















 






























 



 





















 









 


















 










































 









 









 















 






 


 
typedef struct
{
       unsigned int RESERVED0[1];
  volatile const  unsigned int ICTR;                     
  volatile unsigned int ACTLR;                    
} SCnSCB_Type;

 



 















 






 


 
typedef struct
{
  volatile unsigned int CTRL;                     
  volatile unsigned int LOAD;                     
  volatile unsigned int VAL;                      
  volatile const  unsigned int CALIB;                    
} SysTick_Type;

 












 



 



 









 






 


 
typedef struct
{
  volatile  union
  {
    volatile  unsigned char    u8;                   
    volatile  unsigned short   u16;                  
    volatile  unsigned int   u32;                  
  }  PORT [32];                           
       unsigned int RESERVED0[864];
  volatile unsigned int TER;                      
       unsigned int RESERVED1[15];
  volatile unsigned int TPR;                      
       unsigned int RESERVED2[15];
  volatile unsigned int TCR;                      
       unsigned int RESERVED3[29];                                  
  volatile  unsigned int IWR;                      
  volatile const  unsigned int IRR;                      
  volatile unsigned int IMCR;                     
       unsigned int RESERVED4[43];                                  
  volatile  unsigned int LAR;                      
  volatile const  unsigned int LSR;                      
       unsigned int RESERVED5[6];                                   
  volatile const  unsigned int PID4;                     
  volatile const  unsigned int PID5;                     
  volatile const  unsigned int PID6;                     
  volatile const  unsigned int PID7;                     
  volatile const  unsigned int PID0;                     
  volatile const  unsigned int PID1;                     
  volatile const  unsigned int PID2;                     
  volatile const  unsigned int PID3;                     
  volatile const  unsigned int CID0;                     
  volatile const  unsigned int CID1;                     
  volatile const  unsigned int CID2;                     
  volatile const  unsigned int CID3;                     
} ITM_Type;

 



 



























 



 



 



 









   






 


 
typedef struct
{
  volatile unsigned int CTRL;                     
  volatile unsigned int CYCCNT;                   
  volatile unsigned int CPICNT;                   
  volatile unsigned int EXCCNT;                   
  volatile unsigned int SLEEPCNT;                 
  volatile unsigned int LSUCNT;                   
  volatile unsigned int FOLDCNT;                  
  volatile const  unsigned int PCSR;                     
  volatile unsigned int COMP0;                    
  volatile unsigned int MASK0;                    
  volatile unsigned int FUNCTION0;                
       unsigned int RESERVED0[1];
  volatile unsigned int COMP1;                    
  volatile unsigned int MASK1;                    
  volatile unsigned int FUNCTION1;                
       unsigned int RESERVED1[1];
  volatile unsigned int COMP2;                    
  volatile unsigned int MASK2;                    
  volatile unsigned int FUNCTION2;                
       unsigned int RESERVED2[1];
  volatile unsigned int COMP3;                    
  volatile unsigned int MASK3;                    
  volatile unsigned int FUNCTION3;                
} DWT_Type;

 






















































 



 



 



 



 



 



 



























   






 


 
typedef struct
{
  volatile unsigned int SSPSR;                    
  volatile unsigned int CSPSR;                    
       unsigned int RESERVED0[2];
  volatile unsigned int ACPR;                     
       unsigned int RESERVED1[55];
  volatile unsigned int SPPR;                     
       unsigned int RESERVED2[131];
  volatile const  unsigned int FFSR;                     
  volatile unsigned int FFCR;                     
  volatile const  unsigned int FSCR;                     
       unsigned int RESERVED3[759];
  volatile const  unsigned int TRIGGER;                  
  volatile const  unsigned int FIFO0;                    
  volatile const  unsigned int ITATBCTR2;                
       unsigned int RESERVED4[1];
  volatile const  unsigned int ITATBCTR0;                
  volatile const  unsigned int FIFO1;                    
  volatile unsigned int ITCTRL;                   
       unsigned int RESERVED5[39];
  volatile unsigned int CLAIMSET;                 
  volatile unsigned int CLAIMCLR;                 
       unsigned int RESERVED7[8];
  volatile const  unsigned int DEVID;                    
  volatile const  unsigned int DEVTYPE;                  
} TPI_Type;

 



 



 












 






 



 





















 



 





















 



 



 


















 






   







 


 
typedef struct
{
  volatile const  unsigned int TYPE;                     
  volatile unsigned int CTRL;                     
  volatile unsigned int RNR;                      
  volatile unsigned int RBAR;                     
  volatile unsigned int RASR;                     
  volatile unsigned int RBAR_A1;                  
  volatile unsigned int RASR_A1;                  
  volatile unsigned int RBAR_A2;                  
  volatile unsigned int RASR_A2;                  
  volatile unsigned int RBAR_A3;                  
  volatile unsigned int RASR_A3;                  
} MPU_Type;

 









 









 



 









 






























 








 


 
typedef struct
{
       unsigned int RESERVED0[1];
  volatile unsigned int FPCCR;                    
  volatile unsigned int FPCAR;                    
  volatile unsigned int FPDSCR;                   
  volatile const  unsigned int MVFR0;                    
  volatile const  unsigned int MVFR1;                    
} FPU_Type;

 



























 



 












 
























 












 







 


 
typedef struct
{
  volatile unsigned int DHCSR;                    
  volatile  unsigned int DCRSR;                    
  volatile unsigned int DCRDR;                    
  volatile unsigned int DEMCR;                    
} CoreDebug_Type;

 




































 






 







































 






 

 
#line 1366 "..\\..\\..\\Library\\CMSIS\\Include\\core_cm4.h"

#line 1375 "..\\..\\..\\Library\\CMSIS\\Include\\core_cm4.h"











 










 

 



 




 










 
static __inline void NVIC_SetPriorityGrouping(unsigned int PriorityGroup)
{
  unsigned int reg_value;
  unsigned int PriorityGroupTmp = (PriorityGroup & (unsigned int)0x07);                

  reg_value  =  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR;                                                    
  reg_value &= ~((0xFFFFUL << 16) | (7UL << 8));              
  reg_value  =  (reg_value                                 |
                ((unsigned int)0x5FA << 16) |
                (PriorityGroupTmp << 8));                                      
  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR =  reg_value;
}







 
static __inline unsigned int NVIC_GetPriorityGrouping(void)
{
  return ((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8)) >> 8);    
}







 
static __inline void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 
  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[(unsigned int)((int32_t)IRQn) >> 5] = (unsigned int)(1 << ((unsigned int)((int32_t)IRQn) & (unsigned int)0x1F));  
}







 
static __inline void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICER[((unsigned int)(IRQn) >> 5)] = (1 << ((unsigned int)(IRQn) & 0x1F));  
}











 
static __inline unsigned int NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
  return((unsigned int) ((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[(unsigned int)(IRQn) >> 5] & (1 << ((unsigned int)(IRQn) & 0x1F)))?1:0));  
}







 
static __inline void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[((unsigned int)(IRQn) >> 5)] = (1 << ((unsigned int)(IRQn) & 0x1F));  
}







 
static __inline void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICPR[((unsigned int)(IRQn) >> 5)] = (1 << ((unsigned int)(IRQn) & 0x1F));  
}










 
static __inline unsigned int NVIC_GetActive(IRQn_Type IRQn)
{
  return((unsigned int)((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IABR[(unsigned int)(IRQn) >> 5] & (1 << ((unsigned int)(IRQn) & 0x1F)))?1:0));  
}










 
static __inline void NVIC_SetPriority(IRQn_Type IRQn, unsigned int priority)
{
  if(IRQn < 0) {
    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[((unsigned int)(IRQn) & 0xF)-4] = ((priority << (8 - 4)) & 0xff); }  
  else {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[(unsigned int)(IRQn)] = ((priority << (8 - 4)) & 0xff);    }         
}












 
static __inline unsigned int NVIC_GetPriority(IRQn_Type IRQn)
{

  if(IRQn < 0) {
    return((unsigned int)(((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[((unsigned int)(IRQn) & 0xF)-4] >> (8 - 4)));  }  
  else {
    return((unsigned int)(((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[(unsigned int)(IRQn)]           >> (8 - 4)));  }  
}













 
static __inline unsigned int NVIC_EncodePriority (unsigned int PriorityGroup, unsigned int PreemptPriority, unsigned int SubPriority)
{
  unsigned int PriorityGroupTmp = (PriorityGroup & 0x07);           
  unsigned int PreemptPriorityBits;
  unsigned int SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > 4) ? 4 : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + 4) < 7) ? 0 : PriorityGroupTmp - 7 + 4;

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
         );
}













 
static __inline void NVIC_DecodePriority (unsigned int Priority, unsigned int PriorityGroup, unsigned int* pPreemptPriority, unsigned int* pSubPriority)
{
  unsigned int PriorityGroupTmp = (PriorityGroup & 0x07);           
  unsigned int PreemptPriorityBits;
  unsigned int SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > 4) ? 4 : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + 4) < 7) ? 0 : PriorityGroupTmp - 7 + 4;

  *pPreemptPriority = (Priority >> SubPriorityBits) & ((1 << (PreemptPriorityBits)) - 1);
  *pSubPriority     = (Priority                   ) & ((1 << (SubPriorityBits    )) - 1);
}





 
static __inline void NVIC_SystemReset(void)
{
  __dsb(0xF);                                                     
 
  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR  = ((0x5FA << 16)      |
                 (((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8)) |
                 (1UL << 2));                    
  __dsb(0xF);                                                      
  while(1);                                                     
}

 



 




 

















 
static __inline unsigned int SysTick_Config(unsigned int ticks)
{
  if (ticks > (0xFFFFFFUL << 0))  return (1);             

  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->LOAD  = (ticks & (0xFFFFFFUL << 0)) - 1;       
  NVIC_SetPriority (SysTick_IRQn, (1<<4) - 1);   
  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->VAL   = 0;                                           
  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL  = (1UL << 2) |
                   (1UL << 1)   |
                   (1UL << 0);                     
  return (0);                                                   
}



 



 




 

extern volatile int32_t ITM_RxBuffer;                     












 
static __inline unsigned int ITM_SendChar (unsigned int ch)
{
  if ((((ITM_Type *) (0xE0000000UL) )->TCR & (1UL << 0))                  &&       
      (((ITM_Type *) (0xE0000000UL) )->TER & (1UL << 0)        )                    )      
  {
    while (((ITM_Type *) (0xE0000000UL) )->PORT[0].u32 == 0);
    ((ITM_Type *) (0xE0000000UL) )->PORT[0].u8 = (unsigned char) ch;
  }
  return (ch);
}








 
static __inline int32_t ITM_ReceiveChar (void) {
  int32_t ch = -1;                            

  if (ITM_RxBuffer != 0x5AA55AA5) {
    ch = ITM_RxBuffer;
    ITM_RxBuffer = 0x5AA55AA5;        
  }

  return (ch);
}








 
static __inline int32_t ITM_CheckChar (void) {

  if (ITM_RxBuffer == 0x5AA55AA5) {
    return (0);                                  
  } else {
    return (1);                                  
  }
}

 





#line 141 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\system_M451Series.h"









 








#line 20 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\system_M451Series.h"

 
 
 







 

#line 39 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\system_M451Series.h"




extern unsigned int SystemCoreClock;      
extern unsigned int CyclesPerUs;          
extern unsigned int PllClock;             










 
extern void SystemInit(void);









 
extern void SystemCoreClockUpdate(void);






 
#line 142 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 143 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"



 
 
 





 


 



 


typedef struct
{












































































































































 

    volatile unsigned int CTL[2];         
    volatile unsigned int STATUS;         
    volatile unsigned int VREF;           

} ACMP_T;






 























































   
   


 



 


typedef struct
{

































































































































































































































































































































































































































































































































































 

    volatile const  unsigned int DAT[19];        
    volatile const  unsigned int CURDAT;         
    volatile unsigned int CTL;            
    volatile  unsigned int SWTRG;          
    volatile unsigned int PENDSTS;        
    volatile unsigned int OVSTS;          
    volatile const  unsigned int RESERVE0[8];  
    volatile unsigned int SCTL[19];       
    volatile const  unsigned int RESERVE1[1];  
    volatile unsigned int INTSRC[4];      
    volatile unsigned int CMP[4];         
    volatile const  unsigned int STATUS0;        
    volatile const  unsigned int STATUS1;        
    volatile unsigned int STATUS2;        
    volatile const  unsigned int STATUS3;        
    volatile const  unsigned int DDAT[4];        

} EADC_T;






 

































































































































































































   
   


 



 


typedef struct
{



























































































































































































































 

    volatile unsigned int CREQ;           
    volatile unsigned int CMASK;          
    volatile unsigned int MASK1;          
    volatile unsigned int MASK2;          
    volatile unsigned int ARB1;           
    volatile unsigned int ARB2;           
    volatile unsigned int MCON;           
    volatile unsigned int DAT_A1;         
    volatile unsigned int DAT_A2;         
    volatile unsigned int DAT_B1;         
    volatile unsigned int DAT_B2;         
    volatile const  unsigned int RESERVE0[13];

} CAN_IF_T;




typedef struct
{





































































































































































































































 

    volatile unsigned int CON;            
    volatile unsigned int STATUS;         
    volatile const  unsigned int ERR;            
    volatile unsigned int BTIME;          
    volatile const  unsigned int IIDR;           
    volatile unsigned int TEST;           
    volatile unsigned int BRPE;           
    volatile const  unsigned int RESERVE0[1];  
    volatile CAN_IF_T IF[2];          
    volatile const  unsigned int RESERVE1[8];  
    volatile const  unsigned int TXREQ1;         
    volatile const  unsigned int TXREQ2;         
    volatile const  unsigned int RESERVE3[6];  
    volatile const  unsigned int NDAT1;          
    volatile const  unsigned int NDAT2;          
    volatile const  unsigned int RESERVE4[6];  
    volatile const  unsigned int IPND1;          
    volatile const  unsigned int IPND2;          
    volatile const  unsigned int RESERVE5[6];  
    volatile const  unsigned int MVLD1;          
    volatile const  unsigned int MVLD2;          
    volatile unsigned int WU_EN;          
    volatile unsigned int WU_STATUS;      

} CAN_T;






 
 


                                                                                


                                                             


                                                             


                                                             


                                                             


                                                             



 


















                                              









                                            












                                             



                                             















                                            



 


                                                                                  


                                                                                  
                                          


                                                                                  


                                                                                  


















 



                                        









                                         



                                         












                                         






























                                      






                                      






                                      






                                      






 



                                          



                                            



                                           



                                           



                                           



                                           



                                            



                                                 



 




   
   


 



 


typedef struct
{






















































































































































































































































































































































































































































































 

    volatile unsigned int PWRCTL;         
    volatile unsigned int AHBCLK;         
    volatile unsigned int APBCLK0;        
    volatile unsigned int APBCLK1;        
    volatile unsigned int CLKSEL0;        
    volatile unsigned int CLKSEL1;        
    volatile unsigned int CLKSEL2;        
    volatile unsigned int CLKSEL3;        
    volatile unsigned int CLKDIV0;        
    volatile unsigned int CLKDIV1;        
    volatile const  unsigned int RESERVE0[6];  
    volatile unsigned int PLLCTL;         
    volatile const  unsigned int RESERVE1[3];  
    volatile const  unsigned int STATUS;         
    volatile const  unsigned int RESERVE2[3];  
    volatile unsigned int CLKOCTL;        
    volatile const  unsigned int RESERVE3[3];  
    volatile unsigned int CLKDCTL;        
    volatile unsigned int CLKDSTS;        
    volatile unsigned int CDUPB;          
    volatile unsigned int CDLOWB;         

} CLK_T;






 


































































































































































































































































































   
   



 



 


typedef struct
{







































































 

    volatile unsigned int CTL;            
    volatile unsigned int DAT;            
    volatile unsigned int SEED;           
    volatile const  unsigned int CHECKSUM;       

} CRC_T;






 


































   
   


 



 


typedef struct
{


































































































 

    volatile unsigned int CTL;            
    volatile unsigned int SWTRG;          
    volatile unsigned int DAT;            
    volatile const  unsigned int DATOUT;         
    volatile unsigned int STATUS;         
    volatile unsigned int TCTL;           

} DAC_T;






 

















































   
   


 



 


typedef struct
{





























































































































 

    volatile unsigned int CTL0;           
    volatile unsigned int TCTL0;          
    volatile const  unsigned int RESERVE0[2];  
    volatile unsigned int CTL1;           
    volatile unsigned int TCTL1;          

} EBI_T;






 









































































   
   


 



 


typedef struct
{













































































































































































































































 

    volatile unsigned int ISPCTL;         
    volatile unsigned int ISPADDR;        
    volatile unsigned int ISPDAT;         
    volatile unsigned int ISPCMD;         
    volatile unsigned int ISPTRG;         
    volatile const  unsigned int DFBA;           
    volatile unsigned int FTCTL;          
    volatile const  unsigned int RESERVE0[9];  
    volatile const  unsigned int ISPSTS;         
    volatile const  unsigned int RESERVE1[15]; 
    volatile unsigned int MPDAT0;         
    volatile unsigned int MPDAT1;         
    volatile unsigned int MPDAT2;         
    volatile unsigned int MPDAT3;         
    volatile const  unsigned int RESERVE2[12]; 
    volatile const  unsigned int MPSTS;          
    volatile const  unsigned int MPADDR;         

} FMC_T;







 






























































































   
   


 



 


typedef struct
{





















































































































































































 

    volatile unsigned int MODE;           
    volatile unsigned int DINOFF;         
    volatile unsigned int DOUT;           
    volatile unsigned int DATMSK;         
    volatile const  unsigned int PIN;            
    volatile unsigned int DBEN;           
    volatile unsigned int INTTYPE;        
    volatile unsigned int INTEN;          
    volatile unsigned int INTSRC;         
    volatile unsigned int SMTEN;          
    volatile unsigned int SLEWCTL;        
    volatile unsigned int DRVCTL;         

} GPIO_T;




typedef struct
{

































 

    volatile unsigned int DBCTL;          

} GPIO_DBCTL_T;







 





























































































































































































































































































































































































































































































































































































































   
   


 



 


typedef struct
{











































































































































































































































































































































































 

    volatile unsigned int CTL;            
    volatile unsigned int ADDR0;          
    volatile unsigned int DAT;            
    volatile const  unsigned int STATUS;         
    volatile unsigned int CLKDIV;         
    volatile unsigned int TOCTL;          
    volatile unsigned int ADDR1;          
    volatile unsigned int ADDR2;          
    volatile unsigned int ADDR3;          
    volatile unsigned int ADDRMSK0;       
    volatile unsigned int ADDRMSK1;       
    volatile unsigned int ADDRMSK2;       
    volatile unsigned int ADDRMSK3;       
    volatile const  unsigned int RESERVE0[2];  
    volatile unsigned int WKCTL;          
    volatile unsigned int WKSTS;          
    volatile unsigned int BUSCTL;         
    volatile unsigned int BUSTCTL;        
    volatile unsigned int BUSSTS;         
    volatile unsigned int PKTSIZE;        
    volatile const  unsigned int PKTCRC;         
    volatile unsigned int BUSTOUT;        
    volatile unsigned int CLKTOUT;        

} I2C_T;






 







































































































































































   
   

 



 


typedef struct
{




















































































































































































































 

    volatile unsigned int CTL;            
    volatile unsigned int PHYCTL;         
    volatile unsigned int INTEN;          
    volatile unsigned int INTSTS;         
    volatile const  unsigned int STATUS;         

} OTG_T;






 




























































































































   
   


 



 


typedef struct
{













































































 

    volatile unsigned int CTL;            
    volatile unsigned int SA;             
    volatile unsigned int DA;             
    volatile unsigned int NEXT;           

} DSCT_T;




typedef struct
{































































































































































































































































































































 
    
    DSCT_T        DSCT[12];                    
    volatile const  unsigned int CURSCAT[12];                                                                                                      
    volatile const  unsigned int RESERVE0[196];       
    volatile unsigned int CHCTL;                       
    volatile  unsigned int STOP;                        
    volatile  unsigned int SWREQ;                       
    volatile const  unsigned int TRGSTS;                      
    volatile unsigned int PRISET;                      
    volatile  unsigned int PRICLR;                      
    volatile unsigned int INTEN;                       
    volatile unsigned int INTSTS;                      
    volatile unsigned int ABTSTS;                      
    volatile unsigned int TDSTS;                       
    volatile unsigned int SCATSTS;                     
    volatile const  unsigned int TACTSTS;                                                                                                          
    volatile const  unsigned int RESERVE1[1];                 
    volatile unsigned int TOUTEN;                      
    volatile unsigned int TOUTIEN;                     
    volatile unsigned int SCATBA;                      
    volatile unsigned int TOC0_1;                      
    volatile unsigned int TOC2_3;                      
    volatile unsigned int TOC4_5;                      
    volatile unsigned int TOC6_7;                                                                                                           
    volatile const  unsigned int RESERVE2[12];                
    volatile unsigned int REQSEL0_3;                   
    volatile unsigned int REQSEL4_7;                   
    volatile unsigned int REQSEL8_11;     

} PDMA_T;






 























































































































































   
   


 



 


typedef struct
{






























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































 

    volatile unsigned int CTL0;           
    volatile unsigned int CTL1;           
    volatile unsigned int SYNC;           
    volatile unsigned int SWSYNC;         
    volatile unsigned int CLKSRC;         
    volatile unsigned int CLKPSC0_1;      
    volatile unsigned int CLKPSC2_3;      
    volatile unsigned int CLKPSC4_5;      
    volatile unsigned int CNTEN;          
    volatile unsigned int CNTCLR;         
    volatile unsigned int LOAD;           
    volatile const  unsigned int RESERVE0[1];  
    volatile unsigned int PERIOD[6];      
    volatile const  unsigned int RESERVE1[2];  
    volatile unsigned int CMPDAT[6];      
    volatile const  unsigned int RESERVE2[2];  
    volatile unsigned int DTCTL0_1;       
    volatile unsigned int DTCTL2_3;       
    volatile unsigned int DTCTL4_5;       
    volatile const  unsigned int RESERVE3[1];  
    volatile unsigned int PHS0_1;         
    volatile unsigned int PHS2_3;         
    volatile unsigned int PHS4_5;         
    volatile const  unsigned int RESERVE4[1];  
    volatile const  unsigned int CNT[6];         
    volatile const  unsigned int RESERVE5[2];  
    volatile unsigned int WGCTL0;         
    volatile unsigned int WGCTL1;         
    volatile unsigned int MSKEN;          
    volatile unsigned int MSK;            
    volatile unsigned int BNF;            
    volatile unsigned int FAILBRK;        
    volatile unsigned int BRKCTL0_1;      
    volatile unsigned int BRKCTL2_3;      
    volatile unsigned int BRKCTL4_5;      
    volatile unsigned int POLCTL;         
    volatile unsigned int POEN;           
    volatile  unsigned int SWBRK;          
    volatile unsigned int INTEN0;         
    volatile unsigned int INTEN1;         
    volatile unsigned int INTSTS0;        
    volatile unsigned int INTSTS1;        
    volatile unsigned int IFA;            
    volatile unsigned int DACTRGEN;       
    volatile unsigned int EADCTS0;        
    volatile unsigned int EADCTS1;        
    volatile unsigned int FTCMPDAT0_1;    
    volatile unsigned int FTCMPDAT2_3;    
    volatile unsigned int FTCMPDAT4_5;    
    volatile const  unsigned int RESERVE6[1];  
    volatile unsigned int SSCTL;          
    volatile  unsigned int SSTRG;          
    volatile const  unsigned int RESERVE7[2];  
    volatile unsigned int STATUS;         
    volatile const  unsigned int RESERVE8[55]; 
    volatile unsigned int CAPINEN;        
    volatile unsigned int CAPCTL;         
    volatile const  unsigned int CAPSTS;         
    volatile const  unsigned int RCAPDAT0;       
    volatile const  unsigned int FCAPDAT0;       
    volatile const  unsigned int RCAPDAT1;       
    volatile const  unsigned int FCAPDAT1;       
    volatile const  unsigned int RCAPDAT2;       
    volatile const  unsigned int FCAPDAT2;       
    volatile const  unsigned int RCAPDAT3;       
    volatile const  unsigned int FCAPDAT3;       
    volatile const  unsigned int RCAPDAT4;       
    volatile const  unsigned int FCAPDAT4;       
    volatile const  unsigned int RCAPDAT5;       
    volatile const  unsigned int FCAPDAT5;       
    volatile unsigned int PDMACTL;        
    volatile const  unsigned int PDMACAP0_1;     
    volatile const  unsigned int PDMACAP2_3;     
    volatile const  unsigned int PDMACAP4_5;     
    volatile const  unsigned int RESERVE9[1];  
    volatile unsigned int CAPIEN;         
    volatile unsigned int CAPIF;          
    volatile const  unsigned int RESERVE10[43];
    volatile const  unsigned int PBUF[6];        
    volatile const  unsigned int CMPBUF[6];      
    volatile const  unsigned int RESERVE11[3]; 
    volatile const  unsigned int FTCBUF0_1;      
    volatile const  unsigned int FTCBUF2_3;      
    volatile const  unsigned int FTCBUF4_5;      
    volatile unsigned int FTCI;           

} PWM_T;






 
























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































   
   


 



 


typedef struct
{























































































































































































































































































































 

    volatile unsigned int INIT;           
    volatile  unsigned int RWEN;           
    volatile unsigned int FREQADJ;        
    volatile unsigned int TIME;           
    volatile unsigned int CAL;            
    volatile unsigned int CLKFMT;         
    volatile unsigned int WEEKDAY;        
    volatile unsigned int TALM;           
    volatile unsigned int CALM;           
    volatile const  unsigned int LEAPYEAR;       
    volatile unsigned int INTEN;          
    volatile unsigned int INTSTS;         
    volatile unsigned int TICK;           
    volatile unsigned int TAMSK;          
    volatile unsigned int CAMSK;          
    volatile unsigned int SPRCTL;         
    volatile unsigned int SPR[20];        
    volatile const  unsigned int RESERVE0[28]; 
    volatile unsigned int LXTCTL;         
    volatile unsigned int LXTOCTL;        
    volatile unsigned int LXTICTL;        
    volatile unsigned int TAMPCTL;        

} RTC_T;






 



















































































































































































































   
   


 



 


typedef struct
{






















































































































































































































































































































































































































































































































































































































 

    volatile unsigned int DAT;            
    volatile unsigned int CTL;            
    volatile unsigned int ALTCTL;         
    volatile unsigned int EGT;            
    volatile unsigned int RXTOUT;         
    volatile unsigned int ETUCTL;         
    volatile unsigned int INTEN;          
    volatile unsigned int INTSTS;         
    volatile unsigned int STATUS;         
    volatile unsigned int PINCTL;         
    volatile unsigned int TMRCTL0;        
    volatile unsigned int TMRCTL1;        
    volatile unsigned int TMRCTL2;        
    volatile unsigned int UARTCTL;        
    volatile const  unsigned int TMRDAT0;        
    volatile const  unsigned int TMRDAT1_2;      

} SC_T;






 

























































































































































































































































































































   
   


 



 


typedef struct
{












































































































































































































































































































































































































































































 

    volatile unsigned int CTL;            
    volatile unsigned int CLKDIV;         
    volatile unsigned int SSCTL;          
    volatile unsigned int PDMACTL;        
    volatile unsigned int FIFOCTL;        
    volatile unsigned int STATUS;         
    volatile const  unsigned int RESERVE0[2];  
    volatile  unsigned int TX;             
    volatile const  unsigned int RESERVE1[3];  
    volatile const  unsigned int RX;             
    volatile const  unsigned int RESERVE2[11]; 
    volatile unsigned int I2SCTL;         
    volatile unsigned int I2SCLK;         
    volatile unsigned int I2SSTS;         

} SPI_T;






 




































































































































































































































































































   
   


 



 


typedef struct
{











































































































































































































































































































































































































































































































































































































































































 

    volatile const  unsigned int PDID;           
    volatile unsigned int RSTSTS;         
    volatile unsigned int IPRST0;         
    volatile unsigned int IPRST1;         
    volatile unsigned int IPRST2;         
    volatile const  unsigned int RESERVE0[1];  
    volatile unsigned int BODCTL;         
    volatile unsigned int IVSCTL;         
    volatile const  unsigned int RESERVE1[1];  
    volatile unsigned int PORCTL;         
    volatile unsigned int VREFCTL;        
    volatile unsigned int USBPHY;         
    volatile unsigned int GPA_MFPL;       
    volatile unsigned int GPA_MFPH;       
    volatile unsigned int GPB_MFPL;       
    volatile unsigned int GPB_MFPH;       
    volatile unsigned int GPC_MFPL;       
    volatile unsigned int GPC_MFPH;       
    volatile unsigned int GPD_MFPL;       
    volatile unsigned int GPD_MFPH;       
    volatile unsigned int GPE_MFPL;       
    volatile unsigned int GPE_MFPH;       
    volatile unsigned int GPF_MFPL;       
    volatile const  unsigned int RESERVE2[25]; 
    volatile unsigned int SRAM_INTCTL;    
    volatile const  unsigned int SRAM_STATUS;    
    volatile const  unsigned int SRAM_ERRADDR;   
    volatile const  unsigned int RESERVE3[1];  
    volatile unsigned int SRAM_BISTCTL;   
    volatile const  unsigned int SRAM_BISTSTS;   
    volatile const  unsigned int RESERVE4[6];  
    volatile unsigned int IRCTCTL;        
    volatile unsigned int IRCTIEN;        
    volatile unsigned int IRCTISTS;       
    volatile const  unsigned int RESERVE5[1];  
    volatile unsigned int REGLCTL;        

} SYS_T;






 




























































































































































































































































































































































































































































































































   


typedef struct
{





















































































































 

    volatile  unsigned int NMIEN;           
    volatile const   unsigned int NMISTS;          

} SYS_INT_T;






 



























































































   
   


 



 


typedef struct
{


















































































































































































































































































































































































































































































































































































































 

    volatile unsigned int CTL;            
    volatile unsigned int REFCTL;         
    volatile unsigned int CCBDAT0;        
    volatile unsigned int CCBDAT1;        
    volatile unsigned int CCBDAT2;        
    volatile unsigned int CCBDAT3;        
    volatile unsigned int CCBDAT4;        
    volatile unsigned int IDLESEL;        
    volatile unsigned int POLSEL;         
    volatile unsigned int POLCTL;         
    volatile unsigned int STATUS;         
    volatile const  unsigned int DAT0;           
    volatile const  unsigned int DAT1;           
    volatile const  unsigned int DAT2;           
    volatile const  unsigned int DAT3;           
    volatile const  unsigned int DAT4;           
    volatile unsigned int INTEN;          
    volatile unsigned int TH0_1;          
    volatile unsigned int TH2_3;          
    volatile unsigned int TH4_5;          
    volatile unsigned int TH6_7;          
    volatile unsigned int TH8_9;          
    volatile unsigned int TH10_11;        
    volatile unsigned int TH12_13;        
    volatile unsigned int TH14_15;        
    volatile unsigned int TH16;           

} TK_T;






 

























































































































































































































































































































































































































































































   
   


 



 


typedef struct
{












































































































































































 

    volatile unsigned int CTL;            
    volatile unsigned int CMP;            
    volatile unsigned int INTSTS;         
    volatile const  unsigned int CNT;            
    volatile const  unsigned int CAP;            
    volatile unsigned int EXTCTL;         
    volatile unsigned int EINTSTS;        

} TIMER_T;






 





















































































   
   


 



 


typedef struct
{




































































































































































































































































































































































































































































































































































































































































 

    volatile unsigned int DAT;            
    volatile unsigned int INTEN;          
    volatile unsigned int FIFO;           
    volatile unsigned int LINE;           
    volatile unsigned int MODEM;          
    volatile unsigned int MODEMSTS;       
    volatile unsigned int FIFOSTS;        
    volatile unsigned int INTSTS;         
    volatile unsigned int TOUT;           
    volatile unsigned int BAUD;           
    volatile unsigned int IRDA;           
    volatile unsigned int ALTCTL;         
    volatile unsigned int FUNCSEL;        
    volatile unsigned int LINCTL;         
    volatile unsigned int LINSTS;         

} UART_T;






 
























































































































































































































































































































































   
   


 



 



 

typedef struct
{


































































 

    volatile unsigned int BUFSEG;         
    volatile unsigned int MXPLD;          
    volatile unsigned int CFG;            
    volatile unsigned int CFGP;           

} USBD_EP_T;





typedef struct
{































































































































































































































 

    volatile unsigned int INTEN;          
    volatile unsigned int INTSTS;         
    volatile unsigned int FADDR;          
    volatile const  unsigned int EPSTS;          
    volatile unsigned int ATTR;           
    volatile const  unsigned int VBUSDET;        
    volatile unsigned int STBUFSEG;       
    volatile const  unsigned int RESERVE0[29]; 
    volatile unsigned int SE0;            
    volatile const  unsigned int RESERVE1[283];
    USBD_EP_T     EP[8];          

} USBD_T;






 


























































































































































   
   


 



 


typedef struct
{































































































































































































































































































































































































































































































































 

    volatile const  unsigned int HcRevision;     
    volatile unsigned int HcControl;      
    volatile unsigned int HcCommandStatus;  
    volatile unsigned int HcInterruptStatus;  
    volatile unsigned int HcInterruptEnable;  
    volatile unsigned int HcInterruptDisable;  
    volatile unsigned int HcHCCA;         
    volatile unsigned int HcPeriodCurrentED;  
    volatile unsigned int HcControlHeadED;  
    volatile unsigned int HcControlCurrentED;  
    volatile unsigned int HcBulkHeadED;   
    volatile unsigned int HcBulkCurrentED;  
    volatile unsigned int HcDoneHead;     
    volatile unsigned int HcFmInterval;   
    volatile const  unsigned int HcFmRemaining;  
    volatile const  unsigned int HcFmNumber;     
    volatile unsigned int HcPeriodicStart;  
    volatile unsigned int HcLSThreshold;  
    volatile unsigned int HcRhDescriptorA;  
    volatile unsigned int HcRhDescriptorB;  
    volatile unsigned int HcRhStatus;     
    volatile unsigned int HcRhPortStatus[2];  
    volatile const  unsigned int RESERVE0[105];
    volatile unsigned int HcPhyControl;   
    volatile unsigned int HcMiscControl;  

} USBH_T;







 




























































































































































































































   
   


 



 


typedef struct
{



















































































 

    volatile unsigned int CTL;            
    volatile unsigned int ALTCTL;         

} WDT_T;






 


































   
   


 



 


typedef struct
{











































































 

    volatile  unsigned int RLDCNT;         
    volatile unsigned int CTL;            
    volatile unsigned int STATUS;         
    volatile const  unsigned int CNT;            

} WWDT_T;






 




























   
   


   


 
 
 


 

 




 



 
#line 16846 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"

 
#line 16861 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"

 
#line 16874 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
   


 
 
 


 


#line 16900 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"







#line 16928 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"

 
#line 16962 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"

 










#line 16980 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"





#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"
 








 











 



 



 


 
 
 





#line 60 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"








 
 
 
#line 77 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


 
 
 






 
 
 







 
 
 






 

#line 118 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 128 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 138 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 148 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"




























































#line 216 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 226 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 236 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 245 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 256 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 266 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 275 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 285 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"









































#line 335 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 345 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 353 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 361 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 369 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"








#line 383 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"














































#line 437 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 447 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 457 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 467 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 475 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 484 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 494 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 502 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"



















































#line 561 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


















#line 585 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 593 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"









#line 610 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 620 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 630 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"


#line 640 "..\\..\\..\\Library\\StdDriver\\inc\\sys.h"





















































   




 







 








 








 








 








 









 








 








 








 












 








 








 








 








 








 








 








 








 








 








 








 















 



 
 
 








 
static __inline void SYS_UnlockReg(void)
{
    do
    {
        ((SYS_T *) ((0x40000000UL) + 0x00000))->REGLCTL = 0x59;
        ((SYS_T *) ((0x40000000UL) + 0x00000))->REGLCTL = 0x16;
        ((SYS_T *) ((0x40000000UL) + 0x00000))->REGLCTL = 0x88;
    }
    while(((SYS_T *) ((0x40000000UL) + 0x00000))->REGLCTL == 0);
}







 
static __inline void SYS_LockReg(void)
{
    ((SYS_T *) ((0x40000000UL) + 0x00000))->REGLCTL = 0;
}


void SYS_ClearResetSrc(unsigned int u32Src);
unsigned int SYS_GetBODStatus(void);
unsigned int SYS_GetResetSrc(void);
unsigned int SYS_IsRegLocked(void);
unsigned int SYS_ReadPDID(void);
void SYS_ResetChip(void);
void SYS_ResetCPU(void);
void SYS_ResetModule(unsigned int u32ModuleIndex);
void SYS_EnableBOD(int32_t i32Mode, unsigned int u32BODLevel);
void SYS_DisableBOD(void);


   

   

   






#line 16986 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\clk.h"









 










 



 



 


#line 39 "..\\..\\..\\Library\\StdDriver\\inc\\clk.h"


 
 
 






#line 56 "..\\..\\..\\Library\\StdDriver\\inc\\clk.h"








 
 
 




#line 77 "..\\..\\..\\Library\\StdDriver\\inc\\clk.h"

#line 84 "..\\..\\..\\Library\\StdDriver\\inc\\clk.h"

#line 91 "..\\..\\..\\Library\\StdDriver\\inc\\clk.h"

#line 98 "..\\..\\..\\Library\\StdDriver\\inc\\clk.h"















 
 
 






















 
 
 









 
 
 






 
 
 



 
 
 















 
 
 

 

#line 199 "..\\..\\..\\Library\\StdDriver\\inc\\clk.h"

#line 208 "..\\..\\..\\Library\\StdDriver\\inc\\clk.h"








































































































































   




 







 
static __inline unsigned int CLK_GetPLLClockFreq(void)
{
    unsigned int u32PllFreq = 0, u32PllReg;
    unsigned int u32FIN, u32NF, u32NR, u32NO;
    unsigned char au8NoTbl[4] = {1, 2, 2, 4};

    u32PllReg = ((CLK_T *) ((0x40000000UL) + 0x00200))->PLLCTL;

    if(u32PllReg & ((0x1ul << (16)) | (0x1ul << (18))))
        return 0;            

    if(u32PllReg & 0x00080000UL)
        u32FIN = (22118400UL);     
    else
        u32FIN = (12000000UL);      

    if(u32PllReg & (0x1ul << (17)))
        return u32FIN;       

     
    u32NO = au8NoTbl[((u32PllReg & (0x3ul << (14))) >> (14))];
    u32NF = ((u32PllReg & (0x1fful << (0))) >> (0)) + 2;
    u32NR = ((u32PllReg & (0x1ful << (9))) >> (9)) + 2;

     
    u32PllFreq = (((u32FIN >> 2) * u32NF) / (u32NR * u32NO) << 2);

    return u32PllFreq;
}









 
static __inline void CLK_SysTickDelay(unsigned int us)
{
    ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->LOAD = us * CyclesPerUs;
    ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->VAL  = (0x00);
    ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL = (1UL << 2) | (1UL << 0);

     
    while((((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL & (1UL << 16)) == 0);
    
     
    ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL = 0;
}








 

static __inline void CLK_SysTickLongDelay(unsigned int us)
{
    unsigned int delay;
        
     
    delay = 233016UL;

    do
    {
        if(us > delay)
        {
            us -= delay;
        }
        else
        {
            delay = us;
            us = 0UL;
        }        
        
        ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->LOAD = delay * CyclesPerUs;
        ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->VAL  = (0x0UL);
        ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL = (1UL << 2) | (1UL << 0);

         
        while((((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL & (1UL << 16)) == 0UL);

         
        ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL = 0UL;
    
    }while(us > 0UL);
    
}


void CLK_DisableCKO(void);
void CLK_EnableCKO(unsigned int u32ClkSrc, unsigned int u32ClkDiv, unsigned int u32ClkDivBy1En);
void CLK_PowerDown(void);
void CLK_Idle(void);
unsigned int CLK_GetHXTFreq(void);
unsigned int CLK_GetLXTFreq(void);
unsigned int CLK_GetHCLKFreq(void);
unsigned int CLK_GetPCLK0Freq(void);
unsigned int CLK_GetPCLK1Freq(void);
unsigned int CLK_GetCPUFreq(void);
unsigned int CLK_SetCoreClock(unsigned int u32Hclk);
void CLK_SetHCLK(unsigned int u32ClkSrc, unsigned int u32ClkDiv);
void CLK_SetModuleClock(unsigned int u32ModuleIdx, unsigned int u32ClkSrc, unsigned int u32ClkDiv);
void CLK_SetSysTickClockSrc(unsigned int u32ClkSrc);
void CLK_EnableXtalRC(unsigned int u32ClkMask);
void CLK_DisableXtalRC(unsigned int u32ClkMask);
void CLK_EnableModuleClock(unsigned int u32ModuleIdx);
void CLK_DisableModuleClock(unsigned int u32ModuleIdx);
unsigned int CLK_EnablePLL(unsigned int u32PllClkSrc, unsigned int u32PllFreq);
void CLK_DisablePLL(void);
unsigned int CLK_WaitClockReady(unsigned int u32ClkMask);
void CLK_EnableSysTick(unsigned int u32ClkSrc, unsigned int u32Count);
void CLK_DisableSysTick(void);



   

   

   





#line 16987 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\gpio.h"
 









 











 



 



 





 
 
 






 
 
 







 
 
 




 
 
 






#line 88 "..\\..\\..\\Library\\StdDriver\\inc\\gpio.h"















 
#line 192 "..\\..\\..\\Library\\StdDriver\\inc\\gpio.h"


   




 













 














 













 














 














 














 














 















 































 










 











 










 

















 














 



void GPIO_SetMode(GPIO_T *port, unsigned int u32PinMask, unsigned int u32Mode);
void GPIO_EnableInt(GPIO_T *port, unsigned int u32Pin, unsigned int u32IntAttribs);
void GPIO_DisableInt(GPIO_T *port, unsigned int u32Pin);


   

   

   








 
#line 16988 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\i2c.h"
 









 



#line 1 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"









 



















 

#line 17038 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"

 



#line 16 "..\\..\\..\\Library\\StdDriver\\inc\\i2c.h"









 



 



 

 
 
 
#line 47 "..\\..\\..\\Library\\StdDriver\\inc\\i2c.h"

 
 
 



 
 
 





   



 









 










 










 










 











 










 











 











 










 











 











 












 












 












 












 












 











 












 











 











 











 











 











 











 


 
 
 








 
static __inline void I2C_STOP(I2C_T *i2c)
{

    (i2c)->CTL |= ((0x1ul << (3)) | (0x1ul << (4)));
    while(i2c->CTL & (0x1ul << (4)));
}

void I2C_ClearTimeoutFlag(I2C_T *i2c);
void I2C_Close(I2C_T *i2c);
void I2C_Trigger(I2C_T *i2c, unsigned char u8Start, unsigned char u8Stop, unsigned char u8Si, unsigned char u8Ack);
void I2C_DisableInt(I2C_T *i2c);
void I2C_EnableInt(I2C_T *i2c);
unsigned int I2C_GetBusClockFreq(I2C_T *i2c);
unsigned int I2C_GetIntFlag(I2C_T *i2c);
unsigned int I2C_GetStatus(I2C_T *i2c);
unsigned int I2C_Open(I2C_T *i2c, unsigned int u32BusClock);
unsigned char I2C_GetData(I2C_T *i2c);
void I2C_SetSlaveAddr(I2C_T *i2c, unsigned char u8SlaveNo, unsigned char u8SlaveAddr, unsigned char u8GCMode);
void I2C_SetSlaveAddrMask(I2C_T *i2c, unsigned char u8SlaveNo, unsigned char u8SlaveAddrMask);
unsigned int I2C_SetBusClockFreq(I2C_T *i2c, unsigned int u32BusClock);
void I2C_EnableTimeout(I2C_T *i2c, unsigned char u8LongTimeout);
void I2C_DisableTimeout(I2C_T *i2c);
void I2C_EnableWakeup(I2C_T *i2c);
void I2C_DisableWakeup(I2C_T *i2c);
void I2C_SetData(I2C_T *i2c, unsigned char u8Data);

unsigned int I2C_SMBusGetStatus(I2C_T *i2c);
void I2C_SMBusClearInterruptFlag(I2C_T *i2c, unsigned char u8ClrSMBusIntFlag);
void I2C_SMBusSetPacketByteCount(I2C_T *i2c, unsigned int u32PktSize);
void I2C_SMBusOpen(I2C_T *i2c, unsigned char u8HostDevice);
void I2C_SMBusClose(I2C_T *i2c);
void I2C_SMBusPECTxEnable(I2C_T *i2c, unsigned char u8PECTxEn);
unsigned char I2C_SMBusGetPECValue(I2C_T *i2c);
void I2C_SMBusIdleTimeout(I2C_T *i2c, unsigned int us, unsigned int u32Hclk);
void I2C_SMBusTimeout(I2C_T *i2c, unsigned int ms, unsigned int u32Pclk);
void I2C_SMBusClockLoTimeout(I2C_T *i2c, unsigned int ms, unsigned int u32Pclk);
   

   

   

#line 16989 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\crc.h"
 








 











 



 



 
 
 
 





 
 
 





 
 
 




   




 












 










 










 


void CRC_Open(unsigned int u32Mode, unsigned int u32Attribute, unsigned int u32Seed, unsigned int u32DataLen);
unsigned int CRC_GetChecksum(void);

   

   

   







 
#line 16990 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\ebi.h"
 








 











 



 



 
 
 
 




 
 
 



 
 
 



 
 
 



 
 
 
#line 65 "..\\..\\..\\Library\\StdDriver\\inc\\ebi.h"

#line 73 "..\\..\\..\\Library\\StdDriver\\inc\\ebi.h"

   




 









 











 










 











 










 











 










 











 










 











 










 











 


void EBI_Open(unsigned int u32Bank, unsigned int u32DataWidth, unsigned int u32TimingClass, unsigned int u32BusMode, unsigned int u32CSActiveLevel);
void EBI_Close(unsigned int u32Bank);
void EBI_SetBusTiming(unsigned int u32Bank, unsigned int u32TimingConfig, unsigned int u32MclkDiv);

   

   

   







 
#line 16991 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\rtc.h"
 








 











 



 



 
 
 
 



 
 
 





 
 
 
#line 56 "..\\..\\..\\Library\\StdDriver\\inc\\rtc.h"

 
 
 
#line 67 "..\\..\\..\\Library\\StdDriver\\inc\\rtc.h"

 
 
 






 
 
 




   




 


 
typedef struct
{
    unsigned int u32Year;            
    unsigned int u32Month;           
    unsigned int u32Day;             
    unsigned int u32DayOfWeek;       
    unsigned int u32Hour;            
    unsigned int u32Minute;          
    unsigned int u32Second;          
    unsigned int u32TimeScale;       
    unsigned int u32AmPm;            
} S_RTC_TIME_DATA_T;

   




 










 










 










 










 











 











 











 












 













 










 
static __inline void RTC_WaitAccessEnable(void)
{
     
    while((((RTC_T *) (((0x40000000UL) + 0x00040000) + 0x01000))->RWEN & (0x1ul << (16))) == (0x1ul << (16)));
    ((RTC_T *) (((0x40000000UL) + 0x00040000) + 0x01000))->RWEN = 0x0000A965UL;

     
    while((((RTC_T *) (((0x40000000UL) + 0x00040000) + 0x01000))->RWEN & (0x1ul << (16))) == 0x0);
}

void RTC_Open(S_RTC_TIME_DATA_T *sPt);
void RTC_Close(void);
void RTC_32KCalibration(int32_t i32FrequencyX100);
void RTC_GetDateAndTime(S_RTC_TIME_DATA_T *sPt);
void RTC_GetAlarmDateAndTime(S_RTC_TIME_DATA_T *sPt);
void RTC_SetDateAndTime(S_RTC_TIME_DATA_T *sPt);
void RTC_SetAlarmDateAndTime(S_RTC_TIME_DATA_T *sPt);
void RTC_SetDate(unsigned int u32Year, unsigned int u32Month, unsigned int u32Day, unsigned int u32DayOfWeek);
void RTC_SetTime(unsigned int u32Hour, unsigned int u32Minute, unsigned int u32Second, unsigned int u32TimeMode, unsigned int u32AmPm);
void RTC_SetAlarmDate(unsigned int u32Year, unsigned int u32Month, unsigned int u32Day);
void RTC_SetAlarmTime(unsigned int u32Hour, unsigned int u32Minute, unsigned int u32Second, unsigned int u32TimeMode, unsigned int u32AmPm);
unsigned int RTC_GetDayOfWeek(void);
void RTC_SetTickPeriod(unsigned int u32TickSelection);
void RTC_EnableInt(unsigned int u32IntFlagMask);
void RTC_DisableInt(unsigned int u32IntFlagMask);
void RTC_EnableSpareAccess(void);
void RTC_DisableSpareRegister(void);
void RTC_EnableSnooperDetection(unsigned int u32PinCondition);
void RTC_DisableSnooperDetection(void);

   

   

   







 
#line 16992 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\timer.h"
 








 











 



 



 
 
 
 
#line 47 "..\\..\\..\\Library\\StdDriver\\inc\\timer.h"

   




 













 












 











 













 










 
static __inline void TIMER_Start(TIMER_T *timer)
{
    timer->CTL |= (0x1ul << (30));
}









 
static __inline void TIMER_Stop(TIMER_T *timer)
{
    timer->CTL &= ~(0x1ul << (30));
}











 
static __inline void TIMER_EnableWakeup(TIMER_T *timer)
{
    timer->CTL |= (0x1ul << (23));
}









 
static __inline void TIMER_DisableWakeup(TIMER_T *timer)
{
    timer->CTL &= ~(0x1ul << (23));
}









 
static __inline void TIMER_EnableCaptureDebounce(TIMER_T *timer)
{
    timer->EXTCTL |= (0x1ul << (6));
}









 
static __inline void TIMER_DisableCaptureDebounce(TIMER_T *timer)
{
    timer->EXTCTL &= ~(0x1ul << (6));
}









 
static __inline void TIMER_EnableEventCounterDebounce(TIMER_T *timer)
{
    timer->EXTCTL |= (0x1ul << (7));
}









 
static __inline void TIMER_DisableEventCounterDebounce(TIMER_T *timer)
{
    timer->EXTCTL &= ~(0x1ul << (7));
}









 
static __inline void TIMER_EnableInt(TIMER_T *timer)
{
    timer->CTL |= (0x1ul << (29));
}









 
static __inline void TIMER_DisableInt(TIMER_T *timer)
{
    timer->CTL &= ~(0x1ul << (29));
}









 
static __inline void TIMER_EnableCaptureInt(TIMER_T *timer)
{
    timer->EXTCTL |= (0x1ul << (5));
}









 
static __inline void TIMER_DisableCaptureInt(TIMER_T *timer)
{
    timer->EXTCTL &= ~(0x1ul << (5));
}










 
static __inline unsigned int TIMER_GetIntFlag(TIMER_T *timer)
{
    return ((timer->INTSTS & (0x1ul << (0))) ? 1 : 0);
}









 
static __inline void TIMER_ClearIntFlag(TIMER_T *timer)
{
    timer->INTSTS = (timer->INTSTS & ~(0x1ul << (1))) | (0x1ul << (0));
}










 
static __inline unsigned int TIMER_GetCaptureIntFlag(TIMER_T *timer)
{
    return timer->EINTSTS;
}









 
static __inline void TIMER_ClearCaptureIntFlag(TIMER_T *timer)
{
    timer->EINTSTS = (0x1ul << (0));
}










 
static __inline unsigned int TIMER_GetWakeupFlag(TIMER_T *timer)
{
    return (timer->INTSTS & (0x1ul << (1)) ? 1 : 0);
}









 
static __inline void TIMER_ClearWakeupFlag(TIMER_T *timer)
{
    timer->INTSTS = (timer->INTSTS & ~(0x1ul << (0))) | (0x1ul << (1));
}









 
static __inline unsigned int TIMER_GetCaptureData(TIMER_T *timer)
{
    return timer->CAP;
}









 
static __inline unsigned int TIMER_GetCounter(TIMER_T *timer)
{
    return timer->CNT;
}

unsigned int TIMER_Open(TIMER_T *timer, unsigned int u32Mode, unsigned int u32Freq);
void TIMER_Close(TIMER_T *timer);
void TIMER_Delay(TIMER_T *timer, unsigned int u32Usec);
void TIMER_EnableCapture(TIMER_T *timer, unsigned int u32CapMode, unsigned int u32Edge);
void TIMER_DisableCapture(TIMER_T *timer);
void TIMER_EnableEventCounter(TIMER_T *timer, unsigned int u32Edge);
void TIMER_DisableEventCounter(TIMER_T *timer);
unsigned int TIMER_GetModuleClock(TIMER_T *timer);

   

   

   







 
#line 16993 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\wdt.h"
 








 











 



 



 
 
 
 
#line 42 "..\\..\\..\\Library\\StdDriver\\inc\\wdt.h"

 
 
 





   




 









 










 










 











 











 











 













 










 
static __inline void WDT_Close(void)
{
    ((WDT_T *) (((0x40000000UL) + 0x00040000) + 0x00000))->CTL = 0;
    return;
}









 
static __inline void WDT_EnableInt(void)
{
    ((WDT_T *) (((0x40000000UL) + 0x00040000) + 0x00000))->CTL |= (0x1ul << (6));
    return;
}









 
static __inline void WDT_DisableInt(void)
{
    
    ((WDT_T *) (((0x40000000UL) + 0x00040000) + 0x00000))->CTL &= ~((0x1ul << (6)) | (0x1ul << (2)) | (0x1ul << (3)) | (0x1ul << (5)));
    return;
}

void WDT_Open(unsigned int u32TimeoutInterval, unsigned int u32ResetDelay, unsigned int u32EnableReset, unsigned int u32EnableWakeup);

   

   

   







 
#line 16994 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\wwdt.h"
 








 











 



 



 
 
 
 
#line 50 "..\\..\\..\\Library\\StdDriver\\inc\\wwdt.h"

 
 
 


   




 









 










 











 











 










 













 


void WWDT_Open(unsigned int u32PreScale, unsigned int u32CmpValue, unsigned int u32EnableInt);

   

   

   







 
#line 16995 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\spi.h"









 



 
 
 
#line 18 "..\\..\\..\\Library\\StdDriver\\inc\\spi.h"









 



 



 













 
#line 61 "..\\..\\..\\Library\\StdDriver\\inc\\spi.h"

 
#line 71 "..\\..\\..\\Library\\StdDriver\\inc\\spi.h"


 





 



 





 



 




 





 



 



 
#line 120 "..\\..\\..\\Library\\StdDriver\\inc\\spi.h"

   




 






 







 







 







 







 







 







 







 







 







 







 







 







 







 







 







 








 








 








 







 








 







 







 







 







 









 







 







 








 








 







 







 











 
static __inline void I2S_ENABLE_TX_ZCD(SPI_T *i2s, unsigned int u32ChMask)
{
    if(u32ChMask == 0)
        i2s->I2SCTL |= (0x1ul << (16));
    else
        i2s->I2SCTL |= (0x1ul << (17));
}









 
static __inline void I2S_DISABLE_TX_ZCD(SPI_T *i2s, unsigned int u32ChMask)
{
    if(u32ChMask == 0)
        i2s->I2SCTL &= ~(0x1ul << (16));
    else
        i2s->I2SCTL &= ~(0x1ul << (17));
}






 







 







 







 







 







 







 







 







 







 







 







 










 
static __inline void I2S_SET_MONO_RX_CHANNEL(SPI_T *i2s, unsigned int u32Ch)
{
    u32Ch == (0x1ul << (23)) ?
    (i2s->I2SCTL |= (0x1ul << (23))) :
    (i2s->I2SCTL &= ~(0x1ul << (23)));
}







 







 








 









 







 







 




 
unsigned int SPI_Open(SPI_T *spi, unsigned int u32MasterSlave, unsigned int u32SPIMode, unsigned int u32DataWidth, unsigned int u32BusClock);
void SPI_Close(SPI_T *spi);
void SPI_ClearRxFIFO(SPI_T *spi);
void SPI_ClearTxFIFO(SPI_T *spi);
void SPI_DisableAutoSS(SPI_T *spi);
void SPI_EnableAutoSS(SPI_T *spi, unsigned int u32SSPinMask, unsigned int u32ActiveLevel);
unsigned int SPI_SetBusClock(SPI_T *spi, unsigned int u32BusClock);
void SPI_SetFIFO(SPI_T *spi, unsigned int u32TxThreshold, unsigned int u32RxThreshold);
unsigned int SPI_GetBusClock(SPI_T *spi);
void SPI_EnableInt(SPI_T *spi, unsigned int u32Mask);
void SPI_DisableInt(SPI_T *spi, unsigned int u32Mask);
unsigned int SPI_GetIntFlag(SPI_T *spi, unsigned int u32Mask);
void SPI_ClearIntFlag(SPI_T *spi, unsigned int u32Mask);
unsigned int SPI_GetStatus(SPI_T *spi, unsigned int u32Mask);

unsigned int I2S_Open(SPI_T *i2s, unsigned int u32MasterSlave, unsigned int u32SampleRate, unsigned int u32WordWidth, unsigned int u32Channels, unsigned int u32DataFormat);
void I2S_Close(SPI_T *i2s);
void I2S_EnableInt(SPI_T *i2s, unsigned int u32Mask);
void I2S_DisableInt(SPI_T *i2s, unsigned int u32Mask);
unsigned int I2S_EnableMCLK(SPI_T *i2s, unsigned int u32BusClock);
void I2S_DisableMCLK(SPI_T *i2s);
void I2S_SetFIFO(SPI_T *i2s, unsigned int u32TxThreshold, unsigned int u32RxThreshold);


   

   

   







 
#line 16996 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\sc.h"
 








 











 



 



 
#line 37 "..\\..\\..\\Library\\StdDriver\\inc\\sc.h"

#line 48 "..\\..\\..\\Library\\StdDriver\\inc\\sc.h"


   




 





















 






















 











 
#line 121 "..\\..\\..\\Library\\StdDriver\\inc\\sc.h"











 
#line 141 "..\\..\\..\\Library\\StdDriver\\inc\\sc.h"










 
#line 160 "..\\..\\..\\Library\\StdDriver\\inc\\sc.h"










 
#line 179 "..\\..\\..\\Library\\StdDriver\\inc\\sc.h"







 









 









 








 
static __inline void SC_SetTxRetry(SC_T *sc, unsigned int u32Count)
{
    while((sc)->CTL & (0x1ul << (30)));
    if(u32Count == 0) {       
        (sc)->CTL &= ~((0x7ul << (20)) | (0x1ul << (23)));
    } else {
        (sc)->CTL = ((sc)->CTL & ~(0x7ul << (20))) | ((u32Count - 1) << (20)) | (0x1ul << (23));
    }
}







 
static __inline void  SC_SetRxRetry(SC_T *sc, unsigned int u32Count)
{
    while((sc)->CTL & (0x1ul << (30)));
    if(u32Count == 0) {       
        (sc)->CTL &= ~((0x7ul << (16)) | (0x1ul << (19)));
    } else {
        (sc)->CTL = ((sc)->CTL & ~(0x7ul << (16))) | ((u32Count - 1) << (16)) | (0x1ul << (19));
    }
}


unsigned int SC_IsCardInserted(SC_T *sc);
void SC_ClearFIFO(SC_T *sc);
void SC_Close(SC_T *sc);
void SC_Open(SC_T *sc, unsigned int u32CardDet, unsigned int u32PWR);
void SC_ResetReader(SC_T *sc);
void SC_SetBlockGuardTime(SC_T *sc, unsigned int u32BGT);
void SC_SetCharGuardTime(SC_T *sc, unsigned int u32CGT);
void SC_StopAllTimer(SC_T *sc);
void SC_StartTimer(SC_T *sc, unsigned int u32TimerNum, unsigned int u32Mode, unsigned int u32ETUCount);
void SC_StopTimer(SC_T *sc, unsigned int u32TimerNum);


   

   

   







 

#line 16997 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\scuart.h"
 








 











 



 



 













   




 

 







 











 









 









 










 









 



 







 










 










 










 









 


 













 














 
















 













 












 













 


void SCUART_Close(SC_T* sc);
unsigned int SCUART_Open(SC_T* sc, unsigned int u32baudrate);
unsigned int SCUART_Read(SC_T* sc, unsigned char *pu8RxBuf, unsigned int u32ReadBytes);
unsigned int SCUART_SetLineConfig(SC_T* sc, unsigned int u32Baudrate, unsigned int u32DataWidth, unsigned int u32Parity, unsigned int  u32StopBits);
void SCUART_SetTimeoutCnt(SC_T* sc, unsigned int u32TOC);
void SCUART_Write(SC_T* sc, unsigned char *pu8TxBuf, unsigned int u32WriteBytes);

   

   

   







 
#line 16998 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\acmp.h"
 









 



 
 
 
#line 19 "..\\..\\..\\Library\\StdDriver\\inc\\acmp.h"









 



 




 



 
 
 
#line 65 "..\\..\\..\\Library\\StdDriver\\inc\\acmp.h"

 
 
 




   




 

 
 
 








 








 













 








 








 









 








 








 








 








 








 








 








 








 








 













 








 








 

















 











 










 












 




 
void ACMP_Open(ACMP_T *, unsigned int u32ChNum, unsigned int u32NegSrc, unsigned int u32HysteresisEn);
void ACMP_Close(ACMP_T *, unsigned int u32ChNum);



   

   

   








 
#line 16999 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\eadc.h"









 



 
 
 
#line 18 "..\\..\\..\\Library\\StdDriver\\inc\\eadc.h"










 



 



 

 
 
 






#line 55 "..\\..\\..\\Library\\StdDriver\\inc\\eadc.h"

 
 
 




#line 85 "..\\..\\..\\Library\\StdDriver\\inc\\eadc.h"







 
 
 
#line 101 "..\\..\\..\\Library\\StdDriver\\inc\\eadc.h"

   



 
 
 
 






 









 







 









 








 








 








 










 









 










 










 










 










 










 








 








 








 








 








 










 








 










 









 








 








 








 








 








 















 
#line 404 "..\\..\\..\\Library\\StdDriver\\inc\\eadc.h"














 
#line 428 "..\\..\\..\\Library\\StdDriver\\inc\\eadc.h"














 
#line 452 "..\\..\\..\\Library\\StdDriver\\inc\\eadc.h"














 
#line 476 "..\\..\\..\\Library\\StdDriver\\inc\\eadc.h"







 








 










 








 







 







 







 







 


 
 
 
void EADC_Open(EADC_T *eadc, unsigned int u32InputMode);
void EADC_Close(EADC_T *eadc);
void EADC_ConfigSampleModule(EADC_T *eadc, unsigned int u32ModuleNum, unsigned int u32TriggerSource, unsigned int u32Channel);
void EADC_SetTriggerDelayTime(EADC_T *eadc, unsigned int u32ModuleNum, unsigned int u32TriggerDelayTime, unsigned int u32DelayClockDivider);
void EADC_SetInternalSampleTime(EADC_T *eadc, unsigned int u32SampleTime);
void EADC_SetExtendSampleTime(EADC_T *eadc, unsigned int u32ModuleNum, unsigned int u32ExtendSampleTime);

   

   

   







 
#line 17000 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\dac.h"









 



 
 
 
#line 18 "..\\..\\..\\Library\\StdDriver\\inc\\dac.h"










 



 




 

 
 
 



#line 57 "..\\..\\..\\Library\\StdDriver\\inc\\dac.h"





   




 
 
 
 






 







 







 








 







 








 








 







 







 







 







 










 








 









 









 








 








 







 


void DAC_Open(DAC_T *dac, unsigned int u32Ch, unsigned int u32TrgSrc);
void DAC_Close(DAC_T *dac, unsigned int u32Ch);
float DAC_SetDelayTime(DAC_T *dac, unsigned int u16Delay);

   

   

   







 
#line 17001 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\can.h"
 









 



#line 16 "..\\..\\..\\Library\\StdDriver\\inc\\can.h"









 



 



 
 
 
 



 
 
 



 
 
 



 
 
 
typedef struct
{
    unsigned int  IdType;
    unsigned int  FrameType;
    unsigned int  Id;
    unsigned char   DLC;
    unsigned char   Data[8];
} STR_CANMSG_T;

 
 
 
typedef struct
{
    unsigned char   u8Xtd;
    unsigned char   u8Dir;
    unsigned int  u32Id;
    unsigned char   u8IdType;
} STR_CANMASK_T;




   




 










 











 










 










 












 



 
 
 
unsigned int CAN_SetBaudRate(CAN_T *tCAN, unsigned int u32BaudRate);
unsigned int CAN_Open(CAN_T *tCAN, unsigned int u32BaudRate, unsigned int u32Mode);
void CAN_Close(CAN_T *tCAN);
void CAN_CLR_INT_PENDING_BIT(CAN_T *tCAN, unsigned char u32MsgNum);
void CAN_EnableInt(CAN_T *tCAN, unsigned int u32Mask);
void CAN_DisableInt(CAN_T *tCAN, unsigned int u32Mask);
int32_t CAN_Transmit(CAN_T *tCAN, unsigned int u32MsgNum , STR_CANMSG_T* pCanMsg);
int32_t CAN_Receive(CAN_T *tCAN, unsigned int u32MsgNum , STR_CANMSG_T* pCanMsg);
int32_t CAN_SetMultiRxMsg(CAN_T *tCAN, unsigned int u32MsgNum , unsigned int u32MsgCount, unsigned int u32IDType, unsigned int u32ID);
int32_t CAN_SetRxMsg(CAN_T *tCAN, unsigned int u32MsgNum , unsigned int u32IDType, unsigned int u32ID);
int32_t CAN_SetRxMsgAndMsk(CAN_T *tCAN, unsigned int u32MsgNum , unsigned int u32IDType, unsigned int u32ID, unsigned int u32IDMask);
int32_t CAN_SetTxMsg(CAN_T *tCAN, unsigned int u32MsgNum , STR_CANMSG_T* pCanMsg);
int32_t CAN_TriggerTxMsg(CAN_T  *tCAN, unsigned int u32MsgNum);


   

   

   







 
#line 17002 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\usbd.h"








 






 



 



 
typedef struct s_usbd_info
{
    const unsigned char *gu8DevDesc;             
    const unsigned char *gu8ConfigDesc;          
    const unsigned char **gu8StringDesc;         
    const unsigned char **gu8HidReportDesc;      
    const unsigned int *gu32HidReportSize;     
    const unsigned int *gu32ConfigHidDescIdx;  	

} S_USBD_INFO_T;

extern const S_USBD_INFO_T gsInfo;

   






 



#line 57 "..\\..\\..\\Library\\StdDriver\\inc\\usbd.h"


 




 
#line 76 "..\\..\\..\\Library\\StdDriver\\inc\\usbd.h"

 
#line 85 "..\\..\\..\\Library\\StdDriver\\inc\\usbd.h"

 



 
#line 97 "..\\..\\..\\Library\\StdDriver\\inc\\usbd.h"

 







 



 
 
 














#line 140 "..\\..\\..\\Library\\StdDriver\\inc\\usbd.h"
















   




 










 












 












 











 











 











 











 











 











 











 














 











 














 











 















 












 











 












 












 













 











 













 













 











 











 










 












 















 
static __inline void USBD_MemCopy(unsigned char *dest, unsigned char *src, int32_t size)
{
    while(size--) *dest++ = *src++;
}











 
static __inline void USBD_SetStall(unsigned char epnum)
{
    unsigned int u32CfgAddr;
    unsigned int u32Cfg;
    int i;

    for(i = 0; i < 8; i++)
    {
        u32CfgAddr = (unsigned int)(i << 4) + (unsigned int)&((USBD_T *) (((0x40000000UL) + 0x00040000) + 0x80000))->EP[0].CFG;  
        u32Cfg = *((volatile unsigned int *)(u32CfgAddr));

        if((u32Cfg & 0xf) == epnum)
        {
            u32CfgAddr = (unsigned int)(i << 4) + (unsigned int)&((USBD_T *) (((0x40000000UL) + 0x00040000) + 0x80000))->EP[0].CFGP;  
            u32Cfg = *((volatile unsigned int *)(u32CfgAddr));

            *((volatile unsigned int *)(u32CfgAddr)) = (u32Cfg | (0x1ul << (1)));
            break;
        }
    }
}









 
static __inline void USBD_ClearStall(unsigned char epnum)
{
    unsigned int u32CfgAddr;
    unsigned int u32Cfg;
    int i;

    for(i = 0; i < 8; i++)
    {
        u32CfgAddr = (unsigned int)(i << 4) + (unsigned int)&((USBD_T *) (((0x40000000UL) + 0x00040000) + 0x80000))->EP[0].CFG;  
        u32Cfg = *((volatile unsigned int *)(u32CfgAddr));

        if((u32Cfg & 0xf) == epnum)
        {
            u32CfgAddr = (unsigned int)(i << 4) + (unsigned int)&((USBD_T *) (((0x40000000UL) + 0x00040000) + 0x80000))->EP[0].CFGP;  
            u32Cfg = *((volatile unsigned int *)(u32CfgAddr));

            *((volatile unsigned int *)(u32CfgAddr)) = (u32Cfg & ~(0x1ul << (1)));
            break;
        }
    }
}











 
static __inline unsigned int USBD_GetStall(unsigned char epnum)
{
    unsigned int u32CfgAddr;
    unsigned int u32Cfg;
    int i;

    for(i = 0; i < 8; i++)
    {
        u32CfgAddr = (unsigned int)(i << 4) + (unsigned int)&((USBD_T *) (((0x40000000UL) + 0x00040000) + 0x80000))->EP[0].CFG;  
        u32Cfg = *((volatile unsigned int *)(u32CfgAddr));

        if((u32Cfg & 0xf) == epnum)
        {
            u32CfgAddr = (unsigned int)(i << 4) + (unsigned int)&((USBD_T *) (((0x40000000UL) + 0x00040000) + 0x80000))->EP[0].CFGP;  
            break;
        }
    }

    return ((*((volatile unsigned int *)(u32CfgAddr))) & (0x1ul << (1)));
}


extern volatile unsigned char g_usbd_RemoteWakeupEn;


typedef void (*VENDOR_REQ)(void);            
typedef void (*CLASS_REQ)(void);             
typedef void (*SET_INTERFACE_REQ)(void);     
typedef void (*SET_CONFIG_CB)(void);        


 
void USBD_Open(const S_USBD_INFO_T *param, CLASS_REQ pfnClassReq, SET_INTERFACE_REQ pfnSetInterface);
void USBD_Start(void);
void USBD_GetSetupPacket(unsigned char *buf);
void USBD_ProcessSetupPacket(void);
void USBD_StandardRequest(void);
void USBD_PrepareCtrlIn(unsigned char *pu8Buf, unsigned int u32Size);
void USBD_CtrlIn(void);
void USBD_PrepareCtrlOut(unsigned char *pu8Buf, unsigned int u32Size);
void USBD_CtrlOut(void);
void USBD_SwReset(void);
void USBD_SetVendorRequest(VENDOR_REQ pfnVendorReq);
void USBD_SetConfigCallback(SET_CONFIG_CB pfnSetConfigCallback);
void USBD_LockEpStall(unsigned int u32EpBitmap);

   

   

   




 
#line 17003 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\fmc.h"
 









 



#line 16 "..\\..\\..\\Library\\StdDriver\\inc\\fmc.h"









 



 



 

 
 
 


 
 
 












 
 
 



 
 
 
#line 75 "..\\..\\..\\Library\\StdDriver\\inc\\fmc.h"

 
 
 






   



 

 
 
 









 











 












 











 












 











 













 











 













 











 


 
 
 











 
static __inline void FMC_Write(unsigned int u32Addr, unsigned int u32Data)
{
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPCMD = 0x21;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR = u32Addr;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPDAT = u32Data;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG = 0x1;



    while(((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG);
}













 
static __inline void FMC_Write8(unsigned int u32Addr, unsigned int u32Data0, unsigned int u32Data1)
{
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPCMD = 0x61;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR = u32Addr;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->MPDAT0 = u32Data0;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->MPDAT1 = u32Data1;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG = 0x1;



    while(((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG);
}











 
static __inline unsigned int FMC_Read(unsigned int u32Addr)
{
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPCMD = 0x00;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR = u32Addr;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPDAT = 0;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG = 0x1;



    while(((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG);

    return ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPDAT;
}












 
static __inline int32_t FMC_Erase(unsigned int u32Addr)
{
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPCMD = 0x22;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR = u32Addr;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG = 0x1;



    while(((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG);

     
    if(((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPCTL & (0x1ul << (6)))
    {
        ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPCTL |= (0x1ul << (6));
        return -1;
    }
    return 0;
}










 
static __inline unsigned int FMC_ReadUID(unsigned char u8Index)
{
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPCMD = 0x04;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR = (u8Index << 2);
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPDAT = 0;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG = 0x1;



    while(((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG);

    return ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPDAT;
}










 
static __inline unsigned int FMC_ReadCID(void)
{
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPCMD = 0x0B;            
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR = 0x0;                           
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG = (0x1ul << (0));           



    while(((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG & (0x1ul << (0))) ;   

    return ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPDAT;
}










 
static __inline unsigned int FMC_ReadPID(void)
{
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPCMD = 0x0C;           
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR = 0x04;                          
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG = (0x1ul << (0));          



    while(((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG & (0x1ul << (0)));   

    return ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPDAT;
}










 
static __inline unsigned int FMC_ReadUCID(unsigned int u32Index)
{
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPCMD = 0x04;           
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR = (0x04 * u32Index) + 0x10;      
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG = (0x1ul << (0));          



    while(((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG & (0x1ul << (0)));   

    return ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPDAT;
}













 
static __inline void FMC_SetVectorPageAddr(unsigned int u32PageAddr)
{
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPCMD = 0x2E;  
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR = u32PageAddr;        
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG = 0x1;                



    while(((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG);               
}













 
static __inline unsigned int FMC_GetVECMAP(void)
{
    return (((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPSTS & (0x7ffful << (9)));
}











 
static __inline unsigned int FMC_GetCheckSum(unsigned int u32Addr, int32_t i32Size)
{
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPCMD = 0x2D;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR = u32Addr;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPDAT = i32Size;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG = 0x1;



    while(((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG);

    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPCMD = 0x0D;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG = 0x1;
    while(((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG);

    return ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPDAT;
}












 
static __inline void FMC_Write256(unsigned int u32Addr, unsigned int *pu32Buf)
{
    int32_t i, idx;
    volatile unsigned int *pu32IspData;
    

    
    idx = 0;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPCMD = 0x27;
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR = u32Addr;

retrigger:

    
    

    ((FMC_T *) ((0x40000000UL) + 0x0C000))->MPDAT0 = pu32Buf[idx + 0];
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->MPDAT1 = pu32Buf[idx + 1];
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->MPDAT2 = pu32Buf[idx + 2];
    ((FMC_T *) ((0x40000000UL) + 0x0C000))->MPDAT3 = pu32Buf[idx + 3];



    ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPTRG = 0x1;

    pu32IspData = &((FMC_T *) ((0x40000000UL) + 0x0C000))->MPDAT0;
    idx += 4;

    for(i = idx; i < 256 / 4; i += 4) 
    {

        __set_PRIMASK(1); 
        do
        {
            if((((FMC_T *) ((0x40000000UL) + 0x0C000))->MPSTS & (0x1ul << (0))) == 0)
            {
                __set_PRIMASK(0);
                
                ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR = ((FMC_T *) ((0x40000000UL) + 0x0C000))->MPADDR & (~0xful);
                idx = (((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR - u32Addr) / 4;
                
                goto retrigger;
            }
        }
        while(((FMC_T *) ((0x40000000UL) + 0x0C000))->MPSTS & (3 << (4)));

        
        pu32IspData[0] = pu32Buf[i  ];
        pu32IspData[1] = pu32Buf[i + 1];

        do
        {
            if((((FMC_T *) ((0x40000000UL) + 0x0C000))->MPSTS & (0x1ul << (0))) == 0)
            {
                __set_PRIMASK(0);
                
                ((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR = ((FMC_T *) ((0x40000000UL) + 0x0C000))->MPADDR & (~0xful);
                idx = (((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPADDR - u32Addr) / 4;
                
                goto retrigger;
            }
        }
        while(((FMC_T *) ((0x40000000UL) + 0x0C000))->MPSTS & (3 << (6)));

        
        pu32IspData[2] = pu32Buf[i + 2];
        pu32IspData[3] = pu32Buf[i + 3];
        __set_PRIMASK(0);
    }

    while(((FMC_T *) ((0x40000000UL) + 0x0C000))->ISPSTS & (0x1ul << (0)));
}

void FMC_Open(void);
void FMC_Close(void);
void FMC_EnableAPUpdate(void);
void FMC_DisableAPUpdate(void);
void FMC_EnableConfigUpdate(void);
void FMC_DisableConfigUpdate(void);
void FMC_EnableLDUpdate(void);
void FMC_DisableLDUpdate(void);
int32_t FMC_ReadConfig(unsigned int *u32Config, unsigned int u32Count);
int32_t FMC_WriteConfig(unsigned int *u32Config, unsigned int u32Count);
void FMC_SetBootSource(int32_t i32BootSrc);
int32_t FMC_GetBootSource(void);
unsigned int FMC_ReadDataFlashBaseAddr(void);
void FMC_EnableFreqOptimizeMode(unsigned int u32Mode);
void FMC_DisableFreqOptimizeMode(void);
   

   

   








#line 17004 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\uart.h"









 












 



 



 

 
 
 






 
 
 











 
 
 
















 
 
 




 
 
 




 
 
 






 
 
 
#line 107 "..\\..\\..\\Library\\StdDriver\\inc\\uart.h"


 
 
 




   




 











 












 












 











 












 












 













 











 












 












 












 












 












 






















 






















 



































 











 
static __inline void UART_CLEAR_RTS(UART_T* uart)
{
    uart->MODEM |= (0x1ul << (9));
    uart->MODEM &= ~(0x1ul << (1));
}










 
static __inline void UART_SET_RTS(UART_T* uart)
{
    uart->MODEM |= (0x1ul << (9)) | (0x1ul << (1));
}










 












 



void UART_ClearIntFlag(UART_T* uart , unsigned int u32InterruptFlag);
void UART_Close(UART_T* uart);
void UART_DisableFlowCtrl(UART_T* uart);
void UART_DisableInt(UART_T*  uart, unsigned int u32InterruptFlag);
void UART_EnableFlowCtrl(UART_T* uart);
void UART_EnableInt(UART_T*  uart, unsigned int u32InterruptFlag);
void UART_Open(UART_T* uart, unsigned int u32baudrate);
unsigned int UART_Read(UART_T* uart, unsigned char *pu8RxBuf, unsigned int u32ReadBytes);
void UART_SetLine_Config(UART_T* uart, unsigned int u32baudrate, unsigned int u32data_width, unsigned int u32parity, unsigned int  u32stop_bits);
void UART_SetTimeoutCnt(UART_T* uart, unsigned int u32TOC);
void UART_SelectIrDAMode(UART_T* uart, unsigned int u32Buadrate, unsigned int u32Direction);
void UART_SelectRS485Mode(UART_T* uart, unsigned int u32Mode, unsigned int u32Addr);
void UART_SelectLINMode(UART_T* uart, unsigned int u32Mode, unsigned int u32BreakLength);
unsigned int UART_Write(UART_T* uart, unsigned char *pu8TxBuf, unsigned int u32WriteBytes);




   

   

   







 
#line 17005 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\pwm.h"
 








 











 



 



 
#line 38 "..\\..\\..\\Library\\StdDriver\\inc\\pwm.h"

 
 
 




 
 
 



 
 
 





 
 
 
#line 79 "..\\..\\..\\Library\\StdDriver\\inc\\pwm.h"






 
 
 
#line 96 "..\\..\\..\\Library\\StdDriver\\inc\\pwm.h"

#line 105 "..\\..\\..\\Library\\StdDriver\\inc\\pwm.h"




 
 
 







 
 
 



 
 
 
#line 136 "..\\..\\..\\Library\\StdDriver\\inc\\pwm.h"

 
 
 




 
 
 
#line 153 "..\\..\\..\\Library\\StdDriver\\inc\\pwm.h"

 
 
 
#line 165 "..\\..\\..\\Library\\StdDriver\\inc\\pwm.h"

 
 
 







   




 







 








 








 








 










 










 
#line 247 "..\\..\\..\\Library\\StdDriver\\inc\\pwm.h"









 









 









 












 
















 











 











 












 













 
#line 366 "..\\..\\..\\Library\\StdDriver\\inc\\pwm.h"









 










 










 






























 
#line 441 "..\\..\\..\\Library\\StdDriver\\inc\\pwm.h"












 












 




 
 
 
unsigned int PWM_ConfigCaptureChannel(PWM_T *pwm, unsigned int u32ChannelNum, unsigned int u32UnitTimeNsec, unsigned int u32CaptureEdge);
unsigned int PWM_ConfigOutputChannel(PWM_T *pwm, unsigned int u32ChannelNum, unsigned int u32Frequency, unsigned int u32DutyCycle);
void PWM_Start(PWM_T *pwm, unsigned int u32ChannelMask);
void PWM_Stop(PWM_T *pwm, unsigned int u32ChannelMask);
void PWM_ForceStop(PWM_T *pwm, unsigned int u32ChannelMask);
void PWM_EnableADCTrigger(PWM_T *pwm, unsigned int u32ChannelNum, unsigned int u32Condition);
void PWM_DisableADCTrigger(PWM_T *pwm, unsigned int u32ChannelNum);
void PWM_ClearADCTriggerFlag(PWM_T *pwm, unsigned int u32ChannelNum, unsigned int u32Condition);
unsigned int PWM_GetADCTriggerFlag(PWM_T *pwm, unsigned int u32ChannelNum);
void PWM_EnableDACTrigger(PWM_T *pwm, unsigned int u32ChannelNum, unsigned int u32Condition);
void PWM_DisableDACTrigger(PWM_T *pwm, unsigned int u32ChannelNum);
void PWM_ClearDACTriggerFlag(PWM_T *pwm, unsigned int u32ChannelNum, unsigned int u32Condition);
unsigned int PWM_GetDACTriggerFlag(PWM_T *pwm, unsigned int u32ChannelNum);
void PWM_EnableFaultBrake(PWM_T *pwm, unsigned int u32ChannelMask, unsigned int u32LevelMask, unsigned int u32BrakeSource);
void PWM_EnableCapture(PWM_T *pwm, unsigned int u32ChannelMask);
void PWM_DisableCapture(PWM_T *pwm, unsigned int u32ChannelMask);
void PWM_EnableOutput(PWM_T *pwm, unsigned int u32ChannelMask);
void PWM_DisableOutput(PWM_T *pwm, unsigned int u32ChannelMask);
void PWM_EnablePDMA(PWM_T *pwm, unsigned int u32ChannelNum, unsigned int u32RisingFirst, unsigned int u32Mode);
void PWM_DisablePDMA(PWM_T *pwm, unsigned int u32ChannelNum);
void PWM_EnableDeadZone(PWM_T *pwm, unsigned int u32ChannelNum, unsigned int u32Duration);
void PWM_DisableDeadZone(PWM_T *pwm, unsigned int u32ChannelNum);
void PWM_EnableCaptureInt(PWM_T *pwm, unsigned int u32ChannelNum, unsigned int u32Edge);
void PWM_DisableCaptureInt(PWM_T *pwm, unsigned int u32ChannelNum, unsigned int u32Edge);
void PWM_ClearCaptureIntFlag(PWM_T *pwm, unsigned int u32ChannelNum, unsigned int u32Edge);
unsigned int PWM_GetCaptureIntFlag(PWM_T *pwm, unsigned int u32ChannelNum);
void PWM_EnableDutyInt(PWM_T *pwm, unsigned int u32ChannelNum, unsigned int u32IntDutyType);
void PWM_DisableDutyInt(PWM_T *pwm, unsigned int u32ChannelNum);
void PWM_ClearDutyIntFlag(PWM_T *pwm, unsigned int u32ChannelNum);
unsigned int PWM_GetDutyIntFlag(PWM_T *pwm, unsigned int u32ChannelNum);
void PWM_EnableFaultBrakeInt(PWM_T *pwm, unsigned int u32BrakeSource);
void PWM_DisableFaultBrakeInt(PWM_T *pwm, unsigned int u32BrakeSource);
void PWM_ClearFaultBrakeIntFlag(PWM_T *pwm, unsigned int u32BrakeSource);
unsigned int PWM_GetFaultBrakeIntFlag(PWM_T *pwm, unsigned int u32BrakeSource);
void PWM_EnablePeriodInt(PWM_T *pwm, unsigned int u32ChannelNum,  unsigned int u32IntPeriodType);
void PWM_DisablePeriodInt(PWM_T *pwm, unsigned int u32ChannelNum);
void PWM_ClearPeriodIntFlag(PWM_T *pwm, unsigned int u32ChannelNum);
unsigned int PWM_GetPeriodIntFlag(PWM_T *pwm, unsigned int u32ChannelNum);
void PWM_EnableZeroInt(PWM_T *pwm, unsigned int u32ChannelNum);
void PWM_DisableZeroInt(PWM_T *pwm, unsigned int u32ChannelNum);
void PWM_ClearZeroIntFlag(PWM_T *pwm, unsigned int u32ChannelNum);
unsigned int PWM_GetZeroIntFlag(PWM_T *pwm, unsigned int u32ChannelNum);
void PWM_EnableAcc(PWM_T *pwm, unsigned int u32ChannelNum, unsigned int u32IntFlagCnt, unsigned int u32IntAccSrc);
void PWM_DisableAcc(PWM_T *pwm, unsigned int u32ChannelNum);
void PWM_EnableAccInt(PWM_T *pwm, unsigned int u32ChannelNum);
void PWM_DisableAccInt(PWM_T *pwm, unsigned int u32ChannelNum);
void PWM_ClearAccInt(PWM_T *pwm, unsigned int u32ChannelNum);
unsigned int PWM_GetAccInt(PWM_T *pwm, unsigned int u32ChannelNum);
void PWM_ClearFTDutyIntFlag(PWM_T *pwm, unsigned int u32ChannelNum);
unsigned int PWM_GetFTDutyIntFlag(PWM_T *pwm, unsigned int u32ChannelNum);
void PWM_EnableLoadMode(PWM_T *pwm, unsigned int u32ChannelNum, unsigned int u32LoadMode);
void PWM_DisableLoadMode(PWM_T *pwm, unsigned int u32ChannelNum, unsigned int u32LoadMode);
void PWM_ConfigSyncPhase(PWM_T *pwm, unsigned int u32ChannelNum, unsigned int u32SyncSrc, unsigned int u32Direction, unsigned int u32StartPhase);
void PWM_EnableSyncPhase(PWM_T *pwm, unsigned int u32ChannelMask);
void PWM_DisableSyncPhase(PWM_T *pwm, unsigned int u32ChannelMask);
void PWM_EnableSyncNoiseFilter(PWM_T *pwm, unsigned int u32ClkCnt, unsigned int u32ClkDivSel);
void PWM_DisableSyncNoiseFilter(PWM_T *pwm);
void PWM_EnableSyncPinInverse(PWM_T *pwm);
void PWM_DisableSyncPinInverse(PWM_T *pwm);
void PWM_SetClockSource(PWM_T *pwm, unsigned int u32ChannelNum, unsigned int u32ClkSrcSel);
void PWM_EnableBrakeNoiseFilter(PWM_T *pwm, unsigned int u32BrakePinNum, unsigned int u32ClkCnt, unsigned int u32ClkDivSel);
void PWM_DisableBrakeNoiseFilter(PWM_T *pwm, unsigned int u32BrakePinNum);
void PWM_EnableBrakePinInverse(PWM_T *pwm, unsigned int u32BrakePinNum);
void PWM_DisableBrakePinInverse(PWM_T *pwm, unsigned int u32BrakePinNum);
void PWM_SetBrakePinSource(PWM_T *pwm, unsigned int u32BrakePinNum, unsigned int u32SelAnotherModule);
unsigned int PWM_GetWrapAroundFlag(PWM_T *pwm, unsigned int u32ChannelNum);
void PWM_ClearWrapAroundFlag(PWM_T *pwm, unsigned int u32ChannelNum);


   

   

   







 
#line 17006 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\pdma.h"
 








 











 



 



 


 
 
 




 
 
 




 
 
 





 
 
 



#line 69 "..\\..\\..\\Library\\StdDriver\\inc\\pdma.h"

 
 
 
#line 96 "..\\..\\..\\Library\\StdDriver\\inc\\pdma.h"

 
 
 





   



 









 










 










 










 










 










 










 











 











 











 











 











 











 










 


 
 
 
void PDMA_Open(unsigned int u32Mask);
void PDMA_Close(void);
void PDMA_SetTransferCnt(unsigned int u32Ch, unsigned int u32Width, unsigned int u32TransCount);
void PDMA_SetTransferAddr(unsigned int u32Ch, unsigned int u32SrcAddr, unsigned int u32SrcCtrl, unsigned int u32DstAddr, unsigned int u32DstCtrl);
void PDMA_SetTransferMode(unsigned int u32Ch, unsigned int u32Peripheral, unsigned int u32ScatterEn, unsigned int u32DescAddr);
void PDMA_SetBurstType(unsigned int u32Ch, unsigned int u32BurstType, unsigned int u32BurstSize);
void PDMA_EnableTimeout(unsigned int u32Mask);
void PDMA_DisableTimeout(unsigned int u32Mask);
void PDMA_SetTimeOut(unsigned int u32Ch, unsigned int u32OnOff, unsigned int u32TimeOutCnt);
void PDMA_Trigger(unsigned int u32Ch);
void PDMA_EnableInt(unsigned int u32Ch, unsigned int u32Mask);
void PDMA_DisableInt(unsigned int u32Ch, unsigned int u32Mask);


   

   

   







 
#line 17007 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\tk.h"
 









 



#line 16 "..\\..\\..\\Library\\StdDriver\\inc\\tk.h"









 



 



 
















#line 58 "..\\..\\..\\Library\\StdDriver\\inc\\tk.h"













#line 91 "..\\..\\..\\Library\\StdDriver\\inc\\tk.h"


   




 








 








 









 










 







 











 











 
















 







 







 








 




























 



























 



 
 
 
void TK_Open(void);
void TK_Close(void);
void TK_SetScanMode(unsigned int u32Mode);
void TK_ConfigSensitivity(unsigned int u32PulseWidth, unsigned int u32SenseCnt, unsigned int u32AVCCHSel);
void TK_SetCapBankPol(unsigned int u32CapBankPolSel);
void TK_EnableTkPolarity(unsigned int u32Mask);
void TK_DisableTkPolarity(unsigned int u32Mask);
void TK_SetCompCapBankData(unsigned int u32TKNum, unsigned int u32CapData);
void TK_SetTkPol(unsigned int u32Mask, unsigned int u32PolSel);
void TK_SetRefKeyCapBankData(unsigned int u32CapData);
void TK_SetScanThreshold(unsigned int u32TKNum, unsigned int u32HighLevel, unsigned int u32LowLevel);
void TK_EnableInt(unsigned int u32Msk);
void TK_DisableInt(unsigned int u32Msk);


   

   

   







 
#line 17008 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"
#line 1 "..\\..\\..\\Library\\StdDriver\\inc\\otg.h"
 









 



 
 
 
#line 19 "..\\..\\..\\Library\\StdDriver\\inc\\otg.h"









 



 




 



 
 
 






   




 

 
 
 







 







 








 







 







 







 







 







 









 









 




















 




















 




















 




















 













 




   

   

   








 
#line 17009 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"

typedef volatile unsigned char  vu8;
typedef volatile unsigned long  vu32;
typedef volatile unsigned short vu16;




#line 17023 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"

#line 17030 "..\\..\\..\\Library\\Device\\Nuvoton\\M451Series\\Include\\M451Series.h"

   







 



#line 20 "..\\lcd_driver\\VKL076_I2C.h"
 
 
 
 




































































 
void VKL076_Init(void);
void VKL076_DisAll(unsigned char dat);
void VKL076_DisDotOn(unsigned char seg,unsigned char com);
void VKL076_DisDotOff(unsigned char seg,unsigned char com);
unsigned char VKL076_Enter_PowerOff(void);
unsigned char VKL076_Exit_PowerOff(void);

void VKL076_Main(void);


 
#line 15 "..\\lcd_driver\\VKL076_I2C.c"
  
 
 
 
 
 
unsigned char VKL076_dispram[10];
unsigned char VKL076_readbuf[10];
unsigned char VKL076_segi,VKL076_comi;
unsigned char VKL076_segtab[19]={
	9,															
	10,11,12,13,14,15,16,17,18,19,	
	20,21,22,23,24,25,26,27,				
};
 
void VKL076_I2C_Cmd(unsigned char* cmdbuf,unsigned char cnt);
void VKL076_I2C_WRDat(unsigned char Addr,unsigned char *Databuf,unsigned char cnt);
void VKL076_I2C_RDDat(unsigned char Addr,unsigned char *Databuf,unsigned char cnt);
unsigned char VKL076_InitSequence(void);
 






 
void Delay_nuS(unsigned int n)	   
{
	unsigned char i;
	while(n--)
	{
		i=10;
		while(i--)
		{
			__nop();
		}
	}
}






 
void Delay_nmS(unsigned long int n)
{
	while(n--)
	{
		Delay_nuS(1000);
	}
}






 
void  WriteCmdVKL076(unsigned char cmd)
{
	VKL076_I2C_Cmd(&cmd,1);
}








 
void  WritenDataVKL076(unsigned char Addr,unsigned char *Databuf,unsigned char cnt)
{
	VKL076_I2C_WRDat(Addr,Databuf,cnt);
}









 
unsigned char  ReadnDataVKL076(unsigned char Addr,unsigned char *Databuf,unsigned char Cnt)
{
	VKL076_I2C_RDDat(Addr,Databuf,Cnt);
	return 0;
}







 
void VKL076_DisAll(unsigned char dat)
{
	unsigned char segi;
	
	for(segi=0;segi<16;segi++)
	{
		VKL076_dispram[segi]=dat;
	}
	WritenDataVKL076(0,VKL076_dispram,16);	
}







 
void VKL076_DisDotOn(unsigned char seg,unsigned char com)
{
	unsigned char addrbyte,addrbit,tempdat;
	
	
	addrbyte=seg/2*2;
	if((seg%2)==0)
		addrbit=(1<<com);
	else
		addrbit=(1<<(4+com));
	tempdat=VKL076_dispram[seg/2]|addrbit;
	VKL076_dispram[seg/2]=tempdat;
	WritenDataVKL076(addrbyte,&tempdat,1);		
}







 
void VKL076_DisDotOff(unsigned char seg,unsigned char com)
{
	unsigned char addrbyte,addrbit,tempdat;
	
	
	addrbyte=seg/2*2;
	if((seg%2)==0)
		addrbit=(1<<com);
	else
		addrbit=(1<<(4+com));
	tempdat=VKL076_dispram[seg/2]&(~addrbit);
	VKL076_dispram[seg/2]=tempdat;
	WritenDataVKL076(addrbyte,&tempdat,1);		
}






 
unsigned char VKL076_Enter_PowerOff(void)
{		
	WriteCmdVKL076(0xC0);	
	return 0;
}






 
unsigned char VKL076_Exit_PowerOff(void)
{	
	unsigned char errorflag; 
	
	
	errorflag=VKL076_InitSequence();
	
  return(errorflag);
}






 
unsigned char VKL076_InitSequence(void)
{			
	unsigned char  cmdbuf[3];
  
	
  Delay_nuS(100);       
	

	
	cmdbuf[0]=0xEA;
	
	
	cmdbuf[1]=(0xB8|0x00|0x04);  
	
  
	cmdbuf[2]=(0xC0|0xC8);		
	
	VKL076_I2C_Cmd(cmdbuf,3);
		
  return  0; 
}






 
void VKL076_Lowlevel_Init(void)
{
	
	
	GPIO_SetMode(((GPIO_T *) ((0x40000000UL) + 0x04040)), 0x00008000, 0x1UL);
	GPIO_SetMode(((GPIO_T *) ((0x40000000UL) + 0x04040)), 0x00000020, 0x3UL);
	
  
	(*((volatile unsigned int *)((((0x40000000UL) + 0x04800)+(0x40*(1))) + ((15)<<2)))) = 1;  
	(*((volatile unsigned int *)((((0x40000000UL) + 0x04800)+(0x40*(1))) + ((5)<<2)))) = 1; 	
}






 
void VKL076_Init(void)
{	
	
	VKL076_Lowlevel_Init();
	
	VKL076_InitSequence();
}






 
void VKL076_Main(void)
{	
	VKL076_Init();
	
	
	
	
	
	
	
	WriteCmdVKL076(0xF3); 	
	
	
	
	WriteCmdVKL076(0xFE);	
	Delay_nmS(3000);					
	
	WriteCmdVKL076(0xFD);
	Delay_nmS(1000);					
	
	
	WriteCmdVKL076(0xFC);
	WriteCmdVKL076(0xF0);	
	
	VKL076_DisAll(0x00);
	while(1)
	{		
		
		VKL076_DisAll(0xFF);			
		Delay_nmS(3000);					
		
		
		VKL076_DisAll(0x00);			
		Delay_nmS(3000);					
	
		
		VKL076_DisAll(0x55);		
		ReadnDataVKL076(0,VKL076_readbuf,16);	
		Delay_nmS(1500);					
		VKL076_DisAll(0xAA);			
		ReadnDataVKL076(0,VKL076_readbuf,16);	
		Delay_nmS(1500);					
		
		
		VKL076_DisAll(0x00);			
		VKL076_Enter_PowerOff();	
		Delay_nmS(5000);					
		VKL076_Exit_PowerOff();	
				
		
		VKL076_DisAll(0x00);			
		Delay_nmS(500);						
		for(VKL076_segi=0;VKL076_segi<19;VKL076_segi++)
		{
			for(VKL076_comi=0;VKL076_comi<4;VKL076_comi++)
			{
				VKL076_DisDotOn(VKL076_segtab[VKL076_segi],VKL076_comi);		
				Delay_nmS(300);				
				VKL076_DisDotOff(VKL076_segtab[VKL076_segi],VKL076_comi);		
			}
		}
		
		
		VKL076_DisAll(0xff);			
		Delay_nmS(500);						
		for(VKL076_segi=0;VKL076_segi<19;VKL076_segi++)
		{
			for(VKL076_comi=0;VKL076_comi<4;VKL076_comi++)
			{
				VKL076_DisDotOff(VKL076_segtab[VKL076_segi],VKL076_comi);		
				Delay_nmS(300);				
				VKL076_DisDotOn(VKL076_segtab[VKL076_segi],VKL076_comi);		
			}
		}		
		Delay_nmS(1000);					
	}
}
 

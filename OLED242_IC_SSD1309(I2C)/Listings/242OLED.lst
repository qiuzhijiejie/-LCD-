C51 COMPILER V9.60.7.0   242OLED                                                           11/29/2024 16:17:25 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE 242OLED
OBJECT MODULE PLACED IN .\Objects\242OLED.obj
COMPILER INVOKED BY: D:\KEIL_STM32\C51\BIN\C51.EXE 242OLED.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listing
                    -s\242OLED.lst) OBJECT(.\Objects\242OLED.obj)

line level    source

   1          #include "reg51.h"
   2          #include "picture.h"
   3          #include "242oled.h"
   4           unsigned char  *point1;
   5           unsigned char  *point2;
   6           unsigned char  *point3;
   7          
   8          sbit   KEY1  = P2^0;
   9          unsigned char ACK=0;
  10          unsigned char code OLED_init_cmd[25]=
  11          {
  12                 0xAE,//关闭显示
  13                  
  14                 0xD5,//设置时钟分频因子,震荡频率
  15                 0x80,  //[3:0],分频因子;[7:4],震荡频率
  16          
  17                 0xA8,//设置驱动路数
  18                 0X3F,//默认(1/64)
  19                  
  20                 0xD3,//设置显示偏移
  21                 0X00,//默认为0
  22                  
  23                 0x40,//设置显示开始行 [5:0],行数.
  24                  
  25                 0x8D,//电荷泵设置
  26                 0x10,//bit2，开启/关闭
  27                 0x20,//设置内存地址模式
  28                 0x02,//[1:0],00，列地址模式;01，行地址模式;10,页地址模式;默认10;
  29                 0xA1,//段重定义设置,bit0:0,0->0;1,0->127;  A1
  30                  
  31                 0xC8,//设置COM扫描方向;bit3:0,普通模式;1,重定义模式 COM[N-1]->COM0;N:驱动路数 (C0 翻转显示) C8
  32                     
  33                 0xDA,//设置COM硬件引脚配置
  34                 0x12,//[5:4]配置  
  35                     
  36                 0x81,//对比度设置
  37                 0xf0,//1~255;默认0X7F (亮度设置,越大越亮)
  38                     
  39                 0xD9,//设置预充电周期
  40                 0x71,//[3:0],PHASE 1;[7:4],PHASE 2;
  41                     
  42                 0xDB,//设置VCOMH 电压倍率
  43                 0x00,//[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
  44                     
  45                 0xA4,//全局显示开启;bit0:1,开启;0,关闭;(白屏/黑屏)
  46                     
  47                 0xA6,//设置显示方式;bit0:1,反相显示;0,正常显示 
  48                 
  49                 0xAF,//开启显示   
  50          
  51          
  52          
  53          
  54          };
C51 COMPILER V9.60.7.0   242OLED                                                           11/29/2024 16:17:25 PAGE 2   

  55          
  56          
  57          void delay_us(unsigned int _us_time)
  58          {       
  59   1        unsigned char x=0;
  60   1        for(;_us_time>0;_us_time--)
  61   1        {
  62   2          x++;
  63   2        }
  64   1      }
  65          
  66          void delay_ms(unsigned int _ms_time)
  67            {
  68   1          unsigned int i,j;
  69   1          for(i=0;i<_ms_time;i++)
  70   1          {
  71   2          for(j=0;j<900;j++)
  72   2            {;}
  73   2          }
  74   1        }
  75          /**************************IIC模块发送函数************************************************
  76          
  77           *************************************************************************/
  78          //写入  最后将SDA拉高，以等待从设备产生应答
  79          void IIC_write(unsigned char date)
  80          {
  81   1              unsigned char i, temp;
  82   1              temp = date;
  83   1                              
  84   1              for(i=0; i<8; i++)
  85   1              {       IIC_SCK_0;
  86   2                      if ((temp&0x80)==0)
  87   2               IIC_SDA_0;
  88   2               else IIC_SDA_1;
  89   2                      temp = temp << 1;
  90   2                                                        //最少250ns延时
  91   2                      IIC_SCK_1;
  92   2                      
  93   2              }
  94   1              IIC_SCK_0;
  95   1              
  96   1              IIC_SDA_1;
  97   1              
  98   1              IIC_SCK_1;
  99   1              
 100   1               ACK =0;
 101   1              IIC_SCK_0;
 102   1              
 103   1      
 104   1      }
 105          //启动信号
 106          //SCL在高电平期间，SDA由高电平向低电平的变化定义为启动信号
 107          void IIC_start()
 108          {
 109   1              IIC_SDA_1;
 110   1              
 111   1              IIC_SCK_1;
 112   1                                                 //所有操作结束释放SCL        
 113   1              IIC_SDA_0;
 114   1              
 115   1              IIC_SCK_0;
 116   1              
C51 COMPILER V9.60.7.0   242OLED                                                           11/29/2024 16:17:25 PAGE 3   

 117   1          IIC_write(0x78);
 118   1              
 119   1      }
 120          
 121          //停止信号
 122          //SCL在高电平期间，SDA由低电平向高电平的变化定义为停止信号
 123          void IIC_stop()
 124          {
 125   1              IIC_SDA_0;
 126   1              
 127   1              IIC_SCK_1;
 128   1              
 129   1              IIC_SDA_1;
 130   1              
 131   1      }
 132          
 133          void OLED_send_cmd(unsigned char o_command)
 134            {
 135   1          
 136   1          IIC_start();
 137   1          IIC_write(0x00); 
 138   1          IIC_write(o_command);
 139   1          IIC_stop();
 140   1          
 141   1        }
 142            
 143          void OLED_send_data(unsigned char o_data)
 144            { 
 145   1          IIC_start();
 146   1          IIC_write(0x40);
 147   1          IIC_write(o_data);
 148   1          IIC_stop();
 149   1         }
 150            
 151          void Column_set(unsigned char column)
 152            {
 153   1          column+=OLED_COLUMN_OFFSET;
 154   1          OLED_send_cmd(0x10|(column>>4));    //设置列地址高位
 155   1          OLED_send_cmd(0x00|(column&0x0f));   //设置列地址低位  
 156   1               
 157   1        }
 158            
 159          void Page_set(unsigned char page)
 160            {
 161   1          OLED_send_cmd(0xb0+page);
 162   1        }
 163            
 164          void OLED_clear(void)
 165            {
 166   1          unsigned char page,column;
 167   1          for(page=0;page<OLED_PAGE_NUMBER;page++)             //page loop
 168   1            { 
 169   2                Page_set(page);
 170   2                Column_set(0);          
 171   2                for(column=0;column<OLED_COLUMN_NUMBER;column++)      //column loop
 172   2                  {
 173   3                    OLED_send_data(0x00);
 174   3                  }
 175   2            }
 176   1        }
 177          
 178              
C51 COMPILER V9.60.7.0   242OLED                                                           11/29/2024 16:17:25 PAGE 4   

 179           void OLED_fullROW(unsigned char Data)
 180          {
 181   1          unsigned char page,column;
 182   1          for(page=0;page<OLED_PAGE_NUMBER;page++)             //page loop
 183   1            { 
 184   2              Page_set(page);
 185   2              Column_set(0);    
 186   2              for(column=0;column<OLED_COLUMN_NUMBER;column++)        //column loop
 187   2                {
 188   3                  OLED_send_data(Data);
 189   3                }
 190   2            }
 191   1        } 
 192            
 193            
 194           void OLED_full(void)
 195          {
 196   1          unsigned char page,column;
 197   1          for(page=0;page<OLED_PAGE_NUMBER;page++)             //page loop
 198   1            { 
 199   2              Page_set(page);
 200   2              Column_set(0);    
 201   2              for(column=0;column<OLED_COLUMN_NUMBER;column++)        //column loop
 202   2                {
 203   3                  OLED_send_data(0xff);
 204   3                }
 205   2            }
 206   1        } 
 207          
 208          
 209          void OLED_fullCOL(unsigned char oddData, unsigned char evenData)
 210          {
 211   1          unsigned char page, column;
 212   1          for (page = 0; page < OLED_PAGE_NUMBER; page++) // page loop
 213   1          { 
 214   2              Page_set(page);
 215   2              Column_set(0);  
 216   2              for (column = 0; column < OLED_COLUMN_NUMBER; column++) // column loop
 217   2              {
 218   3                  // 判断列号是奇数还是偶数
 219   3                  if (column % 2 == 0)
 220   3                  {
 221   4                      OLED_send_data(oddData); // 偶数列灭
 222   4                  }
 223   3                  else
 224   3                  {
 225   4                      OLED_send_data(evenData); // 奇数列亮
 226   4                  }
 227   3              }
 228   2          }
 229   1      }
 230          
 231          void OLED_init(void)
 232            {
 233   1          unsigned char i;
 234   1          for(i=0;i<25;i++)
 235   1            {
 236   2              OLED_send_cmd(OLED_init_cmd[i]);
 237   2            }
 238   1        }
 239          
 240          void Picture_display(const unsigned char *ptr_pic)
C51 COMPILER V9.60.7.0   242OLED                                                           11/29/2024 16:17:25 PAGE 5   

 241            {
 242   1          unsigned char page,column;
 243   1          for(page=0;page<OLED_PAGE_NUMBER;page++)        //page loop
 244   1            { 
 245   2              Page_set(page);
 246   2              Column_set(0);    
 247   2              for(column=0;column<OLED_COLUMN_NUMBER;column++)        //column loop
 248   2                {
 249   3                  OLED_send_data(*ptr_pic++);
 250   3                }
 251   2            }
 252   1        }
 253          void Picture_ReverseDisplay(const unsigned char *ptr_pic)
 254          {
 255   1          unsigned char page,column,dis_data;
 256   1          for(page=0;page<OLED_PAGE_NUMBER;page++)        //page loop
 257   1            { 
 258   2              Page_set(page);
 259   2              Column_set(0);    
 260   2              for(column=0;column<OLED_COLUMN_NUMBER;column++)        //column loop
 261   2                {
 262   3                  dis_data=*ptr_pic++;
 263   3                  dis_data=~dis_data;
 264   3                  OLED_send_data(dis_data);
 265   3                }
 266   2            }
 267   1        }
 268          
 269          void IO_init(void)
 270          {
 271   1        P2|=0xFF;                        
 272   1        
 273   1      
 274   1      }
 275           unsigned int ReadKey1() // 按键检测函数
 276          {
 277   1          if (KEY1 == 0) 
 278   1              {  // 按键被按下
 279   2              delay_ms(1);  // 简单的去抖动处理
 280   2              if (KEY1 == 0) 
 281   2                      {  // 检查按键是否仍然按下
 282   3                  while (KEY1 == 0);  // 等待按键释放
 283   3                  return 1;  // 返回按键被按下
 284   3              }
 285   2          }
 286   1          return 0;  // 按键没有被按下
 287   1      }
 288          
 289          
 290          
 291          void display1(void)
 292          {       
 293   1                      point1= &picture_tab1[0];
 294   1                      Picture_display(point1);
 295   1                      delay_ms(1);            
 296   1                      Picture_ReverseDisplay(point1);  
 297   1                      delay_ms(1);
 298   1      }       
 299          
 300          void display2(void){    
 301   1                      point2= &picture_tab2[0];//logo
 302   1                      Picture_display(point2);
C51 COMPILER V9.60.7.0   242OLED                                                           11/29/2024 16:17:25 PAGE 6   

 303   1                      delay_ms(1);            
 304   1                      Picture_ReverseDisplay(point2);  
 305   1                      delay_ms(1);    
 306   1      }
 307          
 308          void display3(void)
 309          {
 310   1                      point3= &picture_tab3[0];
 311   1                      Picture_display(point3);
 312   1                      delay_ms(1);            
 313   1                      Picture_ReverseDisplay(point3);  
 314   1                      delay_ms(1);    
 315   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    548    ----
   CONSTANT SIZE    =     25    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     10       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

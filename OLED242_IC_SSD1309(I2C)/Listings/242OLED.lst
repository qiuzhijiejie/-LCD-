C51 COMPILER V9.60.7.0   242OLED                                                           12/11/2024 19:43:09 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE 242OLED
OBJECT MODULE PLACED IN .\Objects\242OLED.obj
COMPILER INVOKED BY: D:\KEIL_STM32\C51\BIN\C51.EXE 242OLED.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listing
                    -s\242OLED.lst) OBJECT(.\Objects\242OLED.obj)

line level    source

   1          #include "reg51.h"
   2          #include "picture.h"
   3          #include "242oled.h"
   4           unsigned char  *point1;
   5           unsigned char  *point2;
   6           unsigned char  *point3;
   7          
   8          sbit   KEY1  = P2^0;
   9          unsigned char ACK=0;
  10          unsigned char code OLED_init_cmd[25]=
  11          {
  12                 0xAE,//关闭显示
  13                 0xD5,//设置时钟分频因子,震荡频率
  14                 0x80,  //[3:0],分频因子;[7:4],震荡频率
  15                 0xA8,//设置驱动路数
  16                 0X3F,//默认(1/64)
  17                 0xD3,//设置显示偏移
  18                 0X00,//默认为0
  19                 0x40,//设置显示开始行 [5:0],行数.
  20                 0x8D,//电荷泵设置
  21                 0x10,//bit2，开启/关闭
  22                 0x20,//设置内存地址模式
  23                 0x02,//[1:0],00，列地址模式;01，行地址模式;10,页地址模式;默认10;
  24                 0xA1,//段重定义设置,bit0:0,0->0;1,0->127;  A1
  25                 0xC8,//设置COM扫描方向;bit3:0,普通模式;1,重定义模式 COM[N-1]->COM0;N:驱动路数 (C0 翻转显示) C8      
  26                 0xDA,//设置COM硬件引脚配置
  27                 0x12,//[5:4]配置            
  28                 0x81,//对比度设置
  29                 0xf0,//1~255;默认0X7F (亮度设置,越大越亮)           
  30                 0xD9,//设置预充电周期
  31                 0x71,//[3:0],PHASE 1;[7:4],PHASE 2;         
  32                 0xDB,//设置VCOMH 电压倍率
  33                 0x00,//[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;   
  34                 0xA4,//全局显示开启;bit0:1,开启;0,关闭;(白屏/黑屏)   
  35                 0xA6,//设置显示方式;bit0:1,反相显示;0,正常显示      
  36                 0xAF,//开启显示   
  37          };
  38          
  39          
  40          void delay_us(unsigned int _us_time)
  41          {       
  42   1        unsigned char x=0;
  43   1        for(;_us_time>0;_us_time--)
  44   1        {
  45   2          x++;
  46   2        }
  47   1      }
  48          
  49          void delay_ms(unsigned int _ms_time)
  50            {
  51   1          unsigned int i,j;
  52   1          for(i=0;i<_ms_time;i++)
  53   1          {
  54   2          for(j=0;j<900;j++)
C51 COMPILER V9.60.7.0   242OLED                                                           12/11/2024 19:43:09 PAGE 2   

  55   2            {;}
  56   2          }
  57   1        }
  58          
  59          //写入  最后将SDA拉高，以等待从设备产生应答
  60          void IIC_write(unsigned char date)
  61          {
  62   1              unsigned char i, temp;
  63   1              temp = date;            
  64   1              for(i=0; i<8; i++)
  65   1              {       
  66   2                      IIC_SCK_0;
  67   2                      if ((temp&0x80)==0)
  68   2                IIC_SDA_0;
  69   2               else 
  70   2                        IIC_SDA_1;
  71   2                      temp = temp << 1;       //最少250ns延时
  72   2                      IIC_SCK_1;      
  73   2              }
  74   1              IIC_SCK_0;      
  75   1              
  76   1              IIC_SDA_1;      
  77   1              IIC_SCK_1;      
  78   1               ACK =0;
  79   1              IIC_SCK_0;      
  80   1      }
  81          //启动信号
  82          //SCL在高电平期间，SDA由高电平向低电平的变化定义为启动信号
  83          void IIC_start()
  84          {
  85   1              IIC_SDA_1;
  86   1              
  87   1              IIC_SCK_1;
  88   1                                                 //所有操作结束释放SCL        
  89   1              IIC_SDA_0;
  90   1              
  91   1              IIC_SCK_0;
  92   1              
  93   1          IIC_write(0x78);
  94   1              
  95   1      }
  96          
  97          //停止信号
  98          //SCL在高电平期间，SDA由低电平向高电平的变化定义为停止信号
  99          void IIC_stop()
 100          {
 101   1              IIC_SDA_0;
 102   1              
 103   1              IIC_SCK_1;
 104   1              
 105   1              IIC_SDA_1;
 106   1              
 107   1      }
 108          
 109          void OLED_send_cmd(unsigned char o_command)
 110            {
 111   1          
 112   1          IIC_start();
 113   1          IIC_write(0x00); 
 114   1          IIC_write(o_command);
 115   1          IIC_stop();
 116   1          
C51 COMPILER V9.60.7.0   242OLED                                                           12/11/2024 19:43:09 PAGE 3   

 117   1        }
 118            
 119          void OLED_send_data(unsigned char o_data)
 120            { 
 121   1          IIC_start();
 122   1          IIC_write(0x40);
 123   1          IIC_write(o_data);
 124   1          IIC_stop();
 125   1         }
 126            
 127          void Column_set(unsigned char column)
 128            {
 129   1          column+=OLED_COLUMN_OFFSET;
 130   1          OLED_send_cmd(0x10|(column>>4));    //设置列地址高位
 131   1          OLED_send_cmd(0x00|(column&0x0f));   //设置列地址低位  
 132   1               
 133   1        }
 134            
 135          void Page_set(unsigned char page)
 136            {
 137   1          OLED_send_cmd(0xb0+page);
 138   1        }
 139            
 140          void OLED_clear(void)
 141            {
 142   1          unsigned char page,column;
 143   1          for(page=0;page<OLED_PAGE_NUMBER;page++)             //page loop
 144   1            { 
 145   2                Page_set(page);
 146   2                Column_set(0);          
 147   2                for(column=0;column<OLED_COLUMN_NUMBER;column++)      //column loop
 148   2                  {
 149   3                    OLED_send_data(0x00);
 150   3                  }
 151   2            }
 152   1        }
 153          
 154              
 155           void OLED_fullROW(unsigned char Data)
 156          {
 157   1          unsigned char page,column;
 158   1          for(page=0;page<OLED_PAGE_NUMBER;page++)             //page loop
 159   1            { 
 160   2              Page_set(page);
 161   2              Column_set(0);    
 162   2              for(column=0;column<OLED_COLUMN_NUMBER;column++)        //column loop
 163   2                {
 164   3                  OLED_send_data(Data);
 165   3                }
 166   2            }
 167   1        } 
 168            
 169            
 170           void OLED_full(void)
 171          {
 172   1          unsigned char page,column;
 173   1          for(page=0;page<OLED_PAGE_NUMBER;page++)             //page loop
 174   1            { 
 175   2              Page_set(page);
 176   2              Column_set(0);    
 177   2              for(column=0;column<OLED_COLUMN_NUMBER;column++)        //column loop
 178   2                {
C51 COMPILER V9.60.7.0   242OLED                                                           12/11/2024 19:43:09 PAGE 4   

 179   3                  OLED_send_data(0xff);
 180   3                }
 181   2            }
 182   1        } 
 183          
 184          
 185          void OLED_fullCOL(unsigned char oddData, unsigned char evenData)
 186          {
 187   1          unsigned char page, column;
 188   1          for (page = 0; page < OLED_PAGE_NUMBER; page++) // page loop
 189   1          { 
 190   2              Page_set(page);
 191   2              Column_set(0);  
 192   2              for (column = 0; column < OLED_COLUMN_NUMBER; column++) // column loop
 193   2              {
 194   3                  // 判断列号是奇数还是偶数
 195   3                  if (column % 2 == 0)
 196   3                  {
 197   4                      OLED_send_data(oddData); // 偶数列灭
 198   4                  }
 199   3                  else
 200   3                  {
 201   4                      OLED_send_data(evenData); // 奇数列亮
 202   4                  }
 203   3              }
 204   2          }
 205   1      }
 206          
 207          void OLED_init(void)
 208            {
 209   1          unsigned char i;
 210   1          for(i=0;i<25;i++)
 211   1            {
 212   2              OLED_send_cmd(OLED_init_cmd[i]);
 213   2            }
 214   1        }
 215          
 216          void Picture_display(const unsigned char *ptr_pic)
 217            {
 218   1          unsigned char page,column;
 219   1          for(page=0;page<OLED_PAGE_NUMBER;page++)        //page loop
 220   1            { 
 221   2              Page_set(page);
 222   2              Column_set(0);    
 223   2              for(column=0;column<OLED_COLUMN_NUMBER;column++)        //column loop
 224   2                {
 225   3                  OLED_send_data(*ptr_pic++);
 226   3                }
 227   2            }
 228   1        }
 229          void Picture_ReverseDisplay(const unsigned char *ptr_pic)
 230          {
 231   1          unsigned char page,column,dis_data;
 232   1          for(page=0;page<OLED_PAGE_NUMBER;page++)        //page loop
 233   1            { 
 234   2              Page_set(page);
 235   2              Column_set(0);    
 236   2              for(column=0;column<OLED_COLUMN_NUMBER;column++)        //column loop
 237   2                {
 238   3                  dis_data=*ptr_pic++;
 239   3                  dis_data=~dis_data;
 240   3                  OLED_send_data(dis_data);
C51 COMPILER V9.60.7.0   242OLED                                                           12/11/2024 19:43:09 PAGE 5   

 241   3                }
 242   2            }
 243   1        }
 244          
 245          void IO_init(void)
 246          {
 247   1        P2|=0xFF;                        
 248   1        
 249   1      
 250   1      }
 251           unsigned int ReadKey1() // 按键检测函数
 252          {
 253   1          if (KEY1 == 0) 
 254   1              {  // 按键被按下
 255   2              delay_ms(1);  // 简单的去抖动处理
 256   2              if (KEY1 == 0) 
 257   2                      {  // 检查按键是否仍然按下
 258   3                  while (KEY1 == 0);  // 等待按键释放
 259   3                  return 1;  // 返回按键被按下
 260   3              }
 261   2          }
 262   1          return 0;  // 按键没有被按下
 263   1      }
 264          
 265          
 266          
 267          void display1(void)
 268          {       
 269   1                      point1= &picture_tab1[0];
 270   1                      Picture_display(point1);
 271   1                      delay_ms(1);            
 272   1                      Picture_ReverseDisplay(point1);  
 273   1                      delay_ms(1);
 274   1      }       
 275          
 276          void display2(void){    
 277   1                      point2= &picture_tab2[0];//logo
 278   1                      Picture_display(point2);
 279   1                      delay_ms(1);            
 280   1                      Picture_ReverseDisplay(point2);  
 281   1                      delay_ms(1);    
 282   1      }
 283          
 284          void display3(void)
 285          {
 286   1                      point3= &picture_tab3[0];
 287   1                      Picture_display(point3);
 288   1                      delay_ms(1);            
 289   1                      Picture_ReverseDisplay(point3);  
 290   1                      delay_ms(1);    
 291   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    548    ----
   CONSTANT SIZE    =     25    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     10       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.

C51 COMPILER V9.60.7.0   242OLED                                                           12/11/2024 19:43:09 PAGE 6   


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

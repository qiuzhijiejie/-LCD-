C51 COMPILER V9.60.7.0   LCD2002                                                           12/11/2024 16:06:49 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE LCD2002
OBJECT MODULE PLACED IN .\Objects\lcd2002.obj
COMPILER INVOKED BY: D:\KEIL_STM32\C51\BIN\C51.EXE lcd2002.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listing
                    -s\lcd2002.lst) OBJECT(.\Objects\lcd2002.obj)

line level    source

   1          #include "LCD2002.h"
   2          #include <REGX52.H>
   3          
   4          
   5          
   6          sbit LCD_RS = P3^0; 
   7          sbit LCD_RW = P3^1;
   8          sbit LCD_EN = P3^2;
   9          sbit   KEY1  =P2^0;     
  10          
  11          unsigned int ReadKey1() // 按键检测函数
  12          {
  13   1          if (KEY1 == 0) 
  14   1              {  // 按键被按下
  15   2              Delay(1);  // 简单的去抖动处理
  16   2              if (KEY1 == 0) 
  17   2                      {  // 检查按键是否仍然按下
  18   3                  while (KEY1 == 0);  // 等待按键释放
  19   3                  return 1;  // 返回按键被按下
  20   3              }
  21   2          }
  22   1          return 0;  // 按键没有被按下
  23   1      }
  24          
  25          
  26          void  Delay(xms)        //@12.000MHz
  27          {
  28   1      while(xms--){
  29   2              unsigned char data i, j;
  30   2      
  31   2              i = 12;
  32   2              j = 169;
  33   2              do
  34   2              {
  35   3                      while (--j);
  36   3              } while (--i);
  37   2      }
  38   1              }
  39          
  40          
  41          //判断忙不忙
  42          void Busy()
  43          {
  44   1              unsigned char temp;
  45   1              LCD_DataPort=0xff;
  46   1              LCD_RS=0;//RW=1,RS=0读状态
  47   1              LCD_RW=1;
  48   1              do{
  49   2                      LCD_EN=1;
  50   2                      temp=LCD_DataPort;
  51   2                      LCD_EN=0;
  52   2              }while(temp&0x80);}/*对控制器每次进行读写操作之前， 
  53                                                    都必须进行读写检测，确保STA7为0*/
  54          
C51 COMPILER V9.60.7.0   LCD2002                                                           12/11/2024 16:06:49 PAGE 2   

  55          
  56          
  57          /**
  58            * @brief  LCD2002写命令
  59            * @param  Command 要写入的命令
  60            * @retval 无
  61            */
  62          void LCD_WriteCommand(unsigned char Command) 
  63          {
  64   1              Busy();
  65   1          LCD_RS = 0; // 选择为指令，1为数据，0为指令
  66   1          LCD_RW = 0; // 选择为写， 1为读，0为写
  67   1          LCD_DataPort = Command; // 写入指令的内容
  68   1          LCD_EN = 1;   // 使能脚E先上升沿写入
  69   1          Delay(0.1);
  70   1          LCD_EN = 0;   // 使能脚E后负跳变完成写入
  71   1      }
  72          
  73          /**
  74            * @brief  LCD2002写数据
  75            * @param  Data 要写入的数据,搭配LCD_SetCursor()光标使用。
  76            * @retval 无
  77            */
  78          void LCD_WriteData(unsigned char Data) 
  79          {
  80   1              Busy();
  81   1          LCD_RS = 1; // 选择为数据，1为数据，0为指令
  82   1          LCD_RW = 0; // 选择为写， 1为读，0为写
  83   1          LCD_DataPort = Data; // 写入指数据的内容
  84   1          LCD_EN = 1;   // 使能脚E先上升沿写入
  85   1          Delay(0.1);
  86   1          LCD_EN = 0;   // 使能脚E后负跳变完成写入
  87   1        
  88   1      }
  89          
  90          /**
  91            * @brief  LCD2002读数据
  92            * @param  Data 要写入的数据,搭配LCD_SetCursor()光标使用。
  93            * @retval 无
  94            */
  95          void LCD_ReadData(unsigned char Data) 
  96          {
  97   1              Busy();
  98   1          LCD_RS = 1; // 选择为数据，1为数据，0为指令
  99   1          LCD_RW = 1; // 选择为写， 1为读，0为写
 100   1              LCD_EN = 1;   // 使能脚E先上升沿写入
 101   1              Delay(0.1);
 102   1          LCD_DataPort = Data; // 写入指数据的内容
 103   1          LCD_EN = 0;   // 使能脚E后负跳变完成写入
 104   1      }
 105          
 106          /**
 107            * @brief  LCD2002初始化函数
 108            * @param  无
 109            * @retval 无
 110            */
 111          void LCD_Init() 
 112          {
 113   1          LCD_WriteCommand(0x38); // 设置20×4显示,5X7点阵,8位数据接口 
 114   1          LCD_WriteCommand(0x0c); // 显示开,光标关,闪烁关
 115   1      //      LCD_WriteCommand(0x0f);//显示开,光标开.闪烁开
 116   1          LCD_WriteCommand(0x06); // 当读或写一个字符后地址指针加一,不移动
C51 COMPILER V9.60.7.0   LCD2002                                                           12/11/2024 16:06:49 PAGE 3   

 117   1          LCD_WriteCommand(0x01); // 光标复位，清屏
 118   1              Delay(0.1); 
 119   1      }
 120          
 121          /**
 122            * @brief  LCD2002清屏
 123            * @param  无
 124            * @retval 无
 125            */
 126          void LCD_Clear() 
 127          {
 128   1          Busy();
 129   1          LCD_WriteCommand(0x01);
 130   1              Delay(0.1);           // 等待清屏完成
 131   1      }
 132          
 133          /**
 134            * @brief  LCD2002设置光标位置
 135            * @param  Line 行位置，范围：1~2
 136            * @param  Column 列位置，范围：1~20
 137            * @retval 无
 138            */
 139          void LCD_SetCursor(unsigned int Line, unsigned int Column) 
 140          {
 141   1          // 确保列值在0-19之间
 142   1          if (Column >= 20) Column = 0;
 143   1          // 确保行值在0-2之间
 144   1          Line &= 0x01;  // 限制 Y 位置在 0 到 3 之间         
 145   1          if (Line == 0) 
 146   1          {
 147   2              LCD_WriteCommand(0x80 | Column);  // 第一行
 148   2          } 
 149   1          else  
 150   1          {
 151   2              LCD_WriteCommand(0xC0 | Column);  // 第二行
 152   2          } 
 153   1      
 154   1      }
 155                  
 156          
 157          unsigned char LCD_Readdata(void)               //读数据子程序
 158          {   unsigned char d;
 159   1          Busy();                       //HD44780液晶显示控制器忙检测
 160   1          LCD_DataPort=0xff;
 161   1          LCD_RS=1;                             //RS=1 RW=1 E=高电平
 162   1          LCD_RW=1;
 163   1          LCD_EN=1;
 164   1          Delay(0.005);
 165   1          d=LCD_DataPort;
 166   1          LCD_EN=0;
 167   1          return d;
 168   1      }
 169          
 170          // 
 171          /**
 172           * @brief  显示字符函数
 173           * @param  Line0-3行 Column 0-19列 i字符
 174           * @retval
 175           */
 176          void LCD_USER_ShowString(unsigned char Line, unsigned char Column, unsigned char  i) 
 177          {                       
 178   1              LCD_SetCursor(Line, Column); // 光标
C51 COMPILER V9.60.7.0   LCD2002                                                           12/11/2024 16:06:49 PAGE 4   

 179   1              LCD_WriteData(i);
 180   1      }
 181          
 182          
 183          /**
 184           * @brief LCD2002显示字符串
 185           * @param Line 0-2行 Column 0-19列 *String 输入字符""
 186           * @retval 无
 187           */
 188          void LCD_ShowString(unsigned char Line, unsigned char Column, char *String) 
 189          {       unsigned char i;                
 190   1              LCD_SetCursor(Line, Column);
 191   1          for (i = 0; String[i] != '\0'; i++) 
 192   1              {
 193   2            LCD_WriteData(String[i]);
 194   2          }
 195   1      }
 196          
 197          
 198          //每次写入的字符 a 是递增的
 199          void write_CGROM(unsigned char a)
 200          {
 201   1          unsigned char j;
 202   1          LCD_WriteCommand(0x02);  // 光标归位命令 (光标位置回到初始位置，通常是DDRAM的起始地址)
 203   1          Delay(1);                // 延时一段时间，确保命令有效
 204   1          LCD_WriteCommand(0x80);  // 设置光标到第1行的起始地址 (0x80对应DDRAM的第1行起始地址)
 205   1          
 206   1          // 向第1行写入40个字符数据
 207   1          for (j = 0; j < 40; j++) 
 208   1          {
 209   2              LCD_WriteData(a);    // 向LCD写入数据 'a'
 210   2              a += 1;              // 自增'a'，以便下一个字符是'a'的下一个值
 211   2          }
 212   1      
 213   1          LCD_WriteCommand(0xC0);  // 设置光标到第2行的起始地址 (0xC0对应DDRAM的第2行起始地址)
 214   1          
 215   1          // 向第2行写入40个字符数据
 216   1          for (j = 1; j < 40; j++) 
 217   1          {
 218   2              LCD_WriteData(a);    // 向LCD写入数据 'a'
 219   2              a += 1;              // 自增'a'，同样依次写入下一个字符
 220   2          }
 221   1          
 222   1          Delay(1);                // 再次延时，确保数据全部写入
 223   1      }
 224          
 225          /**
 226           * @brief  全屏显示HD44780 内置字符
 227           * @param  Line 0-3  Column 0-19  输入16进制0X...
 228           * @retval 无
 229           */
 230          void Write_DDRAM(unsigned char a)
 231          {
 232   1          unsigned char j;
 233   1          
 234   1          LCD_WriteCommand(0x02);  // 光标归位命令 (光标位置回到初始位置，通常是DDRAM的起始地址)
 235   1          Delay(1);               // 延时10个单位 (比之前的延时长)
 236   1      
 237   1          LCD_WriteCommand(0x80);  // 设置光标到第1行的起始地址 (0x80对应DDRAM的第1行起始地址)
 238   1          
 239   1          // 向第1行写入20个相同的字符   
 240   1          for (j = 0; j < 20; j++) 
C51 COMPILER V9.60.7.0   LCD2002                                                           12/11/2024 16:06:49 PAGE 5   

 241   1          {
 242   2              LCD_WriteData(a);    // 将字符 'a' 写入 LCD 显示数据存储器
 243   2          }
 244   1      
 245   1          LCD_WriteCommand(0xC0);  // 设置光标到第2行的起始地址 (0xC0对应DDRAM的第2行起始地址)
 246   1          
 247   1          // 向第2行写入20个相同的字符
 248   1          for (j = 0; j < 20; j++) 
 249   1          {
 250   2              LCD_WriteData(a);    // 将字符 'a' 写入 LCD 显示数据存储器
 251   2          }  
 252   1          Delay(1);                // 延时，确保数据完全写入
 253   1      }
 254          
 255          
 256          // 向 LCD 的 CGRAM 写入自定义字符数据
 257          void Write_CGRAM(unsigned char a[])
 258          {
 259   1          unsigned char k;
 260   1          
 261   1          // 发送命令 0x40，选择 CGRAM 地址
 262   1          LCD_WriteCommand(0x40); 
 263   1          
 264   1          // 将自定义字符数据写入 CGRAM
 265   1          for(k = 0; k < 64; k++)
 266   1          {
 267   2              LCD_WriteData(a[k]);  // 写入字符数据
 268   2          }
 269   1      }
 270          
 271          
 272          void displayCustomCharacter1(const unsigned char pattern[8]) 
 273          {
 274   1          unsigned char row, col;
 275   1      
 276   1          // 将自定义字符数组写入CGRAM
 277   1          Write_CGRAM(pattern);
 278   1      
 279   1          // 遍历LCD的每一行和每一列，显示自定义字符
 280   1          for (row = 0; row < 2; row++) 
 281   1          {
 282   2              for (col = 0; col < 20; col++) 
 283   2              {
 284   3                  // 针对LCD2002的行起始地址做出修正
 285   3                  unsigned char position;
 286   3                  if (row == 0) 
 287   3                                      {
 288   4                      position = 0x80 + col;   // 第1行地址 0x80 起始
 289   4                                      } else //if (row == 1) {
 290   3                      position = 0xC0 + col;   // 第2行地址 0xC0 起始
 291   3      
 292   3                  // 设置光标位置并显示自定义字符
 293   3                  LCD_WriteCommand(position);
 294   3                  LCD_WriteData(0x00);  // 显示存储在CGRAM中的第一个自定义字符
 295   3              }
 296   2          }
 297   1      }
 298          
 299          unsigned char data pattern1[8] = {0x15, 0x0A, 0x15, 0x0A, 0x15, 0x0A, 0x15}; 
 300          unsigned char data pattern2[8] = {0x0A, 0x15, 0x0A, 0x15, 0x0A, 0x15, 0x0A};    
 301          unsigned char data pattern3[8] = {0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15}; 
 302          unsigned char data pattern4[8] = {0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A}; 
C51 COMPILER V9.60.7.0   LCD2002                                                           12/11/2024 16:06:49 PAGE 6   

 303          unsigned char data pattern5[8] = {0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00}; 
 304          unsigned char data pattern6[8] = {0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F};      
 305          unsigned char data pattern7[8] = {0x00, 0x15, 0x00, 0x15, 0x00, 0x15, 0x00, 0x15}; 
 306          void HandleKey() 
 307          {
 308   1              unsigned char mode;
 309   1              
 310   1                      if (ReadKey1()) 
 311   1                {  
 312   2                      LCD_Clear();
 313   2                      mode++;
 314   2                      mode %= 10;                     
 315   2                      switch (mode) 
 316   2                {
 317   3              case 0:            
 318   3                              displayCustomCharacter1(pattern1); 
 319   3                  break;
 320   3              case 1:
 321   3                  displayCustomCharacter1(pattern2);  
 322   3                  break;
 323   3              case 2:
 324   3                  displayCustomCharacter1(pattern3); 
 325   3                  break;
 326   3              case 3:
 327   3                 displayCustomCharacter1(pattern4);  
 328   3                  break;
 329   3              case 4:
 330   3                  displayCustomCharacter1(pattern5);  
 331   3                  break;
 332   3              case 5:
 333   3                  displayCustomCharacter1(pattern6);  
 334   3                  break;
 335   3                      case 6:
 336   3                              displayCustomCharacter1(pattern7);
 337   3                              break;
 338   3                      case 7:
 339   3                              write_CGROM(0x21); 
 340   3                         break;
 341   3                      case 8:
 342   3                              write_CGROM(0xA1); 
 343   3                         break;
 344   3                      case 9:
 345   3                              Write_DDRAM(0xFF); 
 346   3                         break;  
 347   3                      }
 348   2              }
 349   1      }
 350          
 351          void DisplayPatterns() 
 352          {
 353   1          static int step = 0; // 当前显示图案步骤
 354   1          switch (step) 
 355   1          {
 356   2              case 0: displayCustomCharacter1(pattern1);  Delay(80); break;
 357   2              case 1: displayCustomCharacter1(pattern2);  Delay(80); break;
 358   2              case 2: displayCustomCharacter1(pattern3);  Delay(80); break;
 359   2              case 3: displayCustomCharacter1(pattern4);  Delay(80); break;
 360   2              case 4: displayCustomCharacter1(pattern5);  Delay(80); break;
 361   2              case 5: displayCustomCharacter1(pattern6);  Delay(80); break;
 362   2              case 6: displayCustomCharacter1(pattern7);  Delay(80); break;
 363   2              case 7: write_CGROM(0x21); Delay(80); break;
 364   2              case 8: Write_DDRAM(0xCE); Delay(80); break;
C51 COMPILER V9.60.7.0   LCD2002                                                           12/11/2024 16:06:49 PAGE 7   

 365   2              case 9: LCD_Clear();LCD_ShowString(1,6,"LCM2002_4");LCD_ShowString(0,2,"YeHuiDisplay.com");Delay(8
             -0); break;
 366   2          }
 367   1          step++;
 368   1          if (step > 9) step = 0; // 循环
 369   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    775    ----
   CONSTANT SIZE    =     27    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     58      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

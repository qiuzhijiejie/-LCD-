C51 COMPILER V9.60.7.0   LCD0801A                                                          12/11/2024 09:36:24 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE LCD0801A
OBJECT MODULE PLACED IN .\Objects\lcd0801A.obj
COMPILER INVOKED BY: D:\KEIL_STM32\C51\BIN\C51.EXE lcd0801A.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listin
                    -gs\lcd0801A.lst) OBJECT(.\Objects\lcd0801A.obj)

line level    source

   1          #include "LCD0801a.h"
   2          #include <REGX52.H>
   3          
   4          sbit LCD_RS = P3^0; 
   5          sbit LCD_RW = P3^1;
   6          sbit LCD_EN = P3^2;
   7          sbit   KEY1  =P2^0;     
   8          
   9          unsigned char mode;
  10          
  11          unsigned int ReadKey1() // 按键检测函数
  12          {
  13   1          if (KEY1 == 0) 
  14   1              {  // 按键被按下
  15   2              Delay(5);  // 简单的去抖动处理
  16   2              if (KEY1 == 0) 
  17   2                      {  // 检查按键是否仍然按下
  18   3                  while (KEY1 == 0);  // 等待按键释放
  19   3                  return 1;  // 返回按键被按下
  20   3              }
  21   2          }
  22   1          return 0;  // 按键没有被按下
  23   1      }
  24          
  25          
  26          
  27          
  28          
  29          void  Delay(xms)        //@12.000MHz
  30          {
  31   1      while(xms--){
  32   2              unsigned char data i, j;
  33   2      
  34   2              i = 12;
  35   2              j = 169;
  36   2              do
  37   2              {
  38   3                      while (--j);
  39   3              } while (--i);
  40   2      }
  41   1              }
  42          
  43          
  44          //判断忙不忙
  45          void Busy()
  46          {
  47   1              unsigned char temp;
  48   1              LCD_DataPort=0xff;
  49   1              LCD_RS=0;//RW=1,RS=0读状态
  50   1              LCD_RW=1;
  51   1              do{
  52   2                      LCD_EN=1;
  53   2                      temp=LCD_DataPort;
  54   2                      LCD_EN=0;
C51 COMPILER V9.60.7.0   LCD0801A                                                          12/11/2024 09:36:24 PAGE 2   

  55   2              }while(temp&0x80);}/*对控制器每次进行读写操作之前， 
  56                                                    都必须进行读写检测，确保STA7为0*/
  57          
  58          
  59          
  60          /**
  61            * @brief  LCD0801A写命令
  62            * @param  Command 要写入的命令
  63            * @retval 无
  64            */
  65          void LCD_WriteCommand(unsigned char Command) 
  66          {
  67   1              Busy();
  68   1          LCD_RS = 0; // 选择为指令，1为数据，0为指令
  69   1          LCD_RW = 0; // 选择为写， 1为读，0为写
  70   1          LCD_DataPort = Command; // 写入指令的内容
  71   1          LCD_EN = 1;   // 使能脚E先上升沿写入
  72   1          Delay(0.1);
  73   1          LCD_EN = 0;   // 使能脚E后负跳变完成写入
  74   1      }
  75          
  76          
  77          
  78          /**
  79            * @brief  LCD0801A写数据
  80            * @param  Data 要写入的数据,搭配LCD_SetCursor()光标使用。
  81            * @retval 无
  82            */
  83          void LCD_WriteData(unsigned char Data) 
  84          {
  85   1              Busy();
  86   1          LCD_RS = 1; // 选择为数据，1为数据，0为指令
  87   1          LCD_RW = 0; // 选择为写， 1为读，0为写
  88   1          LCD_DataPort = Data; // 写入指数据的内容
  89   1          LCD_EN = 1;   // 使能脚E先上升沿写入
  90   1          Delay(0.1);
  91   1          LCD_EN = 0;   // 使能脚E后负跳变完成写入
  92   1        
  93   1      }
  94          
  95          
  96          /**
  97            * @brief  LCD0801A读数据
  98            * @param  Data 要写入的数据,搭配LCD_SetCursor()光标使用。
  99            * @retval 无
 100            */
 101          void LCD_ReadData(unsigned char Data) 
 102          {
 103   1              Busy();
 104   1          LCD_RS = 1; // 选择为数据，1为数据，0为指令
 105   1          LCD_RW = 1; // 选择为写， 1为读，0为写
 106   1              LCD_EN = 1;   // 使能脚E先上升沿写入
 107   1              Delay(0.1);
 108   1          LCD_DataPort = Data; // 写入指数据的内容
 109   1          LCD_EN = 0;   // 使能脚E后负跳变完成写入
 110   1      }
 111          
 112          
 113          
 114          /**
 115            * @brief  LCD0801A初始化函数
 116            * @param  无
C51 COMPILER V9.60.7.0   LCD0801A                                                          12/11/2024 09:36:24 PAGE 3   

 117            * @retval 无
 118            */
 119          void LCD_Init() 
 120          {
 121   1          LCD_WriteCommand(0x38); // 设置20×4显示,5X7点阵,8位数据接口 
 122   1          LCD_WriteCommand(0x0c); // 显示开,光标关,闪烁关
 123   1      //      LCD_WriteCommand(0x0f);//显示开,光标开.闪烁开
 124   1          LCD_WriteCommand(0x06); // 当读或写一个字符后地址指针加一,不移动
 125   1          LCD_WriteCommand(0x01); // 光标复位，清屏
 126   1              Delay(0.1); 
 127   1              
 128   1      
 129   1      
 130   1      
 131   1      }
 132          
 133          /**
 134            * @brief  LCD0801A清屏
 135            * @param  无
 136            * @retval 无
 137            */
 138          void LCD_Clear() 
 139          {
 140   1          Busy();
 141   1          LCD_WriteCommand(0x01);
 142   1              Delay(0.1);           // 等待清屏完成
 143   1      }
 144          
 145          
 146          /**
 147            * @brief  LCD0801A设置光标位置
 148            * @param  Line 行位置，范围：1~2
 149            * @param  Column 列位置，范围：1~20
 150            * @retval 无
 151            */
 152          void LCD_SetCursor(unsigned int Line, unsigned int Column) 
 153          {
 154   1          // 确保列值在0-19之间
 155   1          if (Column >= 20) Column = 0;
 156   1          // 确保行值在0-2之间
 157   1          Line &= 0x01;  // 限制 Y 位置在 0 到 3 之间         
 158   1          if (Line == 0) 
 159   1          {
 160   2              LCD_WriteCommand(0x80 | Column);  // 第一行
 161   2          } 
 162   1          else  
 163   1          {
 164   2              LCD_WriteCommand(0xC0 | Column);  // 第二行
 165   2          } 
 166   1      
 167   1      }
 168                  
 169           
 170          
 171          
 172          unsigned char LCD_Readdata(void)               //读数据子程序
 173          {   unsigned char d;
 174   1          Busy();                       //HD44780液晶显示控制器忙检测
 175   1          LCD_DataPort=0xff;
 176   1          LCD_RS=1;                             //RS=1 RW=1 E=高电平
 177   1          LCD_RW=1;
 178   1          LCD_EN=1;
C51 COMPILER V9.60.7.0   LCD0801A                                                          12/11/2024 09:36:24 PAGE 4   

 179   1          Delay(0.005);
 180   1          d=LCD_DataPort;
 181   1          LCD_EN=0;
 182   1          return d;
 183   1      }
 184          
 185          
 186          
 187          // 
 188          /**
 189           * @brief  显示字符函数
 190           * @param  Line0-3行 Column 0-19列 i字符
 191           * @retval
 192           */
 193          void LCD_USER_ShowString(unsigned char Line, unsigned char Column, unsigned char  i) 
 194          {                       
 195   1              LCD_SetCursor(Line, Column); // 光标
 196   1              LCD_WriteData(i);
 197   1      }
 198          
 199          
 200          
 201          /**
 202           * @brief LCD0801A显示字符串
 203           * @param Line 0-2行 Column 0-19列 *String 输入字符""
 204           * @retval 无
 205           */
 206          void LCD_ShowString(unsigned char Line, unsigned char Column, char *String) 
 207          {       unsigned char i;                
 208   1              LCD_SetCursor(Line, Column);
 209   1          for (i = 0; String[i] != '\0'; i++) 
 210   1              {
 211   2            LCD_WriteData(String[i]);
 212   2          }
 213   1      }
 214          
 215          
 216          //每次写入的字符 a 是递增的
 217          void write_CGROM(unsigned char a)
 218          {
 219   1          unsigned char j;
 220   1          LCD_WriteCommand(0x02);  // 光标归位命令 (光标位置回到初始位置，通常是DDRAM的起始地址)
 221   1          Delay(1);                // 延时一段时间，确保命令有效
 222   1          LCD_WriteCommand(0x80);  // 设置光标到第1行的起始地址 (0x80对应DDRAM的第1行起始地址)
 223   1          
 224   1          // 向第1行写入40个字符数据
 225   1          for (j = 0; j < 40; j++) 
 226   1          {
 227   2              LCD_WriteData(a);    // 向LCD写入数据 'a'
 228   2              a += 1;              // 自增'a'，以便下一个字符是'a'的下一个值
 229   2          }
 230   1      
 231   1          LCD_WriteCommand(0xC0);  // 设置光标到第2行的起始地址 (0xC0对应DDRAM的第2行起始地址)
 232   1          
 233   1          // 向第2行写入40个字符数据
 234   1          for (j = 0; j < 40; j++) 
 235   1          {
 236   2              LCD_WriteData(a);    // 向LCD写入数据 'a'
 237   2              a += 1;              // 自增'a'，同样依次写入下一个字符
 238   2          }
 239   1          
 240   1          Delay(1);                // 再次延时，确保数据全部写入
C51 COMPILER V9.60.7.0   LCD0801A                                                          12/11/2024 09:36:24 PAGE 5   

 241   1      }
 242          
 243          
 244          
 245          /**
 246           * @brief  全屏显示HD44780 内置字符
 247           * @param  Line 0-3  Column 0-19  输入16进制0X...
 248           * @retval 无
 249           */
 250          void Write_DDRAM(unsigned char a)
 251          {
 252   1          unsigned char j;
 253   1          
 254   1          LCD_WriteCommand(0x02);  // 光标归位命令 (光标位置回到初始位置，通常是DDRAM的起始地址)
 255   1          Delay(1);               // 延时10个单位 (比之前的延时长)
 256   1      
 257   1          LCD_WriteCommand(0x80);  // 设置光标到第1行的起始地址 (0x80对应DDRAM的第1行起始地址)
 258   1          
 259   1          // 向第1行写入20个相同的字符   
 260   1          for (j = 0; j < 20; j++) 
 261   1          {
 262   2              LCD_WriteData(a);    // 将字符 'a' 写入 LCD 显示数据存储器
 263   2          }
 264   1      
 265   1          LCD_WriteCommand(0xC0);  // 设置光标到第2行的起始地址 (0xC0对应DDRAM的第2行起始地址)
 266   1          
 267   1          // 向第2行写入20个相同的字符
 268   1          for (j = 0; j < 20; j++) 
 269   1          {
 270   2              LCD_WriteData(a);    // 将字符 'a' 写入 LCD 显示数据存储器
 271   2          }  
 272   1          Delay(1);                // 延时，确保数据完全写入
 273   1      }
 274          
 275          
 276          
 277          // 向 LCD 的 CGRAM 写入自定义字符数据
 278          void Write_CGRAM(unsigned char a[])
 279          {
 280   1          unsigned char k;
 281   1          
 282   1          // 发送命令 0x40，选择 CGRAM 地址
 283   1          LCD_WriteCommand(0x40); 
 284   1          
 285   1          // 将自定义字符数据写入 CGRAM
 286   1          for(k = 0; k < 64; k++)
 287   1          {
 288   2              LCD_WriteData(a[k]);  // 写入字符数据
 289   2          }
 290   1      }
 291          
 292             
 293          
 294          void displayCustomCharacter1(const unsigned char pattern[8]) 
 295          {
 296   1          unsigned char row, col;
 297   1      
 298   1          // 将自定义字符数组写入CGRAM
 299   1          Write_CGRAM(pattern);
 300   1      
 301   1          // 遍历LCD的每一行和每一列，显示自定义字符
 302   1          for (row = 0; row < 2; row++) 
C51 COMPILER V9.60.7.0   LCD0801A                                                          12/11/2024 09:36:24 PAGE 6   

 303   1          {
 304   2              for (col = 0; col < 20; col++) 
 305   2              {
 306   3                  // 针对LCD0801A的行起始地址做出修正
 307   3                  unsigned char position;
 308   3                  if (row == 0) 
 309   3                                      {
 310   4                      position = 0x80 + col;   // 第1行地址 0x80 起始
 311   4                                      } else //if (row == 1) {
 312   3                      position = 0xC0 + col;   // 第2行地址 0xC0 起始
 313   3      
 314   3                  // 设置光标位置并显示自定义字符
 315   3                  LCD_WriteCommand(position);
 316   3                  LCD_WriteData(0x00);  // 显示存储在CGRAM中的第一个自定义字符
 317   3              }
 318   2          }
 319   1      }
 320          
 321          unsigned char data pattern1[8] = {0x15, 0x0A, 0x15, 0x0A, 0x15, 0x0A, 0x15}; // 棋盘
 322          unsigned char data pattern2[8] = {0x0A, 0x15, 0x0A, 0x15, 0x0A, 0x15, 0x0A};    
 323          unsigned char data pattern3[8] = {0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15}; //竖线
 324          unsigned char data pattern4[8] = {0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A}; 
 325          unsigned char data pattern5[8] = {0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00};//横线 
 326          unsigned char data pattern6[8] = {0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F};      
 327          unsigned char data pattern7[8] = {0x00, 0x15, 0x00, 0x15, 0x00, 0x15, 0x00, 0x15}; //麻点
 328          
 329          void HandleKey() 
 330          {
 331   1                      if (ReadKey1()) 
 332   1                {  
 333   2                      LCD_Clear();
 334   2                      mode++;
 335   2                      mode %= 9;                      
 336   2                      switch (mode) 
 337   2                {
 338   3              case 0:            
 339   3                              displayCustomCharacter1(pattern1); 
 340   3                  break;
 341   3              case 1:
 342   3                  displayCustomCharacter1(pattern2);  
 343   3                  break;
 344   3              case 2:
 345   3                  displayCustomCharacter1(pattern3); 
 346   3                  break;
 347   3              case 3:
 348   3                 displayCustomCharacter1(pattern4);  
 349   3                  break;
 350   3              case 4:
 351   3                  displayCustomCharacter1(pattern5);  
 352   3                  break;
 353   3              case 5:
 354   3                  displayCustomCharacter1(pattern6);  
 355   3                  break;
 356   3                      case 6:
 357   3                              displayCustomCharacter1(pattern7);
 358   3                              break;
 359   3                      case 7:
 360   3                              LCD_ShowString(0,0,"LCM0801A");
 361   3                         break;
 362   3                      case 8:
 363   3                              LCD_ShowString(0,0,"YeHuiDis"); 
 364   3                         break;  
C51 COMPILER V9.60.7.0   LCD0801A                                                          12/11/2024 09:36:24 PAGE 7   

 365   3                      }
 366   2              }
 367   1      }
 368          void DisplayPatterns() 
 369          {
 370   1          static int step = 0; // 当前显示图案步骤
 371   1      
 372   1          switch (step) 
 373   1          {
 374   2              case 0: displayCustomCharacter1(pattern1);  Delay(80); break;
 375   2              case 1: displayCustomCharacter1(pattern2);  Delay(80); break;
 376   2              case 2: displayCustomCharacter1(pattern3);  Delay(80); break;
 377   2              case 3: displayCustomCharacter1(pattern4);  Delay(80); break;
 378   2              case 4: displayCustomCharacter1(pattern5);  Delay(80); break;
 379   2              case 5: displayCustomCharacter1(pattern6);  Delay(80); break;
 380   2              case 6: displayCustomCharacter1(pattern7);  Delay(80); break;
 381   2              case 7: write_CGROM(0x21); Delay(80); break;
 382   2              case 8: Write_DDRAM(0xCE); Delay(80); break;
 383   2              case 9: LCD_ShowString(0,0,"LCM0801A");Delay(80); break;
 384   2                      case 10:LCD_ShowString(0,0,"YeHuiDis");Delay(80); break;
 385   2      
 386   2          }
 387   1      
 388   1          step++;
 389   1          if (step > 10) step = 0; // 循环
 390   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    773    ----
   CONSTANT SIZE    =     18    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     59       9
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

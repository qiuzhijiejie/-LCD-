C51 COMPILER V9.60.7.0   LCD240128                                                         11/01/2024 13:56:07 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE LCD240128
OBJECT MODULE PLACED IN .\Objects\lcd240128.obj
COMPILER INVOKED BY: D:\KEIL_STM32\C51\BIN\C51.EXE lcd240128.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listi
                    -ngs\lcd240128.lst) OBJECT(.\Objects\lcd240128.obj)

line level    source

   1          #include <REG52.H>   
   2          #include <INTRINS.H>    
   3          #include <STDIO.H>     
   4          #include <MATH.H>    
   5          #include <ABSACC.H>   
   6          #include "lcd240128.h"
   7          #include "picture.h"
   8          
   9          #define DataBus         P1
  10          #define uchar    unsigned char  
  11          #define uint     unsigned int 
  12          #define Graphic         1
  13          #define Character       0
  14          #define CMD_FONT_SELECT 0x70  // 字库选择命令
  15          #define LCM_PORT P1
  16          
  17          
  18          sbit LCD_CD=P3^0;
  19          sbit LCD_Reset=P3^4;
  20          sbit LCD_FS=P3^5;
  21          sbit LCD_WR=P3^1;
  22          sbit LCD_RD=P3^2;
  23          sbit LCD_EN=P3^3;
  24          sbit LCD_KEY=P2^0;
  25          
  26          uchar start_x[] = {42, 41, 43};  // 每组显示的起始X坐标
  27          uchar start_y[] = {20, 50, 80};  // 每组显示的起始Y坐标
  28          uchar start_code[] = {0, 16, 34};  // 每组显示的起始字符编码
  29          uchar count[] = {16, 18, 12};  // 每组显示的字符数量
  30          uchar  group,i;
  31          
  32          void Delay(uint MS)   
  33          {   
  34   1       unsigned char us,usn;   
  35   1       while(MS!=0)   
  36   1       {   
  37   2        usn = 2; //for 12M    
  38   2        while(usn!=0)   
  39   2        {   
  40   3         us=0xf6;   
  41   3         while (us!=0){us--;};   
  42   3         usn--;   
  43   3        }   
  44   2        MS--;   
  45   2       }  
  46   1      }
  47          
  48          uint ReadKey1() // 按键检测函数
  49          {
  50   1          if (LCD_KEY == 1)           
  51   1              {  // 按键被按下
  52   2              Delay(1);  // 简单的去抖动处理
  53   2              if (LCD_KEY == 1) 
  54   2                      {  // 检查按键是否仍然按下
C51 COMPILER V9.60.7.0   LCD240128                                                         11/01/2024 13:56:07 PAGE 2   

  55   3                  while (LCD_KEY == 1);  // 等待按键释放
  56   3                  return 1;  // 返回按键被按下
  57   3              }
  58   2          }
  59   1          return 0;  // 按键没有被按下
  60   1      }
  61          
  62          //忙信号判断
  63          void CheckBusy()
  64          {uchar b;
  65   1               do     
  66   1              {
  67   2                      DataBus=0xff;
  68   2                       LCD_CD=1;
  69   2                       LCD_RD=0;
  70   2                       b=DataBus;
  71   2                       LCD_RD=1;      
  72   2               }
  73   1               while(b&0x03!=0x03);//Table 6-4 Note1/2
  74   1                      
  75   1       }
  76          
  77          //自动读忙碌判断 
  78          void AUTOREAD_CheckBusy()
  79          {
  80   1       uchar b;
  81   1       do     
  82   1       {
  83   2               DataBus=0xff;
  84   2               LCD_CD=1;
  85   2               LCD_RD=0;
  86   2               b=DataBus;
  87   2               LCD_RD=1;      
  88   2       }
  89   1               while(b&0x03==0);//Table 6-4 Note3
  90   1      }
  91          //自动写忙碌判断 
  92          void AUTOWRITE_CheckBus()
  93          {
  94   1              uchar b;
  95   1               do     
  96   1              {
  97   2                       DataBus=0xff;
  98   2                       LCD_CD=1;
  99   2                       LCD_RD=0;
 100   2                       b=DataBus;
 101   2                       LCD_RD=1;      
 102   2               }
 103   1               while(b&0x08!=0x08);
 104   1      } 
 105          
 106          //写数据
 107          void WriteData( uchar Data_Byte )   //Table 5-1 
 108          {    
 109   1               LCD_CD = 0;   
 110   1               DataBus = Data_Byte;   
 111   1               LCD_WR = 0;  
 112   1               _nop_();    
 113   1               LCD_WR  = 1;   
 114   1      }   
 115          
 116          /*
C51 COMPILER V9.60.7.0   LCD240128                                                         11/01/2024 13:56:07 PAGE 3   

 117          写命令
 118          dat1: 第一个要写入的数据字节。
 119          dat2: 如果有第二个要写入的数据字节。
 120          command: 要发送的命令字节。
 121          parameters_num: 参数数量，指定要发送的数据字节数（1或2）。
 122          */
 123          void WriteCommand( uchar dat1,uchar dat2,uchar command,uchar parameters_num )   
 124          {   
 125   1        if((parameters_num==1)|(parameters_num==2))
 126   1              {
 127   2                      CheckBusy();    
 128   2                  WriteData(dat1);
 129   2              }
 130   1              
 131   1        if(parameters_num==2)
 132   1              {
 133   2                      CheckBusy();    
 134   2                  WriteData(dat2);
 135   2              }
 136   1      
 137   1              AUTOWRITE_CheckBus();//写检测忙信号
 138   1              
 139   1              LCD_CD = 1;   
 140   1              DataBus = command; 
 141   1              LCD_WR = 0; 
 142   1              _nop_();     
 143   1              LCD_WR  = 1;      
 144   1      }
 145          
 146          //清屏
 147          void LcmClear( void )   
 148          {   uint a;
 149   1              Locatexy(0,0,Character);
 150   1              WriteCommand(0,0,0xb0,0 ); //0xb0:Set Data Auto Write
 151   1              for(a=0;a<8192;a++)
 152   1              {
 153   2                      WriteData( 0 ); 
 154   2              }   
 155   1              WriteCommand(0,0,0xb2,0 );//0xb2:Auto Reset 
 156   1      }   
 157          
 158          /*
 159          光标位置，支持图形模式和字符模式
 160          x：光标的横坐标（列数）。
 161          y：光标的纵坐标（行数）。
 162          mode：操作模式，决定是图形模式还是字符模式：
 163          mode = 1：图形模式。
 164          mode = 0：字符模式。
 165          */
 166          void Locatexy(uchar x,uchar y,uchar mode)   
 167          {  uint a=0;
 168   1              if(mode)                                //Graphic mode   x=0-29  y=0-127    START ADDRESS ：0800
 169   1              {
 170   2                      a=y*30+x;                              
 171   2                      WriteCommand((uchar)a,(uchar)(a>>8)+0x08,0x24,2);//a 是一个 16 位的整数，
 172   2      //                                                                 包含了高位和低位
 173   2              }
 174   1      
 175   1              else                                    //Character mode   x=0-29  y=0-15    START ADDRESS ：0000
 176   1              {
 177   2                      a=y*30+x;                             //0x24-Set Address Pointer-Table 6-6 
 178   2                      WriteCommand((uchar)(a),(uchar)(a>>8),0x24,2);
C51 COMPILER V9.60.7.0   LCD240128                                                         11/01/2024 13:56:07 PAGE 4   

 179   2              }
 180   1      }
 181          
 182          
 183          /*
 184          屏幕上的指定位置显示一个ASCII字符串
 185          x：表示字符串在LCD上的起始横坐标。
 186          y：表示字符串在LCD上的起始纵坐标。
 187          ascll：一个指向ASCII字符数组（字符串）的指针，即要显示的字符串内容。
 188          */
 189          void Display_Str(uchar x,uchar y,uchar *ascll)
 190          {
 191   1              Locatexy(x,y,Character);
 192   1              while(*ascll>0)//=!\0
 193   1              {
 194   2                      WriteCommand(*ascll-0x20,0,0xc0,1 );//Table 6-19-Data Write and Increment ADP  
 195   2                      ascll++;//*ascll - 0x20 将其转换为LCD可以识别的字符编码
 196   2              } 
 197   1              
 198   1      }
 199          //内部字库
 200          void Display_FullCGROM()
 201          {
 202   1          uchar x = 0, y = 0;       // 起始位置 (0, 0)
 203   1          uchar charCode = 0x00;    // 从 CGROM 的 0x00 开始
 204   1      
 205   1          // 遍历整个 LCD240128 屏幕 (30 列 x 16 行)
 206   1          while (y < 16)
 207   1          {
 208   2              Locatexy(x, y, Character);  // 设置光标位置
 209   2      
 210   2              // 显示当前的 CGROM 字符
 211   2              WriteCommand(charCode, 0, 0xc0, 1);  // 发送当前字符的代码到 LCD
 212   2      
 213   2              // 更新位置和字符
 214   2              x++;             // 移动到下一列
 215   2              charCode++;      // 显示下一个字符
 216   2      
 217   2              // 当到达每行最后一个字符，换到下一行
 218   2              if (x >= 30)
 219   2              {
 220   3                  x = 0;       // 列回到 0
 221   3                  y++;         // 行数增加，换行
 222   3              }
 223   2      
 224   2              // 如果 charCode 超过 0xFF，就回到 0x00，重新循环显示字符
 225   2              if (charCode > 0xFF)
 226   2              {
 227   3                  charCode = 0x00;
 228   3              }
 229   2          }
 230   1              Display_Str(8,4,"ABCDEFGIHJKLMNOPQRSTUVWXYZ1234567890abcdefghijklmnopkrstuvwxyz!%$()*+-,./ABCDEFGIHJKLMNO
             -PQRSTUVWXYZ1234567890abcdefghijklmnopkrst"); 
 231   1              Display_Str(0,0,"A");
 232   1              Display_Str(23,12,"ABCDEFGIHJKLMNOPQRSTUVWXYZ1234567890abcdefghijklmnopkrstuvwxyz!%$()*+-,./ABCDEFGIHJKLM
             -NOPQRSTUVWXYZ1234567890abcdefghijklmnopkrst");
 233   1      
 234   1      }
 235          
 236          
 237          
 238          
C51 COMPILER V9.60.7.0   LCD240128                                                         11/01/2024 13:56:07 PAGE 5   

 239          /*
 240          显示16x16点阵的汉字字符
 241          
 242          x：字符在LCD上的起始横坐标
 243          
 244          y：字符在LCD上的起始纵坐标
 245          
 246          Chinese_character：指向字库中的汉字数据（点阵数据）的指针
 247          
 248          character_code：表示汉字的索引或编码，用来确定要显示的汉字在字库中的位置
 249          */
 250          void Display_16_16(uchar x,uchar y,uchar  code *Chinese_character,uchar character_code)
 251          {       
 252   1              //uchar i,j;    
 253   1              //uint num=0;
 254   1              //num=character_code*0x20;
 255   1              //Locatexy(x,y,Graphic);
 256   1              //for(j = 0; j < 16; j++)  // 循环显示16行
 257   1              //{
 258   1              //      for(i = 0; i < 2; i++)  // 每行2个字节，共16列
 259   1              //      {
 260   1              //              WriteCommand(*(Chinese_character + num), 0, 0xc0, 1);
 261   1              //              num++;
 262   1              //      }
 263   1              //      y += 1;  // 移动到下一行
 264   1              //      Locatexy(x, y, Graphic);  // 更新光标位置
 265   1              //}
 266   1              
 267   1              
 268   1              
 269   1              uchar j;    // 行循环控制变量
 270   1          uint num = 0;  // 偏移量初始为0
 271   1          num = character_code * 0x10;  // 每个字符占用16字节（8×16）
 272   1          
 273   1          Locatexy(x, y, Graphic);  // 定位到显示的起始位置
 274   1      
 275   1          for(j = 0; j < 16; j++)  // 控制16行的循环
 276   1          {
 277   2              WriteCommand(*(Chinese_character + num), 0, 0xc0, 1);  // 写入1个字节的点阵数据
 278   2              num++;  // 移动到字库中的下一个字节
 279   2              y += 1;  // 移动到下一行
 280   2              Locatexy(x, y, Graphic);  // 更新光标位置
 281   2          }
 282   1      
 283   1      }
 284          /*
 285          显示8x16点阵的英文字符
 286          
 287          x：字符在LCD上的起始横坐标
 288          
 289          y：字符在LCD上的起始纵坐标
 290          
 291          Chinese_character：指向字库中的英文数据（点阵数据）的指针
 292          
 293          character_code：表示英文的索引或编码，用来确定要显示的英文在字库中的位置
 294          */
 295          void Display_8_16(uchar x, uchar y, uchar code *English_character, uchar character_code)
 296          {
 297   1          uchar j;    // 行循环控制变量
 298   1          uint num = 0;  // 偏移量初始为0
 299   1          num = character_code * 0x10;  // 每个字符占用16字节（8×16）
 300   1          
C51 COMPILER V9.60.7.0   LCD240128                                                         11/01/2024 13:56:07 PAGE 6   

 301   1          Locatexy(x, y, Graphic);  // 定位到显示的起始位置
 302   1      
 303   1          for(j = 0; j < 16; j++)  // 控制16行的循环
 304   1          {
 305   2              WriteCommand(*(English_character + num), 0, 0xc0, 1);  // 写入1个字节的点阵数据
 306   2              num++;  // 移动到字库中的下一个字节
 307   2              y += 1;  // 移动到下一行
 308   2              Locatexy(x, y, Graphic);  // 更新光标位置
 309   2          }
 310   1      }
 311          
 312          
 313          /* 
 314          函数用于在LCD屏幕上以图形模式填充一组点阵模式
 315          
 316          DotByte：要显示的第一个字节数据(点阵模式),用于填充每行的前30个字节
 317          
 318          DotByte1：要显示的第二个字节数据(点阵模式),用于填充每行的后30个字节
 319          */
 320          void DisplayDots( uchar DotByte,uchar DotByte1 )   
 321          {       uchar i,j;  
 322   1              Locatexy(0,0,Graphic);  
 323   1              WriteCommand(0,0,0xb0,0 );//Set Data Auto Write  
 324   1              for(j = 0; j < 64; j++)  // 循环64行
 325   1              {
 326   2                      for(i = 0; i < 30; i++)  // 每行的前30个字节写入DotByte
 327   2                      {
 328   3                              WriteData(DotByte);
 329   3                      }
 330   2      
 331   2                      for(i = 0; i < 30; i++)  // 每行的后30个字节写入DotByte1
 332   2                      {
 333   3                              WriteData(DotByte1);
 334   3                      }
 335   2              } 
 336   1              WriteCommand(0,0,0xb2,0 ); //Auto Reset
 337   1      }  
 338          
 339          
 340          
 341          /* 
 342          函数用于在LCD屏幕的指定位置绘制位图图像
 343          x:图像在LCD屏幕上的起始横坐标
 344          y:图像在LCD屏幕上的起始纵坐标
 345          W:图像的宽度（以像素为单位）
 346          H:图像的高度（以像素为单位）
 347          puts：指向位图图像数据的指针,数据以位为单位
 348          */
 349          void DisplayBMP(uchar x,uchar y,uchar W,uchar H,  uchar code *puts )   
 350          {       uchar k,j;
 351   1              Locatexy(x,y,Graphic); 
 352   1                      for(j = 0; j < H; j++)  // 遍历每一行
 353   1              {
 354   2                      WriteCommand(0, 0, 0xb0, 0);  // 进入数据自动写入模式
 355   2                      for(k = 0; k < W/8; k++)  // 每行遍历W/8个字节（8个像素为1字节）
 356   2                      {
 357   3                              WriteData(*puts++);  // 逐字节写入图像数据
 358   3                      }
 359   2                      WriteCommand(0, 0, 0xb2, 0);  // 退出数据自动写入模式
 360   2                      y += 1;  // 移动到下一行
 361   2                      Locatexy(x, y, Graphic);  // 更新光标位置
 362   2              }
C51 COMPILER V9.60.7.0   LCD240128                                                         11/01/2024 13:56:07 PAGE 7   

 363   1        
 364   1      } 
 365          //图片取反
 366          void ReverseDisplayBMP(uchar x,uchar y,uchar W,uchar H,  uchar code *puts )   
 367          {       uchar i,j;
 368   1              Locatexy(x,y,Graphic); 
 369   1            
 370   1              for(j=0;j<H;j++)
 371   1                      {       WriteCommand(0,0,0xb0,0 ); 
 372   2                              for(i=0;i<W/8;i++)
 373   2                              {
 374   3                                      WriteData(~(*puts));//取反
 375   3                                      puts++;
 376   3                              } 
 377   2                      WriteCommand(0,0,0xb2,0 ); 
 378   2                              y+=1;
 379   2                              Locatexy(x,y,Graphic);
 380   2                      }  
 381   1      } 
 382          
 383          
 384          //初始化
 385          void LcmInit( void )   
 386          {  
 387   1              LCD_Reset=0;
 388   1              Delay(50);
 389   1              LCD_Reset=1;
 390   1              Delay(50);
 391   1              //Set Control Word
 392   1              WriteCommand(0,0,0x40,2 );   //Set Text Home Address
 393   1              WriteCommand(30,0,0x41,2 );  //Set Text Area   
 394   1              WriteCommand(0,0x08,0x42,2 );//Set Graphic Home Address    
 395   1              WriteCommand(30,0,0x43,2 );  //Set Graphic Area 
 396   1              
 397   1              WriteCommand(0,0,0xa7,0);//8-line cursor - Table 6-17
 398   1              WriteCommand(0,0,0x80,0);//OR Mode - Table 6-14
 399   1              
 400   1      //      WriteCommand(0,0,0x81,0);//EXOR Mode - Table 6-14
 401   1      //      WriteCommand(0,0,0x83,0);//AND Mode - Table 6-14
 402   1      //      WriteCommand(0,0,0x84,0);//Text Attribute Mode - Table 6-14
 403   1      //      WriteCommand(0,0,0x80,0);//Internal Character Generator Mode - Table 6-14
 404   1      //      WriteCommand(0,0,0x90,0);//External Character Generator Mode  - Table 6-14
 405   1              
 406   1              WriteCommand(0,0,0x9c,0);//Text on, Graphic on - Table 6-16 
 407   1              
 408   1      //      WriteCommand(0,0,0x90,0);//Display off
 409   1      //      WriteCommand(0,0,0x92,0);//Cursor on, Blink off
 410   1      //      WriteCommand(0,0,0x93,0);//Cursor on, Blink on 
 411   1      }
 412          
 413          
 414          void picture(void)
 415          {   
 416   1              unsigned char i;
 417   1              DisplayBMP(0,0,240,128,BMP0);                      
 418   1          Delay(100); 
 419   1              
 420   1              
 421   1      for ( group = 0; group < 3; group++)  // 共三个不同的显示区域
 422   1      {
 423   2          for ( i = 0; i < count[group]; i++)
 424   2          {
C51 COMPILER V9.60.7.0   LCD240128                                                         11/01/2024 13:56:07 PAGE 8   

 425   3              Display_8_16(start_x[group] + i, start_y[group], Chinese_character, start_code[group] + i);
 426   3          }
 427   2      }
 428   1      
 429   1      
 430   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1006    ----
   CONSTANT SIZE    =    132    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     14      48
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
